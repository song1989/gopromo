// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package userinfoservice

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type UserInfoService interface {
	// Parameters:
	//  - UserID
	//  - IsForce
	UpgradeAccount(user_id int64, is_force bool) (r string, err error)
	// Parameters:
	//  - Type
	//  - SourceID
	GetUserByThirdPartyAccount(type_a1 int32, source_id string) (r string, err error)
	// Parameters:
	//  - Type
	//  - SourceID
	//  - Info
	//  - CommonParams
	ThirdPartyAccountRegister(type_a1 int32, source_id string, info string, commonParams string) (r string, err error)
	// Parameters:
	//  - Type
	//  - SourceId
	//  - Info
	//  - CommonParams
	ThirdPartyAccountLogin(type_a1 int32, sourceId string, info string, commonParams string) (r string, err error)
	// Parameters:
	//  - OldUserID
	//  - Number
	//  - Password
	//  - CommonParams
	MobileRegister(old_user_id int64, number string, password string, commonParams string) (r string, err error)
	// Parameters:
	//  - UserID
	//  - Type
	//  - SourceID
	//  - Info
	ThirdPartyAccountBind(user_id int64, type_a1 int32, source_id string, info string) (r string, err error)
	// Parameters:
	//  - UserID
	//  - Type
	//  - SourceID
	//  - PwEnabled
	ThirdPartyAccountUnbind(user_id int64, type_a1 int32, source_id string, pw_enabled int32) (r string, err error)
	// Parameters:
	//  - UserID
	//  - Type
	//  - SourceID
	//  - PwEnabled
	ThirdPartyAccountUnbindAndUpdateToken(user_id int64, type_a1 int32, source_id string, pw_enabled int32) (r string, err error)
	// Parameters:
	//  - UserID
	GetThirdPartyAccountInfo(user_id int64) (r string, err error)
	// Parameters:
	//  - UserID
	//  - Type
	GetThirdPartyAccountBindStatus(user_id int64, type_a1 int32) (r string, err error)
	// Parameters:
	//  - UserID
	//  - Type
	GetThirdPartyAccountDetail(user_id int64, type_a1 int32) (r string, err error)
	// Parameters:
	//  - Number
	BatchCreateTestUser(number int32) (r string, err error)
	// Parameters:
	//  - Mobile
	GetUserInfoByMobile(mobile string) (r string, err error)
	// Parameters:
	//  - ID
	//  - OldPassword
	//  - NewPassword_
	ChangePassword(id int64, old_password string, new_password string) (r string, err error)
	// Parameters:
	//  - OldUserID
	//  - CurrentUserID
	//  - Mobile
	ChangeMobile(old_user_id int64, current_user_id int64, mobile string) (r string, err error)
	// Parameters:
	//  - UserId
	//  - Mobile
	UnbindMobile(userId int64, mobile string) (r string, err error)
	// Parameters:
	//  - ID
	//  - Info
	UpdateInfo(id int64, info map[string]string) (r string, err error)
	// Parameters:
	//  - ID
	//  - Number
	UpdateNumber(id int64, number string) (r string, err error)
	// Parameters:
	//  - ID
	//  - NumberEdit
	SetNumberEdit(id int64, numberEdit int32) (r string, err error)
	// Parameters:
	//  - ID
	//  - Password
	SetPassword(id int64, password string) (r string, err error)
	// Parameters:
	//  - ID
	GetUserInfoById(id int64) (r string, err error)
	// Parameters:
	//  - PrivateKey
	GetUserInfoByPrivateKey(privateKey string) (r string, err error)
	// Parameters:
	//  - Number
	GetUserInfoByNumber(number string) (r string, err error)
	// Parameters:
	//  - Number
	GetUserIdByNumber(number string) (r int64, err error)
	// Parameters:
	//  - PrivateKey
	GetUserIdByPrivateKey(privateKey string) (r int64, err error)
	// Parameters:
	//  - ID
	GetPrivateKeyById(id int64) (r string, err error)
	// Parameters:
	//  - ID
	//  - Info
	Update(id int64, info map[string]string) (r string, err error)
	// Parameters:
	//  - Type
	//  - SourceIds
	GetUserInfosBySourceIds(type_a1 int32, sourceIds []string) (r string, err error)
	// Parameters:
	//  - ID
	GetTaskStatusById(id int64) (r string, err error)
	// Parameters:
	//  - ID
	//  - Number
	CheckNumber(id int64, number string) (r string, err error)
	// Parameters:
	//  - ID
	CheckNumberPermission(id int64) (r string, err error)
	// Parameters:
	//  - Type
	//  - UserName
	//  - Password
	//  - CommonParams
	AuthPasswordLogin(type_a1 int32, userName string, password string, commonParams string) (r string, err error)
	// Parameters:
	//  - Ids
	ClearTaskStatus(ids []int64) (r string, err error)
	// Parameters:
	//  - ID
	//  - Operator
	//  - Operand
	BitTaskStatus(id int64, operator string, operand int32) (r string, err error)
	// Parameters:
	//  - ID
	//  - NewPassword_
	ResetPassword(id int64, newPassword string) (r string, err error)
	// Parameters:
	//  - UserId
	GetUserAction(userId int64) (r string, err error)
	// Parameters:
	//  - UserId
	GetUserInterest(userId int64) (r string, err error)
	// Parameters:
	//  - UserId
	GetUserInterest2(userId int64) (r string, err error)
	// Parameters:
	//  - Ids
	GetUserInfoListByIds(ids string) (r string, err error)
	// Parameters:
	//  - ImId
	GetUserInfoByImId(imId string) (r string, err error)
	// Parameters:
	//  - BeginTime
	//  - EndTime
	//  - SourceId
	//  - Status
	//  - Cursor
	//  - Limit
	GetSuspectedTPAccount(beginTime int32, endTime int32, sourceId string, status int32, cursor int32, limit int32) (r string, err error)
	// Parameters:
	//  - SourceId
	//  - Type
	DisableSuspectedTPAccount(sourceId string, type_a1 int32) (r string, err error)
	// Parameters:
	//  - SourceId
	//  - Type
	EnableSuspectedTPAccount(sourceId string, type_a1 int32) (r string, err error)
	// Parameters:
	//  - SourceId
	//  - Type
	GetCreatedAccounts(sourceId string, type_a1 int32) (r string, err error)
	// Parameters:
	//  - BeginTime
	//  - EndTime
	//  - Status
	//  - Cursor
	//  - Limit
	GetWhitelistTPAccounts(beginTime int32, endTime int32, status int32, cursor int32, limit int32) (r string, err error)
	// Parameters:
	//  - Number
	AddWhitelistTPAccountByNumber(number string) (r string, err error)
	// Parameters:
	//  - SourceId
	//  - Type
	AddWhitelistTPAccountBySourceId(sourceId string, type_a1 int32) (r string, err error)
	// Parameters:
	//  - SourceId
	//  - Type
	DisableWhitelistTPAccount(sourceId string, type_a1 int32) (r string, err error)
	// Parameters:
	//  - SourceId
	//  - Type
	EnableWhitelistTPAccount(sourceId string, type_a1 int32) (r string, err error)
	// Parameters:
	//  - BeginTime
	//  - EndTime
	//  - Status
	CountSuspectedTPAccount(beginTime int32, endTime int32, status int32) (r string, err error)
	// Parameters:
	//  - BeginTime
	//  - EndTime
	//  - Status
	CountWhitelistTPAccounts(beginTime int32, endTime int32, status int32) (r string, err error)
	// Parameters:
	//  - SourceId
	//  - Type
	CountCreatedAccounts(sourceId string, type_a1 int32) (r string, err error)
	// Parameters:
	//  - UserId
	UpdateToken(userId int64) (r string, err error)
	// Parameters:
	//  - UserId
	GetIsDownloadIn(userId int64) (r string, err error)
	// Parameters:
	//  - Type
	//  - SourceID
	//  - Info
	ThirdPartyAccountRegisterH5(type_a1 int32, source_id string, info string) (r string, err error)
	// Parameters:
	//  - Type
	//  - SourceId
	//  - Info
	ThirdPartyAccountLoginH5(type_a1 int32, sourceId string, info string) (r string, err error)
	// Parameters:
	//  - Type
	//  - SourceId
	//  - Info
	ThirdPartyAccountLoginAndRegisterBananaChat(type_a1 int32, sourceId string, info string) (r string, err error)
	// Parameters:
	//  - Type
	//  - SourceId
	//  - Info
	//  - AppCode
	ThirdPartyAccountLoginAndRegisterByApp(type_a1 int32, sourceId string, info string, appCode string) (r string, err error)
	// Parameters:
	//  - OldUserID
	//  - Number
	//  - Password
	MobileRegisterH5(old_user_id int64, number string, password string) (r string, err error)
	// Parameters:
	//  - Number
	//  - Password
	MobileRegisterBananaChat(number string, password string) (r string, err error)
	// Parameters:
	//  - Number
	//  - Password
	//  - AppCode
	MobileRegisterByApp(number string, password string, appCode string) (r string, err error)
	// Parameters:
	//  - Type
	//  - UserName
	//  - Password
	AuthPasswordLoginH5(type_a1 int32, userName string, password string) (r string, err error)
	// Parameters:
	//  - Type
	//  - UserName
	//  - Password
	AuthPasswordLoginBananaChat(type_a1 int32, userName string, password string) (r string, err error)
	// Parameters:
	//  - Type
	//  - UserName
	//  - Password
	//  - AppCode
	AuthPasswordLoginByApp(type_a1 int32, userName string, password string, appCode string) (r string, err error)
	// Parameters:
	//  - Type
	//  - UserName
	//  - Password
	AuthPasswordLoginOpenPlatform(type_a1 int32, userName string, password string) (r string, err error)
	// Parameters:
	//  - UserId
	//  - Info
	//  - JsonProfileInfo
	UpdateProfileInfo(userId int64, info map[string]string, jsonProfileInfo string) (r string, err error)
	// Parameters:
	//  - UserId
	GetUserProfileInfoById(userId int64) (r string, err error)
	// Parameters:
	//  - Type
	//  - Province
	//  - City
	//  - Name
	//  - Offset
	//  - Limit
	GetSchoolDictionary(type_a1 int32, province int32, city int32, name string, offset int32, limit int32) (r string, err error)
	// Parameters:
	//  - UserId
	//  - Gender
	//  - Tags
	//  - Rate
	//  - Limit
	GetLoginTagRecUser(userId int64, gender string, tags []string, rate float64, limit int32) (r string, err error)
	// Parameters:
	//  - Ids
	GetUserInfoListByIdsNew(ids string) (r string, err error)
	Ping() (r string, err error)
	// Parameters:
	//  - UserId
	//  - AddressInfo
	AddUserAddressInfo(userId int64, addressInfo map[string]string) (r string, err error)
	// Parameters:
	//  - UserId
	//  - AddressInfoId
	DeleteUserAddressInfo(userId int64, addressInfoId []int64) (r string, err error)
	// Parameters:
	//  - UserId
	//  - AddressInfo
	EditUserAddressInfo(userId int64, addressInfo map[string]string) (r string, err error)
	// Parameters:
	//  - UserId
	GetUserAddressInfo(userId int64) (r string, err error)
	// Parameters:
	//  - SourceId
	//  - Info
	AddUserWeixin(sourceId string, info string) (r string, err error)
	// Parameters:
	//  - ActionUid
	//  - UserId
	GetUserWatchInfo(actionUid int64, userId int64) (r string, err error)
	// Parameters:
	//  - UserId
	IsTalent(userId int64) (r string, err error)
	// Parameters:
	//  - UserIds
	IsTalents(userIds []int64) (r map[int64]bool, err error)
	// Parameters:
	//  - UserId
	QueryMyBlackList(userId int64) (r string, err error)
	// Parameters:
	//  - UserId
	QueryBlackMeList(userId int64) (r string, err error)
	// Parameters:
	//  - UserId
	QueryUserStatus(userId int64) (r string, err error)
	// Parameters:
	//  - UserId
	//  - UserStatusMap
	UpdateUserStatus(userId int64, userStatusMap map[string]string) (r string, err error)
	// Parameters:
	//  - Score
	//  - Limit
	QueryUserRegister(score int64, limit int64) (r string, err error)
	// Parameters:
	//  - UserId
	QueryUserMedal(userId int64) (r string, err error)
	// Parameters:
	//  - UserId
	//  - AppCode
	GetUserTokenByApp(userId int64, appCode string) (r string, err error)
	// Parameters:
	//  - PrivateKey
	//  - AppCode
	GetUserInfoByPrivateKeyByApp(privateKey string, appCode string) (r string, err error)
	// Parameters:
	//  - UserId
	CancelUser(userId int64) (r string, err error)
}

type UserInfoServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewUserInfoServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserInfoServiceClient {
	return &UserInfoServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewUserInfoServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserInfoServiceClient {
	return &UserInfoServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - UserID
//  - IsForce
func (p *UserInfoServiceClient) UpgradeAccount(user_id int64, is_force bool) (r string, err error) {
	if err = p.sendUpgradeAccount(user_id, is_force); err != nil {
		return
	}
	return p.recvUpgradeAccount()
}

func (p *UserInfoServiceClient) sendUpgradeAccount(user_id int64, is_force bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("upgradeAccount", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceUpgradeAccountArgs{
		UserID:  user_id,
		IsForce: is_force,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvUpgradeAccount() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "upgradeAccount" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "upgradeAccount failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "upgradeAccount failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "upgradeAccount failed: invalid message type")
		return
	}
	result := UserInfoServiceUpgradeAccountResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Type
//  - SourceID
func (p *UserInfoServiceClient) GetUserByThirdPartyAccount(type_a1 int32, source_id string) (r string, err error) {
	if err = p.sendGetUserByThirdPartyAccount(type_a1, source_id); err != nil {
		return
	}
	return p.recvGetUserByThirdPartyAccount()
}

func (p *UserInfoServiceClient) sendGetUserByThirdPartyAccount(type_a1 int32, source_id string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserByThirdPartyAccount", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetUserByThirdPartyAccountArgs{
		Type:     type_a1,
		SourceID: source_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetUserByThirdPartyAccount() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserByThirdPartyAccount" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserByThirdPartyAccount failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserByThirdPartyAccount failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserByThirdPartyAccount failed: invalid message type")
		return
	}
	result := UserInfoServiceGetUserByThirdPartyAccountResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Type
//  - SourceID
//  - Info
//  - CommonParams
func (p *UserInfoServiceClient) ThirdPartyAccountRegister(type_a1 int32, source_id string, info string, commonParams string) (r string, err error) {
	if err = p.sendThirdPartyAccountRegister(type_a1, source_id, info, commonParams); err != nil {
		return
	}
	return p.recvThirdPartyAccountRegister()
}

func (p *UserInfoServiceClient) sendThirdPartyAccountRegister(type_a1 int32, source_id string, info string, commonParams string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("thirdPartyAccountRegister", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceThirdPartyAccountRegisterArgs{
		Type:         type_a1,
		SourceID:     source_id,
		Info:         info,
		CommonParams: commonParams,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvThirdPartyAccountRegister() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "thirdPartyAccountRegister" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "thirdPartyAccountRegister failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "thirdPartyAccountRegister failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "thirdPartyAccountRegister failed: invalid message type")
		return
	}
	result := UserInfoServiceThirdPartyAccountRegisterResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Type
//  - SourceId
//  - Info
//  - CommonParams
func (p *UserInfoServiceClient) ThirdPartyAccountLogin(type_a1 int32, sourceId string, info string, commonParams string) (r string, err error) {
	if err = p.sendThirdPartyAccountLogin(type_a1, sourceId, info, commonParams); err != nil {
		return
	}
	return p.recvThirdPartyAccountLogin()
}

func (p *UserInfoServiceClient) sendThirdPartyAccountLogin(type_a1 int32, sourceId string, info string, commonParams string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("thirdPartyAccountLogin", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceThirdPartyAccountLoginArgs{
		Type:         type_a1,
		SourceId:     sourceId,
		Info:         info,
		CommonParams: commonParams,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvThirdPartyAccountLogin() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "thirdPartyAccountLogin" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "thirdPartyAccountLogin failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "thirdPartyAccountLogin failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "thirdPartyAccountLogin failed: invalid message type")
		return
	}
	result := UserInfoServiceThirdPartyAccountLoginResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - OldUserID
//  - Number
//  - Password
//  - CommonParams
func (p *UserInfoServiceClient) MobileRegister(old_user_id int64, number string, password string, commonParams string) (r string, err error) {
	if err = p.sendMobileRegister(old_user_id, number, password, commonParams); err != nil {
		return
	}
	return p.recvMobileRegister()
}

func (p *UserInfoServiceClient) sendMobileRegister(old_user_id int64, number string, password string, commonParams string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("mobileRegister", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceMobileRegisterArgs{
		OldUserID:    old_user_id,
		Number:       number,
		Password:     password,
		CommonParams: commonParams,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvMobileRegister() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "mobileRegister" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "mobileRegister failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "mobileRegister failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "mobileRegister failed: invalid message type")
		return
	}
	result := UserInfoServiceMobileRegisterResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserID
//  - Type
//  - SourceID
//  - Info
func (p *UserInfoServiceClient) ThirdPartyAccountBind(user_id int64, type_a1 int32, source_id string, info string) (r string, err error) {
	if err = p.sendThirdPartyAccountBind(user_id, type_a1, source_id, info); err != nil {
		return
	}
	return p.recvThirdPartyAccountBind()
}

func (p *UserInfoServiceClient) sendThirdPartyAccountBind(user_id int64, type_a1 int32, source_id string, info string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("thirdPartyAccountBind", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceThirdPartyAccountBindArgs{
		UserID:   user_id,
		Type:     type_a1,
		SourceID: source_id,
		Info:     info,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvThirdPartyAccountBind() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "thirdPartyAccountBind" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "thirdPartyAccountBind failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "thirdPartyAccountBind failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "thirdPartyAccountBind failed: invalid message type")
		return
	}
	result := UserInfoServiceThirdPartyAccountBindResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserID
//  - Type
//  - SourceID
//  - PwEnabled
func (p *UserInfoServiceClient) ThirdPartyAccountUnbind(user_id int64, type_a1 int32, source_id string, pw_enabled int32) (r string, err error) {
	if err = p.sendThirdPartyAccountUnbind(user_id, type_a1, source_id, pw_enabled); err != nil {
		return
	}
	return p.recvThirdPartyAccountUnbind()
}

func (p *UserInfoServiceClient) sendThirdPartyAccountUnbind(user_id int64, type_a1 int32, source_id string, pw_enabled int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("thirdPartyAccountUnbind", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceThirdPartyAccountUnbindArgs{
		UserID:    user_id,
		Type:      type_a1,
		SourceID:  source_id,
		PwEnabled: pw_enabled,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvThirdPartyAccountUnbind() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "thirdPartyAccountUnbind" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "thirdPartyAccountUnbind failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "thirdPartyAccountUnbind failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "thirdPartyAccountUnbind failed: invalid message type")
		return
	}
	result := UserInfoServiceThirdPartyAccountUnbindResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserID
//  - Type
//  - SourceID
//  - PwEnabled
func (p *UserInfoServiceClient) ThirdPartyAccountUnbindAndUpdateToken(user_id int64, type_a1 int32, source_id string, pw_enabled int32) (r string, err error) {
	if err = p.sendThirdPartyAccountUnbindAndUpdateToken(user_id, type_a1, source_id, pw_enabled); err != nil {
		return
	}
	return p.recvThirdPartyAccountUnbindAndUpdateToken()
}

func (p *UserInfoServiceClient) sendThirdPartyAccountUnbindAndUpdateToken(user_id int64, type_a1 int32, source_id string, pw_enabled int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("thirdPartyAccountUnbindAndUpdateToken", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs{
		UserID:    user_id,
		Type:      type_a1,
		SourceID:  source_id,
		PwEnabled: pw_enabled,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvThirdPartyAccountUnbindAndUpdateToken() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "thirdPartyAccountUnbindAndUpdateToken" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "thirdPartyAccountUnbindAndUpdateToken failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "thirdPartyAccountUnbindAndUpdateToken failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "thirdPartyAccountUnbindAndUpdateToken failed: invalid message type")
		return
	}
	result := UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserID
func (p *UserInfoServiceClient) GetThirdPartyAccountInfo(user_id int64) (r string, err error) {
	if err = p.sendGetThirdPartyAccountInfo(user_id); err != nil {
		return
	}
	return p.recvGetThirdPartyAccountInfo()
}

func (p *UserInfoServiceClient) sendGetThirdPartyAccountInfo(user_id int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getThirdPartyAccountInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetThirdPartyAccountInfoArgs{
		UserID: user_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetThirdPartyAccountInfo() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getThirdPartyAccountInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getThirdPartyAccountInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getThirdPartyAccountInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getThirdPartyAccountInfo failed: invalid message type")
		return
	}
	result := UserInfoServiceGetThirdPartyAccountInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserID
//  - Type
func (p *UserInfoServiceClient) GetThirdPartyAccountBindStatus(user_id int64, type_a1 int32) (r string, err error) {
	if err = p.sendGetThirdPartyAccountBindStatus(user_id, type_a1); err != nil {
		return
	}
	return p.recvGetThirdPartyAccountBindStatus()
}

func (p *UserInfoServiceClient) sendGetThirdPartyAccountBindStatus(user_id int64, type_a1 int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getThirdPartyAccountBindStatus", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetThirdPartyAccountBindStatusArgs{
		UserID: user_id,
		Type:   type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetThirdPartyAccountBindStatus() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getThirdPartyAccountBindStatus" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getThirdPartyAccountBindStatus failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getThirdPartyAccountBindStatus failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getThirdPartyAccountBindStatus failed: invalid message type")
		return
	}
	result := UserInfoServiceGetThirdPartyAccountBindStatusResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserID
//  - Type
func (p *UserInfoServiceClient) GetThirdPartyAccountDetail(user_id int64, type_a1 int32) (r string, err error) {
	if err = p.sendGetThirdPartyAccountDetail(user_id, type_a1); err != nil {
		return
	}
	return p.recvGetThirdPartyAccountDetail()
}

func (p *UserInfoServiceClient) sendGetThirdPartyAccountDetail(user_id int64, type_a1 int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getThirdPartyAccountDetail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetThirdPartyAccountDetailArgs{
		UserID: user_id,
		Type:   type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetThirdPartyAccountDetail() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getThirdPartyAccountDetail" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getThirdPartyAccountDetail failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getThirdPartyAccountDetail failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getThirdPartyAccountDetail failed: invalid message type")
		return
	}
	result := UserInfoServiceGetThirdPartyAccountDetailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Number
func (p *UserInfoServiceClient) BatchCreateTestUser(number int32) (r string, err error) {
	if err = p.sendBatchCreateTestUser(number); err != nil {
		return
	}
	return p.recvBatchCreateTestUser()
}

func (p *UserInfoServiceClient) sendBatchCreateTestUser(number int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("batchCreateTestUser", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceBatchCreateTestUserArgs{
		Number: number,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvBatchCreateTestUser() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "batchCreateTestUser" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "batchCreateTestUser failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "batchCreateTestUser failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "batchCreateTestUser failed: invalid message type")
		return
	}
	result := UserInfoServiceBatchCreateTestUserResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Mobile
func (p *UserInfoServiceClient) GetUserInfoByMobile(mobile string) (r string, err error) {
	if err = p.sendGetUserInfoByMobile(mobile); err != nil {
		return
	}
	return p.recvGetUserInfoByMobile()
}

func (p *UserInfoServiceClient) sendGetUserInfoByMobile(mobile string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserInfoByMobile", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetUserInfoByMobileArgs{
		Mobile: mobile,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetUserInfoByMobile() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserInfoByMobile" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserInfoByMobile failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserInfoByMobile failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error25 error
		error25, err = error24.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error25
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserInfoByMobile failed: invalid message type")
		return
	}
	result := UserInfoServiceGetUserInfoByMobileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
//  - OldPassword
//  - NewPassword_
func (p *UserInfoServiceClient) ChangePassword(id int64, old_password string, new_password string) (r string, err error) {
	if err = p.sendChangePassword(id, old_password, new_password); err != nil {
		return
	}
	return p.recvChangePassword()
}

func (p *UserInfoServiceClient) sendChangePassword(id int64, old_password string, new_password string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("changePassword", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceChangePasswordArgs{
		ID:           id,
		OldPassword:  old_password,
		NewPassword_: new_password,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvChangePassword() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "changePassword" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "changePassword failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "changePassword failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error27 error
		error27, err = error26.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error27
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "changePassword failed: invalid message type")
		return
	}
	result := UserInfoServiceChangePasswordResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - OldUserID
//  - CurrentUserID
//  - Mobile
func (p *UserInfoServiceClient) ChangeMobile(old_user_id int64, current_user_id int64, mobile string) (r string, err error) {
	if err = p.sendChangeMobile(old_user_id, current_user_id, mobile); err != nil {
		return
	}
	return p.recvChangeMobile()
}

func (p *UserInfoServiceClient) sendChangeMobile(old_user_id int64, current_user_id int64, mobile string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("changeMobile", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceChangeMobileArgs{
		OldUserID:     old_user_id,
		CurrentUserID: current_user_id,
		Mobile:        mobile,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvChangeMobile() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "changeMobile" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "changeMobile failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "changeMobile failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error29 error
		error29, err = error28.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error29
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "changeMobile failed: invalid message type")
		return
	}
	result := UserInfoServiceChangeMobileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserId
//  - Mobile
func (p *UserInfoServiceClient) UnbindMobile(userId int64, mobile string) (r string, err error) {
	if err = p.sendUnbindMobile(userId, mobile); err != nil {
		return
	}
	return p.recvUnbindMobile()
}

func (p *UserInfoServiceClient) sendUnbindMobile(userId int64, mobile string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("unbindMobile", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceUnbindMobileArgs{
		UserId: userId,
		Mobile: mobile,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvUnbindMobile() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "unbindMobile" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "unbindMobile failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "unbindMobile failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error31 error
		error31, err = error30.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error31
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "unbindMobile failed: invalid message type")
		return
	}
	result := UserInfoServiceUnbindMobileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
//  - Info
func (p *UserInfoServiceClient) UpdateInfo(id int64, info map[string]string) (r string, err error) {
	if err = p.sendUpdateInfo(id, info); err != nil {
		return
	}
	return p.recvUpdateInfo()
}

func (p *UserInfoServiceClient) sendUpdateInfo(id int64, info map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceUpdateInfoArgs{
		ID:   id,
		Info: info,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvUpdateInfo() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error33 error
		error33, err = error32.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error33
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateInfo failed: invalid message type")
		return
	}
	result := UserInfoServiceUpdateInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
//  - Number
func (p *UserInfoServiceClient) UpdateNumber(id int64, number string) (r string, err error) {
	if err = p.sendUpdateNumber(id, number); err != nil {
		return
	}
	return p.recvUpdateNumber()
}

func (p *UserInfoServiceClient) sendUpdateNumber(id int64, number string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateNumber", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceUpdateNumberArgs{
		ID:     id,
		Number: number,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvUpdateNumber() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateNumber" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateNumber failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateNumber failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateNumber failed: invalid message type")
		return
	}
	result := UserInfoServiceUpdateNumberResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
//  - NumberEdit
func (p *UserInfoServiceClient) SetNumberEdit(id int64, numberEdit int32) (r string, err error) {
	if err = p.sendSetNumberEdit(id, numberEdit); err != nil {
		return
	}
	return p.recvSetNumberEdit()
}

func (p *UserInfoServiceClient) sendSetNumberEdit(id int64, numberEdit int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setNumberEdit", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceSetNumberEditArgs{
		ID:         id,
		NumberEdit: numberEdit,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvSetNumberEdit() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "setNumberEdit" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setNumberEdit failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setNumberEdit failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error37 error
		error37, err = error36.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error37
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setNumberEdit failed: invalid message type")
		return
	}
	result := UserInfoServiceSetNumberEditResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
//  - Password
func (p *UserInfoServiceClient) SetPassword(id int64, password string) (r string, err error) {
	if err = p.sendSetPassword(id, password); err != nil {
		return
	}
	return p.recvSetPassword()
}

func (p *UserInfoServiceClient) sendSetPassword(id int64, password string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setPassword", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceSetPasswordArgs{
		ID:       id,
		Password: password,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvSetPassword() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "setPassword" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setPassword failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setPassword failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error39 error
		error39, err = error38.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error39
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setPassword failed: invalid message type")
		return
	}
	result := UserInfoServiceSetPasswordResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
func (p *UserInfoServiceClient) GetUserInfoById(id int64) (r string, err error) {
	if err = p.sendGetUserInfoById(id); err != nil {
		return
	}
	return p.recvGetUserInfoById()
}

func (p *UserInfoServiceClient) sendGetUserInfoById(id int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserInfoById", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetUserInfoByIdArgs{
		ID: id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetUserInfoById() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserInfoById" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserInfoById failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserInfoById failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error41 error
		error41, err = error40.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error41
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserInfoById failed: invalid message type")
		return
	}
	result := UserInfoServiceGetUserInfoByIdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PrivateKey
func (p *UserInfoServiceClient) GetUserInfoByPrivateKey(privateKey string) (r string, err error) {
	if err = p.sendGetUserInfoByPrivateKey(privateKey); err != nil {
		return
	}
	return p.recvGetUserInfoByPrivateKey()
}

func (p *UserInfoServiceClient) sendGetUserInfoByPrivateKey(privateKey string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserInfoByPrivateKey", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetUserInfoByPrivateKeyArgs{
		PrivateKey: privateKey,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetUserInfoByPrivateKey() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserInfoByPrivateKey" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserInfoByPrivateKey failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserInfoByPrivateKey failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error43 error
		error43, err = error42.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error43
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserInfoByPrivateKey failed: invalid message type")
		return
	}
	result := UserInfoServiceGetUserInfoByPrivateKeyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Number
func (p *UserInfoServiceClient) GetUserInfoByNumber(number string) (r string, err error) {
	if err = p.sendGetUserInfoByNumber(number); err != nil {
		return
	}
	return p.recvGetUserInfoByNumber()
}

func (p *UserInfoServiceClient) sendGetUserInfoByNumber(number string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserInfoByNumber", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetUserInfoByNumberArgs{
		Number: number,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetUserInfoByNumber() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserInfoByNumber" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserInfoByNumber failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserInfoByNumber failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error44 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error45 error
		error45, err = error44.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error45
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserInfoByNumber failed: invalid message type")
		return
	}
	result := UserInfoServiceGetUserInfoByNumberResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Number
func (p *UserInfoServiceClient) GetUserIdByNumber(number string) (r int64, err error) {
	if err = p.sendGetUserIdByNumber(number); err != nil {
		return
	}
	return p.recvGetUserIdByNumber()
}

func (p *UserInfoServiceClient) sendGetUserIdByNumber(number string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserIdByNumber", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetUserIdByNumberArgs{
		Number: number,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetUserIdByNumber() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserIdByNumber" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserIdByNumber failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserIdByNumber failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error46 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error47 error
		error47, err = error46.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error47
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserIdByNumber failed: invalid message type")
		return
	}
	result := UserInfoServiceGetUserIdByNumberResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PrivateKey
func (p *UserInfoServiceClient) GetUserIdByPrivateKey(privateKey string) (r int64, err error) {
	if err = p.sendGetUserIdByPrivateKey(privateKey); err != nil {
		return
	}
	return p.recvGetUserIdByPrivateKey()
}

func (p *UserInfoServiceClient) sendGetUserIdByPrivateKey(privateKey string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserIdByPrivateKey", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetUserIdByPrivateKeyArgs{
		PrivateKey: privateKey,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetUserIdByPrivateKey() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserIdByPrivateKey" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserIdByPrivateKey failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserIdByPrivateKey failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error48 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error49 error
		error49, err = error48.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error49
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserIdByPrivateKey failed: invalid message type")
		return
	}
	result := UserInfoServiceGetUserIdByPrivateKeyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
func (p *UserInfoServiceClient) GetPrivateKeyById(id int64) (r string, err error) {
	if err = p.sendGetPrivateKeyById(id); err != nil {
		return
	}
	return p.recvGetPrivateKeyById()
}

func (p *UserInfoServiceClient) sendGetPrivateKeyById(id int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getPrivateKeyById", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetPrivateKeyByIdArgs{
		ID: id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetPrivateKeyById() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getPrivateKeyById" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getPrivateKeyById failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getPrivateKeyById failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error50 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error51 error
		error51, err = error50.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error51
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getPrivateKeyById failed: invalid message type")
		return
	}
	result := UserInfoServiceGetPrivateKeyByIdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
//  - Info
func (p *UserInfoServiceClient) Update(id int64, info map[string]string) (r string, err error) {
	if err = p.sendUpdate(id, info); err != nil {
		return
	}
	return p.recvUpdate()
}

func (p *UserInfoServiceClient) sendUpdate(id int64, info map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("update", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceUpdateArgs{
		ID:   id,
		Info: info,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvUpdate() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "update" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "update failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "update failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error52 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error53 error
		error53, err = error52.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error53
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "update failed: invalid message type")
		return
	}
	result := UserInfoServiceUpdateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Type
//  - SourceIds
func (p *UserInfoServiceClient) GetUserInfosBySourceIds(type_a1 int32, sourceIds []string) (r string, err error) {
	if err = p.sendGetUserInfosBySourceIds(type_a1, sourceIds); err != nil {
		return
	}
	return p.recvGetUserInfosBySourceIds()
}

func (p *UserInfoServiceClient) sendGetUserInfosBySourceIds(type_a1 int32, sourceIds []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserInfosBySourceIds", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetUserInfosBySourceIdsArgs{
		Type:      type_a1,
		SourceIds: sourceIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetUserInfosBySourceIds() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserInfosBySourceIds" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserInfosBySourceIds failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserInfosBySourceIds failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error54 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error55 error
		error55, err = error54.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error55
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserInfosBySourceIds failed: invalid message type")
		return
	}
	result := UserInfoServiceGetUserInfosBySourceIdsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
func (p *UserInfoServiceClient) GetTaskStatusById(id int64) (r string, err error) {
	if err = p.sendGetTaskStatusById(id); err != nil {
		return
	}
	return p.recvGetTaskStatusById()
}

func (p *UserInfoServiceClient) sendGetTaskStatusById(id int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getTaskStatusById", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetTaskStatusByIdArgs{
		ID: id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetTaskStatusById() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getTaskStatusById" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getTaskStatusById failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getTaskStatusById failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error56 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error57 error
		error57, err = error56.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error57
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getTaskStatusById failed: invalid message type")
		return
	}
	result := UserInfoServiceGetTaskStatusByIdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
//  - Number
func (p *UserInfoServiceClient) CheckNumber(id int64, number string) (r string, err error) {
	if err = p.sendCheckNumber(id, number); err != nil {
		return
	}
	return p.recvCheckNumber()
}

func (p *UserInfoServiceClient) sendCheckNumber(id int64, number string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("checkNumber", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceCheckNumberArgs{
		ID:     id,
		Number: number,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvCheckNumber() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "checkNumber" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "checkNumber failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "checkNumber failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error58 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error59 error
		error59, err = error58.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error59
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "checkNumber failed: invalid message type")
		return
	}
	result := UserInfoServiceCheckNumberResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
func (p *UserInfoServiceClient) CheckNumberPermission(id int64) (r string, err error) {
	if err = p.sendCheckNumberPermission(id); err != nil {
		return
	}
	return p.recvCheckNumberPermission()
}

func (p *UserInfoServiceClient) sendCheckNumberPermission(id int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("checkNumberPermission", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceCheckNumberPermissionArgs{
		ID: id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvCheckNumberPermission() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "checkNumberPermission" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "checkNumberPermission failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "checkNumberPermission failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error60 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error61 error
		error61, err = error60.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error61
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "checkNumberPermission failed: invalid message type")
		return
	}
	result := UserInfoServiceCheckNumberPermissionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Type
//  - UserName
//  - Password
//  - CommonParams
func (p *UserInfoServiceClient) AuthPasswordLogin(type_a1 int32, userName string, password string, commonParams string) (r string, err error) {
	if err = p.sendAuthPasswordLogin(type_a1, userName, password, commonParams); err != nil {
		return
	}
	return p.recvAuthPasswordLogin()
}

func (p *UserInfoServiceClient) sendAuthPasswordLogin(type_a1 int32, userName string, password string, commonParams string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("authPasswordLogin", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceAuthPasswordLoginArgs{
		Type:         type_a1,
		UserName:     userName,
		Password:     password,
		CommonParams: commonParams,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvAuthPasswordLogin() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "authPasswordLogin" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "authPasswordLogin failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "authPasswordLogin failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error62 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error63 error
		error63, err = error62.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error63
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "authPasswordLogin failed: invalid message type")
		return
	}
	result := UserInfoServiceAuthPasswordLoginResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Ids
func (p *UserInfoServiceClient) ClearTaskStatus(ids []int64) (r string, err error) {
	if err = p.sendClearTaskStatus(ids); err != nil {
		return
	}
	return p.recvClearTaskStatus()
}

func (p *UserInfoServiceClient) sendClearTaskStatus(ids []int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("clearTaskStatus", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceClearTaskStatusArgs{
		Ids: ids,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvClearTaskStatus() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "clearTaskStatus" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "clearTaskStatus failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "clearTaskStatus failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error64 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error65 error
		error65, err = error64.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error65
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "clearTaskStatus failed: invalid message type")
		return
	}
	result := UserInfoServiceClearTaskStatusResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
//  - Operator
//  - Operand
func (p *UserInfoServiceClient) BitTaskStatus(id int64, operator string, operand int32) (r string, err error) {
	if err = p.sendBitTaskStatus(id, operator, operand); err != nil {
		return
	}
	return p.recvBitTaskStatus()
}

func (p *UserInfoServiceClient) sendBitTaskStatus(id int64, operator string, operand int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bitTaskStatus", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceBitTaskStatusArgs{
		ID:       id,
		Operator: operator,
		Operand:  operand,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvBitTaskStatus() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bitTaskStatus" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bitTaskStatus failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bitTaskStatus failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error66 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error67 error
		error67, err = error66.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error67
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bitTaskStatus failed: invalid message type")
		return
	}
	result := UserInfoServiceBitTaskStatusResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ID
//  - NewPassword_
func (p *UserInfoServiceClient) ResetPassword(id int64, newPassword string) (r string, err error) {
	if err = p.sendResetPassword(id, newPassword); err != nil {
		return
	}
	return p.recvResetPassword()
}

func (p *UserInfoServiceClient) sendResetPassword(id int64, newPassword string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("resetPassword", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceResetPasswordArgs{
		ID:           id,
		NewPassword_: newPassword,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvResetPassword() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "resetPassword" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "resetPassword failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "resetPassword failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error68 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error69 error
		error69, err = error68.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error69
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "resetPassword failed: invalid message type")
		return
	}
	result := UserInfoServiceResetPasswordResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserId
func (p *UserInfoServiceClient) GetUserAction(userId int64) (r string, err error) {
	if err = p.sendGetUserAction(userId); err != nil {
		return
	}
	return p.recvGetUserAction()
}

func (p *UserInfoServiceClient) sendGetUserAction(userId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserAction", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetUserActionArgs{
		UserId: userId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetUserAction() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserAction" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserAction failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserAction failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error70 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error71 error
		error71, err = error70.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error71
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserAction failed: invalid message type")
		return
	}
	result := UserInfoServiceGetUserActionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserId
func (p *UserInfoServiceClient) GetUserInterest(userId int64) (r string, err error) {
	if err = p.sendGetUserInterest(userId); err != nil {
		return
	}
	return p.recvGetUserInterest()
}

func (p *UserInfoServiceClient) sendGetUserInterest(userId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserInterest", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetUserInterestArgs{
		UserId: userId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetUserInterest() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserInterest" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserInterest failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserInterest failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error72 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error73 error
		error73, err = error72.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error73
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserInterest failed: invalid message type")
		return
	}
	result := UserInfoServiceGetUserInterestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserId
func (p *UserInfoServiceClient) GetUserInterest2(userId int64) (r string, err error) {
	if err = p.sendGetUserInterest2(userId); err != nil {
		return
	}
	return p.recvGetUserInterest2()
}

func (p *UserInfoServiceClient) sendGetUserInterest2(userId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserInterest2", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetUserInterest2Args{
		UserId: userId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetUserInterest2() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserInterest2" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserInterest2 failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserInterest2 failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error74 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error75 error
		error75, err = error74.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error75
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserInterest2 failed: invalid message type")
		return
	}
	result := UserInfoServiceGetUserInterest2Result{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Ids
func (p *UserInfoServiceClient) GetUserInfoListByIds(ids string) (r string, err error) {
	if err = p.sendGetUserInfoListByIds(ids); err != nil {
		return
	}
	return p.recvGetUserInfoListByIds()
}

func (p *UserInfoServiceClient) sendGetUserInfoListByIds(ids string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserInfoListByIds", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetUserInfoListByIdsArgs{
		Ids: ids,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetUserInfoListByIds() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserInfoListByIds" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserInfoListByIds failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserInfoListByIds failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error76 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error77 error
		error77, err = error76.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error77
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserInfoListByIds failed: invalid message type")
		return
	}
	result := UserInfoServiceGetUserInfoListByIdsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ImId
func (p *UserInfoServiceClient) GetUserInfoByImId(imId string) (r string, err error) {
	if err = p.sendGetUserInfoByImId(imId); err != nil {
		return
	}
	return p.recvGetUserInfoByImId()
}

func (p *UserInfoServiceClient) sendGetUserInfoByImId(imId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserInfoByImId", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetUserInfoByImIdArgs{
		ImId: imId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetUserInfoByImId() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserInfoByImId" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserInfoByImId failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserInfoByImId failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error78 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error79 error
		error79, err = error78.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error79
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserInfoByImId failed: invalid message type")
		return
	}
	result := UserInfoServiceGetUserInfoByImIdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BeginTime
//  - EndTime
//  - SourceId
//  - Status
//  - Cursor
//  - Limit
func (p *UserInfoServiceClient) GetSuspectedTPAccount(beginTime int32, endTime int32, sourceId string, status int32, cursor int32, limit int32) (r string, err error) {
	if err = p.sendGetSuspectedTPAccount(beginTime, endTime, sourceId, status, cursor, limit); err != nil {
		return
	}
	return p.recvGetSuspectedTPAccount()
}

func (p *UserInfoServiceClient) sendGetSuspectedTPAccount(beginTime int32, endTime int32, sourceId string, status int32, cursor int32, limit int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSuspectedTPAccount", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetSuspectedTPAccountArgs{
		BeginTime: beginTime,
		EndTime:   endTime,
		SourceId:  sourceId,
		Status:    status,
		Cursor:    cursor,
		Limit:     limit,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetSuspectedTPAccount() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getSuspectedTPAccount" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSuspectedTPAccount failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSuspectedTPAccount failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error80 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error81 error
		error81, err = error80.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error81
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSuspectedTPAccount failed: invalid message type")
		return
	}
	result := UserInfoServiceGetSuspectedTPAccountResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SourceId
//  - Type
func (p *UserInfoServiceClient) DisableSuspectedTPAccount(sourceId string, type_a1 int32) (r string, err error) {
	if err = p.sendDisableSuspectedTPAccount(sourceId, type_a1); err != nil {
		return
	}
	return p.recvDisableSuspectedTPAccount()
}

func (p *UserInfoServiceClient) sendDisableSuspectedTPAccount(sourceId string, type_a1 int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("disableSuspectedTPAccount", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceDisableSuspectedTPAccountArgs{
		SourceId: sourceId,
		Type:     type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvDisableSuspectedTPAccount() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "disableSuspectedTPAccount" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "disableSuspectedTPAccount failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "disableSuspectedTPAccount failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error82 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error83 error
		error83, err = error82.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error83
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "disableSuspectedTPAccount failed: invalid message type")
		return
	}
	result := UserInfoServiceDisableSuspectedTPAccountResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SourceId
//  - Type
func (p *UserInfoServiceClient) EnableSuspectedTPAccount(sourceId string, type_a1 int32) (r string, err error) {
	if err = p.sendEnableSuspectedTPAccount(sourceId, type_a1); err != nil {
		return
	}
	return p.recvEnableSuspectedTPAccount()
}

func (p *UserInfoServiceClient) sendEnableSuspectedTPAccount(sourceId string, type_a1 int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("enableSuspectedTPAccount", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceEnableSuspectedTPAccountArgs{
		SourceId: sourceId,
		Type:     type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvEnableSuspectedTPAccount() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "enableSuspectedTPAccount" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "enableSuspectedTPAccount failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "enableSuspectedTPAccount failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error84 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error85 error
		error85, err = error84.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error85
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "enableSuspectedTPAccount failed: invalid message type")
		return
	}
	result := UserInfoServiceEnableSuspectedTPAccountResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SourceId
//  - Type
func (p *UserInfoServiceClient) GetCreatedAccounts(sourceId string, type_a1 int32) (r string, err error) {
	if err = p.sendGetCreatedAccounts(sourceId, type_a1); err != nil {
		return
	}
	return p.recvGetCreatedAccounts()
}

func (p *UserInfoServiceClient) sendGetCreatedAccounts(sourceId string, type_a1 int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getCreatedAccounts", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetCreatedAccountsArgs{
		SourceId: sourceId,
		Type:     type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetCreatedAccounts() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getCreatedAccounts" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCreatedAccounts failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCreatedAccounts failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error86 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error87 error
		error87, err = error86.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error87
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCreatedAccounts failed: invalid message type")
		return
	}
	result := UserInfoServiceGetCreatedAccountsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BeginTime
//  - EndTime
//  - Status
//  - Cursor
//  - Limit
func (p *UserInfoServiceClient) GetWhitelistTPAccounts(beginTime int32, endTime int32, status int32, cursor int32, limit int32) (r string, err error) {
	if err = p.sendGetWhitelistTPAccounts(beginTime, endTime, status, cursor, limit); err != nil {
		return
	}
	return p.recvGetWhitelistTPAccounts()
}

func (p *UserInfoServiceClient) sendGetWhitelistTPAccounts(beginTime int32, endTime int32, status int32, cursor int32, limit int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getWhitelistTPAccounts", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetWhitelistTPAccountsArgs{
		BeginTime: beginTime,
		EndTime:   endTime,
		Status:    status,
		Cursor:    cursor,
		Limit:     limit,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetWhitelistTPAccounts() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getWhitelistTPAccounts" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getWhitelistTPAccounts failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getWhitelistTPAccounts failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error88 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error89 error
		error89, err = error88.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error89
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getWhitelistTPAccounts failed: invalid message type")
		return
	}
	result := UserInfoServiceGetWhitelistTPAccountsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Number
func (p *UserInfoServiceClient) AddWhitelistTPAccountByNumber(number string) (r string, err error) {
	if err = p.sendAddWhitelistTPAccountByNumber(number); err != nil {
		return
	}
	return p.recvAddWhitelistTPAccountByNumber()
}

func (p *UserInfoServiceClient) sendAddWhitelistTPAccountByNumber(number string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addWhitelistTPAccountByNumber", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceAddWhitelistTPAccountByNumberArgs{
		Number: number,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvAddWhitelistTPAccountByNumber() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addWhitelistTPAccountByNumber" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addWhitelistTPAccountByNumber failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addWhitelistTPAccountByNumber failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error90 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error91 error
		error91, err = error90.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error91
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addWhitelistTPAccountByNumber failed: invalid message type")
		return
	}
	result := UserInfoServiceAddWhitelistTPAccountByNumberResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SourceId
//  - Type
func (p *UserInfoServiceClient) AddWhitelistTPAccountBySourceId(sourceId string, type_a1 int32) (r string, err error) {
	if err = p.sendAddWhitelistTPAccountBySourceId(sourceId, type_a1); err != nil {
		return
	}
	return p.recvAddWhitelistTPAccountBySourceId()
}

func (p *UserInfoServiceClient) sendAddWhitelistTPAccountBySourceId(sourceId string, type_a1 int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addWhitelistTPAccountBySourceId", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceAddWhitelistTPAccountBySourceIdArgs{
		SourceId: sourceId,
		Type:     type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvAddWhitelistTPAccountBySourceId() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addWhitelistTPAccountBySourceId" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addWhitelistTPAccountBySourceId failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addWhitelistTPAccountBySourceId failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error92 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error93 error
		error93, err = error92.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error93
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addWhitelistTPAccountBySourceId failed: invalid message type")
		return
	}
	result := UserInfoServiceAddWhitelistTPAccountBySourceIdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SourceId
//  - Type
func (p *UserInfoServiceClient) DisableWhitelistTPAccount(sourceId string, type_a1 int32) (r string, err error) {
	if err = p.sendDisableWhitelistTPAccount(sourceId, type_a1); err != nil {
		return
	}
	return p.recvDisableWhitelistTPAccount()
}

func (p *UserInfoServiceClient) sendDisableWhitelistTPAccount(sourceId string, type_a1 int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("disableWhitelistTPAccount", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceDisableWhitelistTPAccountArgs{
		SourceId: sourceId,
		Type:     type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvDisableWhitelistTPAccount() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "disableWhitelistTPAccount" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "disableWhitelistTPAccount failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "disableWhitelistTPAccount failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error94 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error95 error
		error95, err = error94.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error95
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "disableWhitelistTPAccount failed: invalid message type")
		return
	}
	result := UserInfoServiceDisableWhitelistTPAccountResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SourceId
//  - Type
func (p *UserInfoServiceClient) EnableWhitelistTPAccount(sourceId string, type_a1 int32) (r string, err error) {
	if err = p.sendEnableWhitelistTPAccount(sourceId, type_a1); err != nil {
		return
	}
	return p.recvEnableWhitelistTPAccount()
}

func (p *UserInfoServiceClient) sendEnableWhitelistTPAccount(sourceId string, type_a1 int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("enableWhitelistTPAccount", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceEnableWhitelistTPAccountArgs{
		SourceId: sourceId,
		Type:     type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvEnableWhitelistTPAccount() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "enableWhitelistTPAccount" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "enableWhitelistTPAccount failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "enableWhitelistTPAccount failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error96 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error97 error
		error97, err = error96.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error97
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "enableWhitelistTPAccount failed: invalid message type")
		return
	}
	result := UserInfoServiceEnableWhitelistTPAccountResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BeginTime
//  - EndTime
//  - Status
func (p *UserInfoServiceClient) CountSuspectedTPAccount(beginTime int32, endTime int32, status int32) (r string, err error) {
	if err = p.sendCountSuspectedTPAccount(beginTime, endTime, status); err != nil {
		return
	}
	return p.recvCountSuspectedTPAccount()
}

func (p *UserInfoServiceClient) sendCountSuspectedTPAccount(beginTime int32, endTime int32, status int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("countSuspectedTPAccount", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceCountSuspectedTPAccountArgs{
		BeginTime: beginTime,
		EndTime:   endTime,
		Status:    status,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvCountSuspectedTPAccount() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "countSuspectedTPAccount" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "countSuspectedTPAccount failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "countSuspectedTPAccount failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error98 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error99 error
		error99, err = error98.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error99
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "countSuspectedTPAccount failed: invalid message type")
		return
	}
	result := UserInfoServiceCountSuspectedTPAccountResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - BeginTime
//  - EndTime
//  - Status
func (p *UserInfoServiceClient) CountWhitelistTPAccounts(beginTime int32, endTime int32, status int32) (r string, err error) {
	if err = p.sendCountWhitelistTPAccounts(beginTime, endTime, status); err != nil {
		return
	}
	return p.recvCountWhitelistTPAccounts()
}

func (p *UserInfoServiceClient) sendCountWhitelistTPAccounts(beginTime int32, endTime int32, status int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("countWhitelistTPAccounts", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceCountWhitelistTPAccountsArgs{
		BeginTime: beginTime,
		EndTime:   endTime,
		Status:    status,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvCountWhitelistTPAccounts() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "countWhitelistTPAccounts" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "countWhitelistTPAccounts failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "countWhitelistTPAccounts failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error100 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error101 error
		error101, err = error100.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error101
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "countWhitelistTPAccounts failed: invalid message type")
		return
	}
	result := UserInfoServiceCountWhitelistTPAccountsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SourceId
//  - Type
func (p *UserInfoServiceClient) CountCreatedAccounts(sourceId string, type_a1 int32) (r string, err error) {
	if err = p.sendCountCreatedAccounts(sourceId, type_a1); err != nil {
		return
	}
	return p.recvCountCreatedAccounts()
}

func (p *UserInfoServiceClient) sendCountCreatedAccounts(sourceId string, type_a1 int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("countCreatedAccounts", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceCountCreatedAccountsArgs{
		SourceId: sourceId,
		Type:     type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvCountCreatedAccounts() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "countCreatedAccounts" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "countCreatedAccounts failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "countCreatedAccounts failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error102 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error103 error
		error103, err = error102.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error103
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "countCreatedAccounts failed: invalid message type")
		return
	}
	result := UserInfoServiceCountCreatedAccountsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserId
func (p *UserInfoServiceClient) UpdateToken(userId int64) (r string, err error) {
	if err = p.sendUpdateToken(userId); err != nil {
		return
	}
	return p.recvUpdateToken()
}

func (p *UserInfoServiceClient) sendUpdateToken(userId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateToken", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceUpdateTokenArgs{
		UserId: userId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvUpdateToken() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateToken" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateToken failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateToken failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error104 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error105 error
		error105, err = error104.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error105
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateToken failed: invalid message type")
		return
	}
	result := UserInfoServiceUpdateTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserId
func (p *UserInfoServiceClient) GetIsDownloadIn(userId int64) (r string, err error) {
	if err = p.sendGetIsDownloadIn(userId); err != nil {
		return
	}
	return p.recvGetIsDownloadIn()
}

func (p *UserInfoServiceClient) sendGetIsDownloadIn(userId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getIsDownloadIn", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetIsDownloadInArgs{
		UserId: userId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetIsDownloadIn() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getIsDownloadIn" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getIsDownloadIn failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getIsDownloadIn failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error106 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error107 error
		error107, err = error106.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error107
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getIsDownloadIn failed: invalid message type")
		return
	}
	result := UserInfoServiceGetIsDownloadInResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Type
//  - SourceID
//  - Info
func (p *UserInfoServiceClient) ThirdPartyAccountRegisterH5(type_a1 int32, source_id string, info string) (r string, err error) {
	if err = p.sendThirdPartyAccountRegisterH5(type_a1, source_id, info); err != nil {
		return
	}
	return p.recvThirdPartyAccountRegisterH5()
}

func (p *UserInfoServiceClient) sendThirdPartyAccountRegisterH5(type_a1 int32, source_id string, info string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("thirdPartyAccountRegisterH5", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceThirdPartyAccountRegisterH5Args{
		Type:     type_a1,
		SourceID: source_id,
		Info:     info,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvThirdPartyAccountRegisterH5() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "thirdPartyAccountRegisterH5" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "thirdPartyAccountRegisterH5 failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "thirdPartyAccountRegisterH5 failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error108 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error109 error
		error109, err = error108.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error109
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "thirdPartyAccountRegisterH5 failed: invalid message type")
		return
	}
	result := UserInfoServiceThirdPartyAccountRegisterH5Result{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Type
//  - SourceId
//  - Info
func (p *UserInfoServiceClient) ThirdPartyAccountLoginH5(type_a1 int32, sourceId string, info string) (r string, err error) {
	if err = p.sendThirdPartyAccountLoginH5(type_a1, sourceId, info); err != nil {
		return
	}
	return p.recvThirdPartyAccountLoginH5()
}

func (p *UserInfoServiceClient) sendThirdPartyAccountLoginH5(type_a1 int32, sourceId string, info string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("thirdPartyAccountLoginH5", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceThirdPartyAccountLoginH5Args{
		Type:     type_a1,
		SourceId: sourceId,
		Info:     info,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvThirdPartyAccountLoginH5() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "thirdPartyAccountLoginH5" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "thirdPartyAccountLoginH5 failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "thirdPartyAccountLoginH5 failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error110 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error111 error
		error111, err = error110.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error111
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "thirdPartyAccountLoginH5 failed: invalid message type")
		return
	}
	result := UserInfoServiceThirdPartyAccountLoginH5Result{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Type
//  - SourceId
//  - Info
func (p *UserInfoServiceClient) ThirdPartyAccountLoginAndRegisterBananaChat(type_a1 int32, sourceId string, info string) (r string, err error) {
	if err = p.sendThirdPartyAccountLoginAndRegisterBananaChat(type_a1, sourceId, info); err != nil {
		return
	}
	return p.recvThirdPartyAccountLoginAndRegisterBananaChat()
}

func (p *UserInfoServiceClient) sendThirdPartyAccountLoginAndRegisterBananaChat(type_a1 int32, sourceId string, info string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("thirdPartyAccountLoginAndRegisterBananaChat", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatArgs{
		Type:     type_a1,
		SourceId: sourceId,
		Info:     info,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvThirdPartyAccountLoginAndRegisterBananaChat() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "thirdPartyAccountLoginAndRegisterBananaChat" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "thirdPartyAccountLoginAndRegisterBananaChat failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "thirdPartyAccountLoginAndRegisterBananaChat failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error112 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error113 error
		error113, err = error112.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error113
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "thirdPartyAccountLoginAndRegisterBananaChat failed: invalid message type")
		return
	}
	result := UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Type
//  - SourceId
//  - Info
//  - AppCode
func (p *UserInfoServiceClient) ThirdPartyAccountLoginAndRegisterByApp(type_a1 int32, sourceId string, info string, appCode string) (r string, err error) {
	if err = p.sendThirdPartyAccountLoginAndRegisterByApp(type_a1, sourceId, info, appCode); err != nil {
		return
	}
	return p.recvThirdPartyAccountLoginAndRegisterByApp()
}

func (p *UserInfoServiceClient) sendThirdPartyAccountLoginAndRegisterByApp(type_a1 int32, sourceId string, info string, appCode string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("thirdPartyAccountLoginAndRegisterByApp", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs{
		Type:     type_a1,
		SourceId: sourceId,
		Info:     info,
		AppCode:  appCode,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvThirdPartyAccountLoginAndRegisterByApp() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "thirdPartyAccountLoginAndRegisterByApp" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "thirdPartyAccountLoginAndRegisterByApp failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "thirdPartyAccountLoginAndRegisterByApp failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error114 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error115 error
		error115, err = error114.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error115
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "thirdPartyAccountLoginAndRegisterByApp failed: invalid message type")
		return
	}
	result := UserInfoServiceThirdPartyAccountLoginAndRegisterByAppResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - OldUserID
//  - Number
//  - Password
func (p *UserInfoServiceClient) MobileRegisterH5(old_user_id int64, number string, password string) (r string, err error) {
	if err = p.sendMobileRegisterH5(old_user_id, number, password); err != nil {
		return
	}
	return p.recvMobileRegisterH5()
}

func (p *UserInfoServiceClient) sendMobileRegisterH5(old_user_id int64, number string, password string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("mobileRegisterH5", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceMobileRegisterH5Args{
		OldUserID: old_user_id,
		Number:    number,
		Password:  password,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvMobileRegisterH5() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "mobileRegisterH5" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "mobileRegisterH5 failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "mobileRegisterH5 failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error116 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error117 error
		error117, err = error116.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error117
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "mobileRegisterH5 failed: invalid message type")
		return
	}
	result := UserInfoServiceMobileRegisterH5Result{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Number
//  - Password
func (p *UserInfoServiceClient) MobileRegisterBananaChat(number string, password string) (r string, err error) {
	if err = p.sendMobileRegisterBananaChat(number, password); err != nil {
		return
	}
	return p.recvMobileRegisterBananaChat()
}

func (p *UserInfoServiceClient) sendMobileRegisterBananaChat(number string, password string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("mobileRegisterBananaChat", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceMobileRegisterBananaChatArgs{
		Number:   number,
		Password: password,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvMobileRegisterBananaChat() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "mobileRegisterBananaChat" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "mobileRegisterBananaChat failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "mobileRegisterBananaChat failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error118 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error119 error
		error119, err = error118.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error119
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "mobileRegisterBananaChat failed: invalid message type")
		return
	}
	result := UserInfoServiceMobileRegisterBananaChatResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Number
//  - Password
//  - AppCode
func (p *UserInfoServiceClient) MobileRegisterByApp(number string, password string, appCode string) (r string, err error) {
	if err = p.sendMobileRegisterByApp(number, password, appCode); err != nil {
		return
	}
	return p.recvMobileRegisterByApp()
}

func (p *UserInfoServiceClient) sendMobileRegisterByApp(number string, password string, appCode string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("mobileRegisterByApp", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceMobileRegisterByAppArgs{
		Number:   number,
		Password: password,
		AppCode:  appCode,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvMobileRegisterByApp() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "mobileRegisterByApp" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "mobileRegisterByApp failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "mobileRegisterByApp failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error120 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error121 error
		error121, err = error120.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error121
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "mobileRegisterByApp failed: invalid message type")
		return
	}
	result := UserInfoServiceMobileRegisterByAppResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Type
//  - UserName
//  - Password
func (p *UserInfoServiceClient) AuthPasswordLoginH5(type_a1 int32, userName string, password string) (r string, err error) {
	if err = p.sendAuthPasswordLoginH5(type_a1, userName, password); err != nil {
		return
	}
	return p.recvAuthPasswordLoginH5()
}

func (p *UserInfoServiceClient) sendAuthPasswordLoginH5(type_a1 int32, userName string, password string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("authPasswordLoginH5", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceAuthPasswordLoginH5Args{
		Type:     type_a1,
		UserName: userName,
		Password: password,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvAuthPasswordLoginH5() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "authPasswordLoginH5" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "authPasswordLoginH5 failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "authPasswordLoginH5 failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error122 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error123 error
		error123, err = error122.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error123
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "authPasswordLoginH5 failed: invalid message type")
		return
	}
	result := UserInfoServiceAuthPasswordLoginH5Result{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Type
//  - UserName
//  - Password
func (p *UserInfoServiceClient) AuthPasswordLoginBananaChat(type_a1 int32, userName string, password string) (r string, err error) {
	if err = p.sendAuthPasswordLoginBananaChat(type_a1, userName, password); err != nil {
		return
	}
	return p.recvAuthPasswordLoginBananaChat()
}

func (p *UserInfoServiceClient) sendAuthPasswordLoginBananaChat(type_a1 int32, userName string, password string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("authPasswordLoginBananaChat", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceAuthPasswordLoginBananaChatArgs{
		Type:     type_a1,
		UserName: userName,
		Password: password,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvAuthPasswordLoginBananaChat() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "authPasswordLoginBananaChat" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "authPasswordLoginBananaChat failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "authPasswordLoginBananaChat failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error124 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error125 error
		error125, err = error124.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error125
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "authPasswordLoginBananaChat failed: invalid message type")
		return
	}
	result := UserInfoServiceAuthPasswordLoginBananaChatResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Type
//  - UserName
//  - Password
//  - AppCode
func (p *UserInfoServiceClient) AuthPasswordLoginByApp(type_a1 int32, userName string, password string, appCode string) (r string, err error) {
	if err = p.sendAuthPasswordLoginByApp(type_a1, userName, password, appCode); err != nil {
		return
	}
	return p.recvAuthPasswordLoginByApp()
}

func (p *UserInfoServiceClient) sendAuthPasswordLoginByApp(type_a1 int32, userName string, password string, appCode string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("authPasswordLoginByApp", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceAuthPasswordLoginByAppArgs{
		Type:     type_a1,
		UserName: userName,
		Password: password,
		AppCode:  appCode,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvAuthPasswordLoginByApp() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "authPasswordLoginByApp" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "authPasswordLoginByApp failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "authPasswordLoginByApp failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error126 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error127 error
		error127, err = error126.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error127
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "authPasswordLoginByApp failed: invalid message type")
		return
	}
	result := UserInfoServiceAuthPasswordLoginByAppResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Type
//  - UserName
//  - Password
func (p *UserInfoServiceClient) AuthPasswordLoginOpenPlatform(type_a1 int32, userName string, password string) (r string, err error) {
	if err = p.sendAuthPasswordLoginOpenPlatform(type_a1, userName, password); err != nil {
		return
	}
	return p.recvAuthPasswordLoginOpenPlatform()
}

func (p *UserInfoServiceClient) sendAuthPasswordLoginOpenPlatform(type_a1 int32, userName string, password string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("authPasswordLoginOpenPlatform", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceAuthPasswordLoginOpenPlatformArgs{
		Type:     type_a1,
		UserName: userName,
		Password: password,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvAuthPasswordLoginOpenPlatform() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "authPasswordLoginOpenPlatform" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "authPasswordLoginOpenPlatform failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "authPasswordLoginOpenPlatform failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error128 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error129 error
		error129, err = error128.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error129
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "authPasswordLoginOpenPlatform failed: invalid message type")
		return
	}
	result := UserInfoServiceAuthPasswordLoginOpenPlatformResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserId
//  - Info
//  - JsonProfileInfo
func (p *UserInfoServiceClient) UpdateProfileInfo(userId int64, info map[string]string, jsonProfileInfo string) (r string, err error) {
	if err = p.sendUpdateProfileInfo(userId, info, jsonProfileInfo); err != nil {
		return
	}
	return p.recvUpdateProfileInfo()
}

func (p *UserInfoServiceClient) sendUpdateProfileInfo(userId int64, info map[string]string, jsonProfileInfo string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateProfileInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceUpdateProfileInfoArgs{
		UserId:          userId,
		Info:            info,
		JsonProfileInfo: jsonProfileInfo,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvUpdateProfileInfo() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateProfileInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateProfileInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateProfileInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error130 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error131 error
		error131, err = error130.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error131
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateProfileInfo failed: invalid message type")
		return
	}
	result := UserInfoServiceUpdateProfileInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserId
func (p *UserInfoServiceClient) GetUserProfileInfoById(userId int64) (r string, err error) {
	if err = p.sendGetUserProfileInfoById(userId); err != nil {
		return
	}
	return p.recvGetUserProfileInfoById()
}

func (p *UserInfoServiceClient) sendGetUserProfileInfoById(userId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserProfileInfoById", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetUserProfileInfoByIdArgs{
		UserId: userId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetUserProfileInfoById() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserProfileInfoById" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserProfileInfoById failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserProfileInfoById failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error132 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error133 error
		error133, err = error132.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error133
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserProfileInfoById failed: invalid message type")
		return
	}
	result := UserInfoServiceGetUserProfileInfoByIdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Type
//  - Province
//  - City
//  - Name
//  - Offset
//  - Limit
func (p *UserInfoServiceClient) GetSchoolDictionary(type_a1 int32, province int32, city int32, name string, offset int32, limit int32) (r string, err error) {
	if err = p.sendGetSchoolDictionary(type_a1, province, city, name, offset, limit); err != nil {
		return
	}
	return p.recvGetSchoolDictionary()
}

func (p *UserInfoServiceClient) sendGetSchoolDictionary(type_a1 int32, province int32, city int32, name string, offset int32, limit int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSchoolDictionary", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetSchoolDictionaryArgs{
		Type:     type_a1,
		Province: province,
		City:     city,
		Name:     name,
		Offset:   offset,
		Limit:    limit,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetSchoolDictionary() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getSchoolDictionary" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSchoolDictionary failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSchoolDictionary failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error134 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error135 error
		error135, err = error134.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error135
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSchoolDictionary failed: invalid message type")
		return
	}
	result := UserInfoServiceGetSchoolDictionaryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserId
//  - Gender
//  - Tags
//  - Rate
//  - Limit
func (p *UserInfoServiceClient) GetLoginTagRecUser(userId int64, gender string, tags []string, rate float64, limit int32) (r string, err error) {
	if err = p.sendGetLoginTagRecUser(userId, gender, tags, rate, limit); err != nil {
		return
	}
	return p.recvGetLoginTagRecUser()
}

func (p *UserInfoServiceClient) sendGetLoginTagRecUser(userId int64, gender string, tags []string, rate float64, limit int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getLoginTagRecUser", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetLoginTagRecUserArgs{
		UserId: userId,
		Gender: gender,
		Tags:   tags,
		Rate:   rate,
		Limit:  limit,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetLoginTagRecUser() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getLoginTagRecUser" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getLoginTagRecUser failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getLoginTagRecUser failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error136 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error137 error
		error137, err = error136.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error137
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getLoginTagRecUser failed: invalid message type")
		return
	}
	result := UserInfoServiceGetLoginTagRecUserResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Ids
func (p *UserInfoServiceClient) GetUserInfoListByIdsNew(ids string) (r string, err error) {
	if err = p.sendGetUserInfoListByIdsNew(ids); err != nil {
		return
	}
	return p.recvGetUserInfoListByIdsNew()
}

func (p *UserInfoServiceClient) sendGetUserInfoListByIdsNew(ids string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserInfoListByIdsNew", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetUserInfoListByIdsNewArgs{
		Ids: ids,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetUserInfoListByIdsNew() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserInfoListByIdsNew" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserInfoListByIdsNew failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserInfoListByIdsNew failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error138 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error139 error
		error139, err = error138.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error139
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserInfoListByIdsNew failed: invalid message type")
		return
	}
	result := UserInfoServiceGetUserInfoListByIdsNewResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

func (p *UserInfoServiceClient) Ping() (r string, err error) {
	if err = p.sendPing(); err != nil {
		return
	}
	return p.recvPing()
}

func (p *UserInfoServiceClient) sendPing() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ping", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServicePingArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvPing() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "ping" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ping failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error140 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error141 error
		error141, err = error140.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error141
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ping failed: invalid message type")
		return
	}
	result := UserInfoServicePingResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserId
//  - AddressInfo
func (p *UserInfoServiceClient) AddUserAddressInfo(userId int64, addressInfo map[string]string) (r string, err error) {
	if err = p.sendAddUserAddressInfo(userId, addressInfo); err != nil {
		return
	}
	return p.recvAddUserAddressInfo()
}

func (p *UserInfoServiceClient) sendAddUserAddressInfo(userId int64, addressInfo map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addUserAddressInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceAddUserAddressInfoArgs{
		UserId:      userId,
		AddressInfo: addressInfo,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvAddUserAddressInfo() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addUserAddressInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addUserAddressInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addUserAddressInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error142 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error143 error
		error143, err = error142.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error143
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addUserAddressInfo failed: invalid message type")
		return
	}
	result := UserInfoServiceAddUserAddressInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserId
//  - AddressInfoId
func (p *UserInfoServiceClient) DeleteUserAddressInfo(userId int64, addressInfoId []int64) (r string, err error) {
	if err = p.sendDeleteUserAddressInfo(userId, addressInfoId); err != nil {
		return
	}
	return p.recvDeleteUserAddressInfo()
}

func (p *UserInfoServiceClient) sendDeleteUserAddressInfo(userId int64, addressInfoId []int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteUserAddressInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceDeleteUserAddressInfoArgs{
		UserId:        userId,
		AddressInfoId: addressInfoId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvDeleteUserAddressInfo() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteUserAddressInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteUserAddressInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteUserAddressInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error144 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error145 error
		error145, err = error144.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error145
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteUserAddressInfo failed: invalid message type")
		return
	}
	result := UserInfoServiceDeleteUserAddressInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserId
//  - AddressInfo
func (p *UserInfoServiceClient) EditUserAddressInfo(userId int64, addressInfo map[string]string) (r string, err error) {
	if err = p.sendEditUserAddressInfo(userId, addressInfo); err != nil {
		return
	}
	return p.recvEditUserAddressInfo()
}

func (p *UserInfoServiceClient) sendEditUserAddressInfo(userId int64, addressInfo map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("editUserAddressInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceEditUserAddressInfoArgs{
		UserId:      userId,
		AddressInfo: addressInfo,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvEditUserAddressInfo() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "editUserAddressInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "editUserAddressInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "editUserAddressInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error146 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error147 error
		error147, err = error146.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error147
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "editUserAddressInfo failed: invalid message type")
		return
	}
	result := UserInfoServiceEditUserAddressInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserId
func (p *UserInfoServiceClient) GetUserAddressInfo(userId int64) (r string, err error) {
	if err = p.sendGetUserAddressInfo(userId); err != nil {
		return
	}
	return p.recvGetUserAddressInfo()
}

func (p *UserInfoServiceClient) sendGetUserAddressInfo(userId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserAddressInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetUserAddressInfoArgs{
		UserId: userId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetUserAddressInfo() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserAddressInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserAddressInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserAddressInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error148 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error149 error
		error149, err = error148.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error149
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserAddressInfo failed: invalid message type")
		return
	}
	result := UserInfoServiceGetUserAddressInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SourceId
//  - Info
func (p *UserInfoServiceClient) AddUserWeixin(sourceId string, info string) (r string, err error) {
	if err = p.sendAddUserWeixin(sourceId, info); err != nil {
		return
	}
	return p.recvAddUserWeixin()
}

func (p *UserInfoServiceClient) sendAddUserWeixin(sourceId string, info string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addUserWeixin", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceAddUserWeixinArgs{
		SourceId: sourceId,
		Info:     info,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvAddUserWeixin() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addUserWeixin" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addUserWeixin failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addUserWeixin failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error150 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error151 error
		error151, err = error150.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error151
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addUserWeixin failed: invalid message type")
		return
	}
	result := UserInfoServiceAddUserWeixinResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ActionUid
//  - UserId
func (p *UserInfoServiceClient) GetUserWatchInfo(actionUid int64, userId int64) (r string, err error) {
	if err = p.sendGetUserWatchInfo(actionUid, userId); err != nil {
		return
	}
	return p.recvGetUserWatchInfo()
}

func (p *UserInfoServiceClient) sendGetUserWatchInfo(actionUid int64, userId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserWatchInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetUserWatchInfoArgs{
		ActionUid: actionUid,
		UserId:    userId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetUserWatchInfo() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserWatchInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserWatchInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserWatchInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error152 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error153 error
		error153, err = error152.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error153
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserWatchInfo failed: invalid message type")
		return
	}
	result := UserInfoServiceGetUserWatchInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserId
func (p *UserInfoServiceClient) IsTalent(userId int64) (r string, err error) {
	if err = p.sendIsTalent(userId); err != nil {
		return
	}
	return p.recvIsTalent()
}

func (p *UserInfoServiceClient) sendIsTalent(userId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("isTalent", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceIsTalentArgs{
		UserId: userId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvIsTalent() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "isTalent" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "isTalent failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "isTalent failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error154 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error155 error
		error155, err = error154.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error155
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "isTalent failed: invalid message type")
		return
	}
	result := UserInfoServiceIsTalentResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserIds
func (p *UserInfoServiceClient) IsTalents(userIds []int64) (r map[int64]bool, err error) {
	if err = p.sendIsTalents(userIds); err != nil {
		return
	}
	return p.recvIsTalents()
}

func (p *UserInfoServiceClient) sendIsTalents(userIds []int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("isTalents", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceIsTalentsArgs{
		UserIds: userIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvIsTalents() (value map[int64]bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "isTalents" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "isTalents failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "isTalents failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error156 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error157 error
		error157, err = error156.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error157
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "isTalents failed: invalid message type")
		return
	}
	result := UserInfoServiceIsTalentsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserId
func (p *UserInfoServiceClient) QueryMyBlackList(userId int64) (r string, err error) {
	if err = p.sendQueryMyBlackList(userId); err != nil {
		return
	}
	return p.recvQueryMyBlackList()
}

func (p *UserInfoServiceClient) sendQueryMyBlackList(userId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("queryMyBlackList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceQueryMyBlackListArgs{
		UserId: userId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvQueryMyBlackList() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "queryMyBlackList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "queryMyBlackList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryMyBlackList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error158 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error159 error
		error159, err = error158.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error159
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "queryMyBlackList failed: invalid message type")
		return
	}
	result := UserInfoServiceQueryMyBlackListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserId
func (p *UserInfoServiceClient) QueryBlackMeList(userId int64) (r string, err error) {
	if err = p.sendQueryBlackMeList(userId); err != nil {
		return
	}
	return p.recvQueryBlackMeList()
}

func (p *UserInfoServiceClient) sendQueryBlackMeList(userId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("queryBlackMeList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceQueryBlackMeListArgs{
		UserId: userId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvQueryBlackMeList() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "queryBlackMeList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "queryBlackMeList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryBlackMeList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error160 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error161 error
		error161, err = error160.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error161
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "queryBlackMeList failed: invalid message type")
		return
	}
	result := UserInfoServiceQueryBlackMeListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserId
func (p *UserInfoServiceClient) QueryUserStatus(userId int64) (r string, err error) {
	if err = p.sendQueryUserStatus(userId); err != nil {
		return
	}
	return p.recvQueryUserStatus()
}

func (p *UserInfoServiceClient) sendQueryUserStatus(userId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("queryUserStatus", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceQueryUserStatusArgs{
		UserId: userId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvQueryUserStatus() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "queryUserStatus" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "queryUserStatus failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryUserStatus failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error162 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error163 error
		error163, err = error162.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error163
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "queryUserStatus failed: invalid message type")
		return
	}
	result := UserInfoServiceQueryUserStatusResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserId
//  - UserStatusMap
func (p *UserInfoServiceClient) UpdateUserStatus(userId int64, userStatusMap map[string]string) (r string, err error) {
	if err = p.sendUpdateUserStatus(userId, userStatusMap); err != nil {
		return
	}
	return p.recvUpdateUserStatus()
}

func (p *UserInfoServiceClient) sendUpdateUserStatus(userId int64, userStatusMap map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateUserStatus", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceUpdateUserStatusArgs{
		UserId:        userId,
		UserStatusMap: userStatusMap,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvUpdateUserStatus() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateUserStatus" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateUserStatus failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateUserStatus failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error164 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error165 error
		error165, err = error164.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error165
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateUserStatus failed: invalid message type")
		return
	}
	result := UserInfoServiceUpdateUserStatusResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Score
//  - Limit
func (p *UserInfoServiceClient) QueryUserRegister(score int64, limit int64) (r string, err error) {
	if err = p.sendQueryUserRegister(score, limit); err != nil {
		return
	}
	return p.recvQueryUserRegister()
}

func (p *UserInfoServiceClient) sendQueryUserRegister(score int64, limit int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("queryUserRegister", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceQueryUserRegisterArgs{
		Score: score,
		Limit: limit,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvQueryUserRegister() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "queryUserRegister" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "queryUserRegister failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryUserRegister failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error166 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error167 error
		error167, err = error166.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error167
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "queryUserRegister failed: invalid message type")
		return
	}
	result := UserInfoServiceQueryUserRegisterResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserId
func (p *UserInfoServiceClient) QueryUserMedal(userId int64) (r string, err error) {
	if err = p.sendQueryUserMedal(userId); err != nil {
		return
	}
	return p.recvQueryUserMedal()
}

func (p *UserInfoServiceClient) sendQueryUserMedal(userId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("queryUserMedal", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceQueryUserMedalArgs{
		UserId: userId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvQueryUserMedal() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "queryUserMedal" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "queryUserMedal failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryUserMedal failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error168 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error169 error
		error169, err = error168.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error169
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "queryUserMedal failed: invalid message type")
		return
	}
	result := UserInfoServiceQueryUserMedalResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserId
//  - AppCode
func (p *UserInfoServiceClient) GetUserTokenByApp(userId int64, appCode string) (r string, err error) {
	if err = p.sendGetUserTokenByApp(userId, appCode); err != nil {
		return
	}
	return p.recvGetUserTokenByApp()
}

func (p *UserInfoServiceClient) sendGetUserTokenByApp(userId int64, appCode string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserTokenByApp", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetUserTokenByAppArgs{
		UserId:  userId,
		AppCode: appCode,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetUserTokenByApp() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserTokenByApp" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserTokenByApp failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserTokenByApp failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error170 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error171 error
		error171, err = error170.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error171
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserTokenByApp failed: invalid message type")
		return
	}
	result := UserInfoServiceGetUserTokenByAppResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PrivateKey
//  - AppCode
func (p *UserInfoServiceClient) GetUserInfoByPrivateKeyByApp(privateKey string, appCode string) (r string, err error) {
	if err = p.sendGetUserInfoByPrivateKeyByApp(privateKey, appCode); err != nil {
		return
	}
	return p.recvGetUserInfoByPrivateKeyByApp()
}

func (p *UserInfoServiceClient) sendGetUserInfoByPrivateKeyByApp(privateKey string, appCode string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserInfoByPrivateKeyByApp", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceGetUserInfoByPrivateKeyByAppArgs{
		PrivateKey: privateKey,
		AppCode:    appCode,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvGetUserInfoByPrivateKeyByApp() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserInfoByPrivateKeyByApp" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserInfoByPrivateKeyByApp failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserInfoByPrivateKeyByApp failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error172 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error173 error
		error173, err = error172.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error173
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserInfoByPrivateKeyByApp failed: invalid message type")
		return
	}
	result := UserInfoServiceGetUserInfoByPrivateKeyByAppResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserId
func (p *UserInfoServiceClient) CancelUser(userId int64) (r string, err error) {
	if err = p.sendCancelUser(userId); err != nil {
		return
	}
	return p.recvCancelUser()
}

func (p *UserInfoServiceClient) sendCancelUser(userId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("cancelUser", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserInfoServiceCancelUserArgs{
		UserId: userId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserInfoServiceClient) recvCancelUser() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "cancelUser" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "cancelUser failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "cancelUser failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error174 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error175 error
		error175, err = error174.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error175
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "cancelUser failed: invalid message type")
		return
	}
	result := UserInfoServiceCancelUserResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type UserInfoServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      UserInfoService
}

func (p *UserInfoServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *UserInfoServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *UserInfoServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewUserInfoServiceProcessor(handler UserInfoService) *UserInfoServiceProcessor {

	self176 := &UserInfoServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self176.processorMap["upgradeAccount"] = &userInfoServiceProcessorUpgradeAccount{handler: handler}
	self176.processorMap["getUserByThirdPartyAccount"] = &userInfoServiceProcessorGetUserByThirdPartyAccount{handler: handler}
	self176.processorMap["thirdPartyAccountRegister"] = &userInfoServiceProcessorThirdPartyAccountRegister{handler: handler}
	self176.processorMap["thirdPartyAccountLogin"] = &userInfoServiceProcessorThirdPartyAccountLogin{handler: handler}
	self176.processorMap["mobileRegister"] = &userInfoServiceProcessorMobileRegister{handler: handler}
	self176.processorMap["thirdPartyAccountBind"] = &userInfoServiceProcessorThirdPartyAccountBind{handler: handler}
	self176.processorMap["thirdPartyAccountUnbind"] = &userInfoServiceProcessorThirdPartyAccountUnbind{handler: handler}
	self176.processorMap["thirdPartyAccountUnbindAndUpdateToken"] = &userInfoServiceProcessorThirdPartyAccountUnbindAndUpdateToken{handler: handler}
	self176.processorMap["getThirdPartyAccountInfo"] = &userInfoServiceProcessorGetThirdPartyAccountInfo{handler: handler}
	self176.processorMap["getThirdPartyAccountBindStatus"] = &userInfoServiceProcessorGetThirdPartyAccountBindStatus{handler: handler}
	self176.processorMap["getThirdPartyAccountDetail"] = &userInfoServiceProcessorGetThirdPartyAccountDetail{handler: handler}
	self176.processorMap["batchCreateTestUser"] = &userInfoServiceProcessorBatchCreateTestUser{handler: handler}
	self176.processorMap["getUserInfoByMobile"] = &userInfoServiceProcessorGetUserInfoByMobile{handler: handler}
	self176.processorMap["changePassword"] = &userInfoServiceProcessorChangePassword{handler: handler}
	self176.processorMap["changeMobile"] = &userInfoServiceProcessorChangeMobile{handler: handler}
	self176.processorMap["unbindMobile"] = &userInfoServiceProcessorUnbindMobile{handler: handler}
	self176.processorMap["updateInfo"] = &userInfoServiceProcessorUpdateInfo{handler: handler}
	self176.processorMap["updateNumber"] = &userInfoServiceProcessorUpdateNumber{handler: handler}
	self176.processorMap["setNumberEdit"] = &userInfoServiceProcessorSetNumberEdit{handler: handler}
	self176.processorMap["setPassword"] = &userInfoServiceProcessorSetPassword{handler: handler}
	self176.processorMap["getUserInfoById"] = &userInfoServiceProcessorGetUserInfoById{handler: handler}
	self176.processorMap["getUserInfoByPrivateKey"] = &userInfoServiceProcessorGetUserInfoByPrivateKey{handler: handler}
	self176.processorMap["getUserInfoByNumber"] = &userInfoServiceProcessorGetUserInfoByNumber{handler: handler}
	self176.processorMap["getUserIdByNumber"] = &userInfoServiceProcessorGetUserIdByNumber{handler: handler}
	self176.processorMap["getUserIdByPrivateKey"] = &userInfoServiceProcessorGetUserIdByPrivateKey{handler: handler}
	self176.processorMap["getPrivateKeyById"] = &userInfoServiceProcessorGetPrivateKeyById{handler: handler}
	self176.processorMap["update"] = &userInfoServiceProcessorUpdate{handler: handler}
	self176.processorMap["getUserInfosBySourceIds"] = &userInfoServiceProcessorGetUserInfosBySourceIds{handler: handler}
	self176.processorMap["getTaskStatusById"] = &userInfoServiceProcessorGetTaskStatusById{handler: handler}
	self176.processorMap["checkNumber"] = &userInfoServiceProcessorCheckNumber{handler: handler}
	self176.processorMap["checkNumberPermission"] = &userInfoServiceProcessorCheckNumberPermission{handler: handler}
	self176.processorMap["authPasswordLogin"] = &userInfoServiceProcessorAuthPasswordLogin{handler: handler}
	self176.processorMap["clearTaskStatus"] = &userInfoServiceProcessorClearTaskStatus{handler: handler}
	self176.processorMap["bitTaskStatus"] = &userInfoServiceProcessorBitTaskStatus{handler: handler}
	self176.processorMap["resetPassword"] = &userInfoServiceProcessorResetPassword{handler: handler}
	self176.processorMap["getUserAction"] = &userInfoServiceProcessorGetUserAction{handler: handler}
	self176.processorMap["getUserInterest"] = &userInfoServiceProcessorGetUserInterest{handler: handler}
	self176.processorMap["getUserInterest2"] = &userInfoServiceProcessorGetUserInterest2{handler: handler}
	self176.processorMap["getUserInfoListByIds"] = &userInfoServiceProcessorGetUserInfoListByIds{handler: handler}
	self176.processorMap["getUserInfoByImId"] = &userInfoServiceProcessorGetUserInfoByImId{handler: handler}
	self176.processorMap["getSuspectedTPAccount"] = &userInfoServiceProcessorGetSuspectedTPAccount{handler: handler}
	self176.processorMap["disableSuspectedTPAccount"] = &userInfoServiceProcessorDisableSuspectedTPAccount{handler: handler}
	self176.processorMap["enableSuspectedTPAccount"] = &userInfoServiceProcessorEnableSuspectedTPAccount{handler: handler}
	self176.processorMap["getCreatedAccounts"] = &userInfoServiceProcessorGetCreatedAccounts{handler: handler}
	self176.processorMap["getWhitelistTPAccounts"] = &userInfoServiceProcessorGetWhitelistTPAccounts{handler: handler}
	self176.processorMap["addWhitelistTPAccountByNumber"] = &userInfoServiceProcessorAddWhitelistTPAccountByNumber{handler: handler}
	self176.processorMap["addWhitelistTPAccountBySourceId"] = &userInfoServiceProcessorAddWhitelistTPAccountBySourceId{handler: handler}
	self176.processorMap["disableWhitelistTPAccount"] = &userInfoServiceProcessorDisableWhitelistTPAccount{handler: handler}
	self176.processorMap["enableWhitelistTPAccount"] = &userInfoServiceProcessorEnableWhitelistTPAccount{handler: handler}
	self176.processorMap["countSuspectedTPAccount"] = &userInfoServiceProcessorCountSuspectedTPAccount{handler: handler}
	self176.processorMap["countWhitelistTPAccounts"] = &userInfoServiceProcessorCountWhitelistTPAccounts{handler: handler}
	self176.processorMap["countCreatedAccounts"] = &userInfoServiceProcessorCountCreatedAccounts{handler: handler}
	self176.processorMap["updateToken"] = &userInfoServiceProcessorUpdateToken{handler: handler}
	self176.processorMap["getIsDownloadIn"] = &userInfoServiceProcessorGetIsDownloadIn{handler: handler}
	self176.processorMap["thirdPartyAccountRegisterH5"] = &userInfoServiceProcessorThirdPartyAccountRegisterH5{handler: handler}
	self176.processorMap["thirdPartyAccountLoginH5"] = &userInfoServiceProcessorThirdPartyAccountLoginH5{handler: handler}
	self176.processorMap["thirdPartyAccountLoginAndRegisterBananaChat"] = &userInfoServiceProcessorThirdPartyAccountLoginAndRegisterBananaChat{handler: handler}
	self176.processorMap["thirdPartyAccountLoginAndRegisterByApp"] = &userInfoServiceProcessorThirdPartyAccountLoginAndRegisterByApp{handler: handler}
	self176.processorMap["mobileRegisterH5"] = &userInfoServiceProcessorMobileRegisterH5{handler: handler}
	self176.processorMap["mobileRegisterBananaChat"] = &userInfoServiceProcessorMobileRegisterBananaChat{handler: handler}
	self176.processorMap["mobileRegisterByApp"] = &userInfoServiceProcessorMobileRegisterByApp{handler: handler}
	self176.processorMap["authPasswordLoginH5"] = &userInfoServiceProcessorAuthPasswordLoginH5{handler: handler}
	self176.processorMap["authPasswordLoginBananaChat"] = &userInfoServiceProcessorAuthPasswordLoginBananaChat{handler: handler}
	self176.processorMap["authPasswordLoginByApp"] = &userInfoServiceProcessorAuthPasswordLoginByApp{handler: handler}
	self176.processorMap["authPasswordLoginOpenPlatform"] = &userInfoServiceProcessorAuthPasswordLoginOpenPlatform{handler: handler}
	self176.processorMap["updateProfileInfo"] = &userInfoServiceProcessorUpdateProfileInfo{handler: handler}
	self176.processorMap["getUserProfileInfoById"] = &userInfoServiceProcessorGetUserProfileInfoById{handler: handler}
	self176.processorMap["getSchoolDictionary"] = &userInfoServiceProcessorGetSchoolDictionary{handler: handler}
	self176.processorMap["getLoginTagRecUser"] = &userInfoServiceProcessorGetLoginTagRecUser{handler: handler}
	self176.processorMap["getUserInfoListByIdsNew"] = &userInfoServiceProcessorGetUserInfoListByIdsNew{handler: handler}
	self176.processorMap["ping"] = &userInfoServiceProcessorPing{handler: handler}
	self176.processorMap["addUserAddressInfo"] = &userInfoServiceProcessorAddUserAddressInfo{handler: handler}
	self176.processorMap["deleteUserAddressInfo"] = &userInfoServiceProcessorDeleteUserAddressInfo{handler: handler}
	self176.processorMap["editUserAddressInfo"] = &userInfoServiceProcessorEditUserAddressInfo{handler: handler}
	self176.processorMap["getUserAddressInfo"] = &userInfoServiceProcessorGetUserAddressInfo{handler: handler}
	self176.processorMap["addUserWeixin"] = &userInfoServiceProcessorAddUserWeixin{handler: handler}
	self176.processorMap["getUserWatchInfo"] = &userInfoServiceProcessorGetUserWatchInfo{handler: handler}
	self176.processorMap["isTalent"] = &userInfoServiceProcessorIsTalent{handler: handler}
	self176.processorMap["isTalents"] = &userInfoServiceProcessorIsTalents{handler: handler}
	self176.processorMap["queryMyBlackList"] = &userInfoServiceProcessorQueryMyBlackList{handler: handler}
	self176.processorMap["queryBlackMeList"] = &userInfoServiceProcessorQueryBlackMeList{handler: handler}
	self176.processorMap["queryUserStatus"] = &userInfoServiceProcessorQueryUserStatus{handler: handler}
	self176.processorMap["updateUserStatus"] = &userInfoServiceProcessorUpdateUserStatus{handler: handler}
	self176.processorMap["queryUserRegister"] = &userInfoServiceProcessorQueryUserRegister{handler: handler}
	self176.processorMap["queryUserMedal"] = &userInfoServiceProcessorQueryUserMedal{handler: handler}
	self176.processorMap["getUserTokenByApp"] = &userInfoServiceProcessorGetUserTokenByApp{handler: handler}
	self176.processorMap["getUserInfoByPrivateKeyByApp"] = &userInfoServiceProcessorGetUserInfoByPrivateKeyByApp{handler: handler}
	self176.processorMap["cancelUser"] = &userInfoServiceProcessorCancelUser{handler: handler}
	return self176
}

func (p *UserInfoServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x177 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x177.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x177

}

type userInfoServiceProcessorUpgradeAccount struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorUpgradeAccount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceUpgradeAccountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("upgradeAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceUpgradeAccountResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.UpgradeAccount(args.UserID, args.IsForce); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing upgradeAccount: "+err2.Error())
		oprot.WriteMessageBegin("upgradeAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("upgradeAccount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetUserByThirdPartyAccount struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetUserByThirdPartyAccount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetUserByThirdPartyAccountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserByThirdPartyAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetUserByThirdPartyAccountResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetUserByThirdPartyAccount(args.Type, args.SourceID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserByThirdPartyAccount: "+err2.Error())
		oprot.WriteMessageBegin("getUserByThirdPartyAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUserByThirdPartyAccount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorThirdPartyAccountRegister struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorThirdPartyAccountRegister) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceThirdPartyAccountRegisterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("thirdPartyAccountRegister", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceThirdPartyAccountRegisterResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ThirdPartyAccountRegister(args.Type, args.SourceID, args.Info, args.CommonParams); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing thirdPartyAccountRegister: "+err2.Error())
		oprot.WriteMessageBegin("thirdPartyAccountRegister", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("thirdPartyAccountRegister", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorThirdPartyAccountLogin struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorThirdPartyAccountLogin) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceThirdPartyAccountLoginArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("thirdPartyAccountLogin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceThirdPartyAccountLoginResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ThirdPartyAccountLogin(args.Type, args.SourceId, args.Info, args.CommonParams); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing thirdPartyAccountLogin: "+err2.Error())
		oprot.WriteMessageBegin("thirdPartyAccountLogin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("thirdPartyAccountLogin", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorMobileRegister struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorMobileRegister) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceMobileRegisterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mobileRegister", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceMobileRegisterResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.MobileRegister(args.OldUserID, args.Number, args.Password, args.CommonParams); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mobileRegister: "+err2.Error())
		oprot.WriteMessageBegin("mobileRegister", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("mobileRegister", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorThirdPartyAccountBind struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorThirdPartyAccountBind) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceThirdPartyAccountBindArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("thirdPartyAccountBind", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceThirdPartyAccountBindResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ThirdPartyAccountBind(args.UserID, args.Type, args.SourceID, args.Info); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing thirdPartyAccountBind: "+err2.Error())
		oprot.WriteMessageBegin("thirdPartyAccountBind", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("thirdPartyAccountBind", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorThirdPartyAccountUnbind struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorThirdPartyAccountUnbind) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceThirdPartyAccountUnbindArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("thirdPartyAccountUnbind", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceThirdPartyAccountUnbindResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ThirdPartyAccountUnbind(args.UserID, args.Type, args.SourceID, args.PwEnabled); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing thirdPartyAccountUnbind: "+err2.Error())
		oprot.WriteMessageBegin("thirdPartyAccountUnbind", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("thirdPartyAccountUnbind", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorThirdPartyAccountUnbindAndUpdateToken struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorThirdPartyAccountUnbindAndUpdateToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("thirdPartyAccountUnbindAndUpdateToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ThirdPartyAccountUnbindAndUpdateToken(args.UserID, args.Type, args.SourceID, args.PwEnabled); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing thirdPartyAccountUnbindAndUpdateToken: "+err2.Error())
		oprot.WriteMessageBegin("thirdPartyAccountUnbindAndUpdateToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("thirdPartyAccountUnbindAndUpdateToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetThirdPartyAccountInfo struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetThirdPartyAccountInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetThirdPartyAccountInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getThirdPartyAccountInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetThirdPartyAccountInfoResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetThirdPartyAccountInfo(args.UserID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getThirdPartyAccountInfo: "+err2.Error())
		oprot.WriteMessageBegin("getThirdPartyAccountInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getThirdPartyAccountInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetThirdPartyAccountBindStatus struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetThirdPartyAccountBindStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetThirdPartyAccountBindStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getThirdPartyAccountBindStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetThirdPartyAccountBindStatusResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetThirdPartyAccountBindStatus(args.UserID, args.Type); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getThirdPartyAccountBindStatus: "+err2.Error())
		oprot.WriteMessageBegin("getThirdPartyAccountBindStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getThirdPartyAccountBindStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetThirdPartyAccountDetail struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetThirdPartyAccountDetail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetThirdPartyAccountDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getThirdPartyAccountDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetThirdPartyAccountDetailResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetThirdPartyAccountDetail(args.UserID, args.Type); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getThirdPartyAccountDetail: "+err2.Error())
		oprot.WriteMessageBegin("getThirdPartyAccountDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getThirdPartyAccountDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorBatchCreateTestUser struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorBatchCreateTestUser) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceBatchCreateTestUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("batchCreateTestUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceBatchCreateTestUserResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.BatchCreateTestUser(args.Number); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing batchCreateTestUser: "+err2.Error())
		oprot.WriteMessageBegin("batchCreateTestUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("batchCreateTestUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetUserInfoByMobile struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetUserInfoByMobile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetUserInfoByMobileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserInfoByMobile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetUserInfoByMobileResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetUserInfoByMobile(args.Mobile); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserInfoByMobile: "+err2.Error())
		oprot.WriteMessageBegin("getUserInfoByMobile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUserInfoByMobile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorChangePassword struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorChangePassword) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceChangePasswordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("changePassword", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceChangePasswordResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ChangePassword(args.ID, args.OldPassword, args.NewPassword_); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changePassword: "+err2.Error())
		oprot.WriteMessageBegin("changePassword", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("changePassword", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorChangeMobile struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorChangeMobile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceChangeMobileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("changeMobile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceChangeMobileResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ChangeMobile(args.OldUserID, args.CurrentUserID, args.Mobile); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changeMobile: "+err2.Error())
		oprot.WriteMessageBegin("changeMobile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("changeMobile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorUnbindMobile struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorUnbindMobile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceUnbindMobileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unbindMobile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceUnbindMobileResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.UnbindMobile(args.UserId, args.Mobile); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unbindMobile: "+err2.Error())
		oprot.WriteMessageBegin("unbindMobile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("unbindMobile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorUpdateInfo struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorUpdateInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceUpdateInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceUpdateInfoResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.UpdateInfo(args.ID, args.Info); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateInfo: "+err2.Error())
		oprot.WriteMessageBegin("updateInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorUpdateNumber struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorUpdateNumber) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceUpdateNumberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateNumber", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceUpdateNumberResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.UpdateNumber(args.ID, args.Number); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateNumber: "+err2.Error())
		oprot.WriteMessageBegin("updateNumber", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateNumber", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorSetNumberEdit struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorSetNumberEdit) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceSetNumberEditArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setNumberEdit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceSetNumberEditResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.SetNumberEdit(args.ID, args.NumberEdit); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setNumberEdit: "+err2.Error())
		oprot.WriteMessageBegin("setNumberEdit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("setNumberEdit", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorSetPassword struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorSetPassword) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceSetPasswordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setPassword", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceSetPasswordResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.SetPassword(args.ID, args.Password); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setPassword: "+err2.Error())
		oprot.WriteMessageBegin("setPassword", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("setPassword", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetUserInfoById struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetUserInfoById) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetUserInfoByIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserInfoById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetUserInfoByIdResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetUserInfoById(args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserInfoById: "+err2.Error())
		oprot.WriteMessageBegin("getUserInfoById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUserInfoById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetUserInfoByPrivateKey struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetUserInfoByPrivateKey) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetUserInfoByPrivateKeyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserInfoByPrivateKey", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetUserInfoByPrivateKeyResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetUserInfoByPrivateKey(args.PrivateKey); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserInfoByPrivateKey: "+err2.Error())
		oprot.WriteMessageBegin("getUserInfoByPrivateKey", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUserInfoByPrivateKey", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetUserInfoByNumber struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetUserInfoByNumber) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetUserInfoByNumberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserInfoByNumber", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetUserInfoByNumberResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetUserInfoByNumber(args.Number); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserInfoByNumber: "+err2.Error())
		oprot.WriteMessageBegin("getUserInfoByNumber", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUserInfoByNumber", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetUserIdByNumber struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetUserIdByNumber) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetUserIdByNumberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserIdByNumber", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetUserIdByNumberResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.GetUserIdByNumber(args.Number); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserIdByNumber: "+err2.Error())
		oprot.WriteMessageBegin("getUserIdByNumber", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUserIdByNumber", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetUserIdByPrivateKey struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetUserIdByPrivateKey) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetUserIdByPrivateKeyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserIdByPrivateKey", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetUserIdByPrivateKeyResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.GetUserIdByPrivateKey(args.PrivateKey); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserIdByPrivateKey: "+err2.Error())
		oprot.WriteMessageBegin("getUserIdByPrivateKey", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUserIdByPrivateKey", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetPrivateKeyById struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetPrivateKeyById) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetPrivateKeyByIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getPrivateKeyById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetPrivateKeyByIdResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetPrivateKeyById(args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPrivateKeyById: "+err2.Error())
		oprot.WriteMessageBegin("getPrivateKeyById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getPrivateKeyById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorUpdate struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorUpdate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceUpdateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("update", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceUpdateResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.Update(args.ID, args.Info); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update: "+err2.Error())
		oprot.WriteMessageBegin("update", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("update", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetUserInfosBySourceIds struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetUserInfosBySourceIds) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetUserInfosBySourceIdsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserInfosBySourceIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetUserInfosBySourceIdsResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetUserInfosBySourceIds(args.Type, args.SourceIds); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserInfosBySourceIds: "+err2.Error())
		oprot.WriteMessageBegin("getUserInfosBySourceIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUserInfosBySourceIds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetTaskStatusById struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetTaskStatusById) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetTaskStatusByIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTaskStatusById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetTaskStatusByIdResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetTaskStatusById(args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTaskStatusById: "+err2.Error())
		oprot.WriteMessageBegin("getTaskStatusById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getTaskStatusById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorCheckNumber struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorCheckNumber) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceCheckNumberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("checkNumber", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceCheckNumberResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.CheckNumber(args.ID, args.Number); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkNumber: "+err2.Error())
		oprot.WriteMessageBegin("checkNumber", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("checkNumber", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorCheckNumberPermission struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorCheckNumberPermission) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceCheckNumberPermissionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("checkNumberPermission", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceCheckNumberPermissionResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.CheckNumberPermission(args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkNumberPermission: "+err2.Error())
		oprot.WriteMessageBegin("checkNumberPermission", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("checkNumberPermission", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorAuthPasswordLogin struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorAuthPasswordLogin) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceAuthPasswordLoginArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("authPasswordLogin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceAuthPasswordLoginResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.AuthPasswordLogin(args.Type, args.UserName, args.Password, args.CommonParams); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing authPasswordLogin: "+err2.Error())
		oprot.WriteMessageBegin("authPasswordLogin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("authPasswordLogin", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorClearTaskStatus struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorClearTaskStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceClearTaskStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("clearTaskStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceClearTaskStatusResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ClearTaskStatus(args.Ids); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clearTaskStatus: "+err2.Error())
		oprot.WriteMessageBegin("clearTaskStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("clearTaskStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorBitTaskStatus struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorBitTaskStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceBitTaskStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bitTaskStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceBitTaskStatusResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.BitTaskStatus(args.ID, args.Operator, args.Operand); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bitTaskStatus: "+err2.Error())
		oprot.WriteMessageBegin("bitTaskStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("bitTaskStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorResetPassword struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorResetPassword) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceResetPasswordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("resetPassword", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceResetPasswordResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ResetPassword(args.ID, args.NewPassword_); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing resetPassword: "+err2.Error())
		oprot.WriteMessageBegin("resetPassword", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("resetPassword", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetUserAction struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetUserAction) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetUserActionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserAction", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetUserActionResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetUserAction(args.UserId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserAction: "+err2.Error())
		oprot.WriteMessageBegin("getUserAction", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUserAction", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetUserInterest struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetUserInterest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetUserInterestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserInterest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetUserInterestResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetUserInterest(args.UserId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserInterest: "+err2.Error())
		oprot.WriteMessageBegin("getUserInterest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUserInterest", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetUserInterest2 struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetUserInterest2) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetUserInterest2Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserInterest2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetUserInterest2Result{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetUserInterest2(args.UserId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserInterest2: "+err2.Error())
		oprot.WriteMessageBegin("getUserInterest2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUserInterest2", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetUserInfoListByIds struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetUserInfoListByIds) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetUserInfoListByIdsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserInfoListByIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetUserInfoListByIdsResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetUserInfoListByIds(args.Ids); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserInfoListByIds: "+err2.Error())
		oprot.WriteMessageBegin("getUserInfoListByIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUserInfoListByIds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetUserInfoByImId struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetUserInfoByImId) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetUserInfoByImIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserInfoByImId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetUserInfoByImIdResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetUserInfoByImId(args.ImId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserInfoByImId: "+err2.Error())
		oprot.WriteMessageBegin("getUserInfoByImId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUserInfoByImId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetSuspectedTPAccount struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetSuspectedTPAccount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetSuspectedTPAccountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSuspectedTPAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetSuspectedTPAccountResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetSuspectedTPAccount(args.BeginTime, args.EndTime, args.SourceId, args.Status, args.Cursor, args.Limit); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSuspectedTPAccount: "+err2.Error())
		oprot.WriteMessageBegin("getSuspectedTPAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getSuspectedTPAccount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorDisableSuspectedTPAccount struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorDisableSuspectedTPAccount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceDisableSuspectedTPAccountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("disableSuspectedTPAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceDisableSuspectedTPAccountResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.DisableSuspectedTPAccount(args.SourceId, args.Type); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing disableSuspectedTPAccount: "+err2.Error())
		oprot.WriteMessageBegin("disableSuspectedTPAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("disableSuspectedTPAccount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorEnableSuspectedTPAccount struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorEnableSuspectedTPAccount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceEnableSuspectedTPAccountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("enableSuspectedTPAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceEnableSuspectedTPAccountResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.EnableSuspectedTPAccount(args.SourceId, args.Type); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing enableSuspectedTPAccount: "+err2.Error())
		oprot.WriteMessageBegin("enableSuspectedTPAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("enableSuspectedTPAccount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetCreatedAccounts struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetCreatedAccounts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetCreatedAccountsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCreatedAccounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetCreatedAccountsResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetCreatedAccounts(args.SourceId, args.Type); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCreatedAccounts: "+err2.Error())
		oprot.WriteMessageBegin("getCreatedAccounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getCreatedAccounts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetWhitelistTPAccounts struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetWhitelistTPAccounts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetWhitelistTPAccountsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getWhitelistTPAccounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetWhitelistTPAccountsResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetWhitelistTPAccounts(args.BeginTime, args.EndTime, args.Status, args.Cursor, args.Limit); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getWhitelistTPAccounts: "+err2.Error())
		oprot.WriteMessageBegin("getWhitelistTPAccounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getWhitelistTPAccounts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorAddWhitelistTPAccountByNumber struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorAddWhitelistTPAccountByNumber) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceAddWhitelistTPAccountByNumberArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addWhitelistTPAccountByNumber", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceAddWhitelistTPAccountByNumberResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.AddWhitelistTPAccountByNumber(args.Number); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addWhitelistTPAccountByNumber: "+err2.Error())
		oprot.WriteMessageBegin("addWhitelistTPAccountByNumber", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addWhitelistTPAccountByNumber", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorAddWhitelistTPAccountBySourceId struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorAddWhitelistTPAccountBySourceId) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceAddWhitelistTPAccountBySourceIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addWhitelistTPAccountBySourceId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceAddWhitelistTPAccountBySourceIdResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.AddWhitelistTPAccountBySourceId(args.SourceId, args.Type); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addWhitelistTPAccountBySourceId: "+err2.Error())
		oprot.WriteMessageBegin("addWhitelistTPAccountBySourceId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addWhitelistTPAccountBySourceId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorDisableWhitelistTPAccount struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorDisableWhitelistTPAccount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceDisableWhitelistTPAccountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("disableWhitelistTPAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceDisableWhitelistTPAccountResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.DisableWhitelistTPAccount(args.SourceId, args.Type); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing disableWhitelistTPAccount: "+err2.Error())
		oprot.WriteMessageBegin("disableWhitelistTPAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("disableWhitelistTPAccount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorEnableWhitelistTPAccount struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorEnableWhitelistTPAccount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceEnableWhitelistTPAccountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("enableWhitelistTPAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceEnableWhitelistTPAccountResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.EnableWhitelistTPAccount(args.SourceId, args.Type); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing enableWhitelistTPAccount: "+err2.Error())
		oprot.WriteMessageBegin("enableWhitelistTPAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("enableWhitelistTPAccount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorCountSuspectedTPAccount struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorCountSuspectedTPAccount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceCountSuspectedTPAccountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("countSuspectedTPAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceCountSuspectedTPAccountResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.CountSuspectedTPAccount(args.BeginTime, args.EndTime, args.Status); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing countSuspectedTPAccount: "+err2.Error())
		oprot.WriteMessageBegin("countSuspectedTPAccount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("countSuspectedTPAccount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorCountWhitelistTPAccounts struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorCountWhitelistTPAccounts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceCountWhitelistTPAccountsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("countWhitelistTPAccounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceCountWhitelistTPAccountsResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.CountWhitelistTPAccounts(args.BeginTime, args.EndTime, args.Status); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing countWhitelistTPAccounts: "+err2.Error())
		oprot.WriteMessageBegin("countWhitelistTPAccounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("countWhitelistTPAccounts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorCountCreatedAccounts struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorCountCreatedAccounts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceCountCreatedAccountsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("countCreatedAccounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceCountCreatedAccountsResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.CountCreatedAccounts(args.SourceId, args.Type); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing countCreatedAccounts: "+err2.Error())
		oprot.WriteMessageBegin("countCreatedAccounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("countCreatedAccounts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorUpdateToken struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorUpdateToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceUpdateTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceUpdateTokenResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.UpdateToken(args.UserId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateToken: "+err2.Error())
		oprot.WriteMessageBegin("updateToken", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateToken", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetIsDownloadIn struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetIsDownloadIn) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetIsDownloadInArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getIsDownloadIn", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetIsDownloadInResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetIsDownloadIn(args.UserId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getIsDownloadIn: "+err2.Error())
		oprot.WriteMessageBegin("getIsDownloadIn", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getIsDownloadIn", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorThirdPartyAccountRegisterH5 struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorThirdPartyAccountRegisterH5) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceThirdPartyAccountRegisterH5Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("thirdPartyAccountRegisterH5", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceThirdPartyAccountRegisterH5Result{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ThirdPartyAccountRegisterH5(args.Type, args.SourceID, args.Info); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing thirdPartyAccountRegisterH5: "+err2.Error())
		oprot.WriteMessageBegin("thirdPartyAccountRegisterH5", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("thirdPartyAccountRegisterH5", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorThirdPartyAccountLoginH5 struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorThirdPartyAccountLoginH5) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceThirdPartyAccountLoginH5Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("thirdPartyAccountLoginH5", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceThirdPartyAccountLoginH5Result{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ThirdPartyAccountLoginH5(args.Type, args.SourceId, args.Info); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing thirdPartyAccountLoginH5: "+err2.Error())
		oprot.WriteMessageBegin("thirdPartyAccountLoginH5", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("thirdPartyAccountLoginH5", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorThirdPartyAccountLoginAndRegisterBananaChat struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorThirdPartyAccountLoginAndRegisterBananaChat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("thirdPartyAccountLoginAndRegisterBananaChat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ThirdPartyAccountLoginAndRegisterBananaChat(args.Type, args.SourceId, args.Info); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing thirdPartyAccountLoginAndRegisterBananaChat: "+err2.Error())
		oprot.WriteMessageBegin("thirdPartyAccountLoginAndRegisterBananaChat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("thirdPartyAccountLoginAndRegisterBananaChat", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorThirdPartyAccountLoginAndRegisterByApp struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorThirdPartyAccountLoginAndRegisterByApp) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("thirdPartyAccountLoginAndRegisterByApp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceThirdPartyAccountLoginAndRegisterByAppResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ThirdPartyAccountLoginAndRegisterByApp(args.Type, args.SourceId, args.Info, args.AppCode); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing thirdPartyAccountLoginAndRegisterByApp: "+err2.Error())
		oprot.WriteMessageBegin("thirdPartyAccountLoginAndRegisterByApp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("thirdPartyAccountLoginAndRegisterByApp", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorMobileRegisterH5 struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorMobileRegisterH5) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceMobileRegisterH5Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mobileRegisterH5", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceMobileRegisterH5Result{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.MobileRegisterH5(args.OldUserID, args.Number, args.Password); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mobileRegisterH5: "+err2.Error())
		oprot.WriteMessageBegin("mobileRegisterH5", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("mobileRegisterH5", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorMobileRegisterBananaChat struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorMobileRegisterBananaChat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceMobileRegisterBananaChatArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mobileRegisterBananaChat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceMobileRegisterBananaChatResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.MobileRegisterBananaChat(args.Number, args.Password); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mobileRegisterBananaChat: "+err2.Error())
		oprot.WriteMessageBegin("mobileRegisterBananaChat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("mobileRegisterBananaChat", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorMobileRegisterByApp struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorMobileRegisterByApp) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceMobileRegisterByAppArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mobileRegisterByApp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceMobileRegisterByAppResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.MobileRegisterByApp(args.Number, args.Password, args.AppCode); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mobileRegisterByApp: "+err2.Error())
		oprot.WriteMessageBegin("mobileRegisterByApp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("mobileRegisterByApp", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorAuthPasswordLoginH5 struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorAuthPasswordLoginH5) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceAuthPasswordLoginH5Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("authPasswordLoginH5", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceAuthPasswordLoginH5Result{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.AuthPasswordLoginH5(args.Type, args.UserName, args.Password); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing authPasswordLoginH5: "+err2.Error())
		oprot.WriteMessageBegin("authPasswordLoginH5", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("authPasswordLoginH5", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorAuthPasswordLoginBananaChat struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorAuthPasswordLoginBananaChat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceAuthPasswordLoginBananaChatArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("authPasswordLoginBananaChat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceAuthPasswordLoginBananaChatResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.AuthPasswordLoginBananaChat(args.Type, args.UserName, args.Password); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing authPasswordLoginBananaChat: "+err2.Error())
		oprot.WriteMessageBegin("authPasswordLoginBananaChat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("authPasswordLoginBananaChat", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorAuthPasswordLoginByApp struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorAuthPasswordLoginByApp) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceAuthPasswordLoginByAppArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("authPasswordLoginByApp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceAuthPasswordLoginByAppResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.AuthPasswordLoginByApp(args.Type, args.UserName, args.Password, args.AppCode); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing authPasswordLoginByApp: "+err2.Error())
		oprot.WriteMessageBegin("authPasswordLoginByApp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("authPasswordLoginByApp", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorAuthPasswordLoginOpenPlatform struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorAuthPasswordLoginOpenPlatform) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceAuthPasswordLoginOpenPlatformArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("authPasswordLoginOpenPlatform", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceAuthPasswordLoginOpenPlatformResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.AuthPasswordLoginOpenPlatform(args.Type, args.UserName, args.Password); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing authPasswordLoginOpenPlatform: "+err2.Error())
		oprot.WriteMessageBegin("authPasswordLoginOpenPlatform", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("authPasswordLoginOpenPlatform", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorUpdateProfileInfo struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorUpdateProfileInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceUpdateProfileInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateProfileInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceUpdateProfileInfoResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.UpdateProfileInfo(args.UserId, args.Info, args.JsonProfileInfo); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateProfileInfo: "+err2.Error())
		oprot.WriteMessageBegin("updateProfileInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateProfileInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetUserProfileInfoById struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetUserProfileInfoById) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetUserProfileInfoByIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserProfileInfoById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetUserProfileInfoByIdResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetUserProfileInfoById(args.UserId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserProfileInfoById: "+err2.Error())
		oprot.WriteMessageBegin("getUserProfileInfoById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUserProfileInfoById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetSchoolDictionary struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetSchoolDictionary) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetSchoolDictionaryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSchoolDictionary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetSchoolDictionaryResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetSchoolDictionary(args.Type, args.Province, args.City, args.Name, args.Offset, args.Limit); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSchoolDictionary: "+err2.Error())
		oprot.WriteMessageBegin("getSchoolDictionary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getSchoolDictionary", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetLoginTagRecUser struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetLoginTagRecUser) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetLoginTagRecUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getLoginTagRecUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetLoginTagRecUserResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetLoginTagRecUser(args.UserId, args.Gender, args.Tags, args.Rate, args.Limit); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLoginTagRecUser: "+err2.Error())
		oprot.WriteMessageBegin("getLoginTagRecUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getLoginTagRecUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetUserInfoListByIdsNew struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetUserInfoListByIdsNew) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetUserInfoListByIdsNewArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserInfoListByIdsNew", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetUserInfoListByIdsNewResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetUserInfoListByIdsNew(args.Ids); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserInfoListByIdsNew: "+err2.Error())
		oprot.WriteMessageBegin("getUserInfoListByIdsNew", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUserInfoListByIdsNew", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorPing struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorPing) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServicePingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServicePingResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.Ping(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping: "+err2.Error())
		oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorAddUserAddressInfo struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorAddUserAddressInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceAddUserAddressInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addUserAddressInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceAddUserAddressInfoResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.AddUserAddressInfo(args.UserId, args.AddressInfo); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addUserAddressInfo: "+err2.Error())
		oprot.WriteMessageBegin("addUserAddressInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addUserAddressInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorDeleteUserAddressInfo struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorDeleteUserAddressInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceDeleteUserAddressInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteUserAddressInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceDeleteUserAddressInfoResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.DeleteUserAddressInfo(args.UserId, args.AddressInfoId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteUserAddressInfo: "+err2.Error())
		oprot.WriteMessageBegin("deleteUserAddressInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("deleteUserAddressInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorEditUserAddressInfo struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorEditUserAddressInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceEditUserAddressInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("editUserAddressInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceEditUserAddressInfoResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.EditUserAddressInfo(args.UserId, args.AddressInfo); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing editUserAddressInfo: "+err2.Error())
		oprot.WriteMessageBegin("editUserAddressInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("editUserAddressInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetUserAddressInfo struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetUserAddressInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetUserAddressInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserAddressInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetUserAddressInfoResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetUserAddressInfo(args.UserId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserAddressInfo: "+err2.Error())
		oprot.WriteMessageBegin("getUserAddressInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUserAddressInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorAddUserWeixin struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorAddUserWeixin) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceAddUserWeixinArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addUserWeixin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceAddUserWeixinResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.AddUserWeixin(args.SourceId, args.Info); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addUserWeixin: "+err2.Error())
		oprot.WriteMessageBegin("addUserWeixin", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addUserWeixin", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetUserWatchInfo struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetUserWatchInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetUserWatchInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserWatchInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetUserWatchInfoResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetUserWatchInfo(args.ActionUid, args.UserId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserWatchInfo: "+err2.Error())
		oprot.WriteMessageBegin("getUserWatchInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUserWatchInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorIsTalent struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorIsTalent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceIsTalentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("isTalent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceIsTalentResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.IsTalent(args.UserId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isTalent: "+err2.Error())
		oprot.WriteMessageBegin("isTalent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("isTalent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorIsTalents struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorIsTalents) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceIsTalentsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("isTalents", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceIsTalentsResult{}
	var retval map[int64]bool
	var err2 error
	if retval, err2 = p.handler.IsTalents(args.UserIds); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isTalents: "+err2.Error())
		oprot.WriteMessageBegin("isTalents", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("isTalents", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorQueryMyBlackList struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorQueryMyBlackList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceQueryMyBlackListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryMyBlackList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceQueryMyBlackListResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.QueryMyBlackList(args.UserId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryMyBlackList: "+err2.Error())
		oprot.WriteMessageBegin("queryMyBlackList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("queryMyBlackList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorQueryBlackMeList struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorQueryBlackMeList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceQueryBlackMeListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryBlackMeList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceQueryBlackMeListResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.QueryBlackMeList(args.UserId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryBlackMeList: "+err2.Error())
		oprot.WriteMessageBegin("queryBlackMeList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("queryBlackMeList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorQueryUserStatus struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorQueryUserStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceQueryUserStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryUserStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceQueryUserStatusResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.QueryUserStatus(args.UserId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryUserStatus: "+err2.Error())
		oprot.WriteMessageBegin("queryUserStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("queryUserStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorUpdateUserStatus struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorUpdateUserStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceUpdateUserStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateUserStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceUpdateUserStatusResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.UpdateUserStatus(args.UserId, args.UserStatusMap); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateUserStatus: "+err2.Error())
		oprot.WriteMessageBegin("updateUserStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateUserStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorQueryUserRegister struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorQueryUserRegister) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceQueryUserRegisterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryUserRegister", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceQueryUserRegisterResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.QueryUserRegister(args.Score, args.Limit); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryUserRegister: "+err2.Error())
		oprot.WriteMessageBegin("queryUserRegister", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("queryUserRegister", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorQueryUserMedal struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorQueryUserMedal) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceQueryUserMedalArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryUserMedal", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceQueryUserMedalResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.QueryUserMedal(args.UserId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryUserMedal: "+err2.Error())
		oprot.WriteMessageBegin("queryUserMedal", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("queryUserMedal", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetUserTokenByApp struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetUserTokenByApp) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetUserTokenByAppArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserTokenByApp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetUserTokenByAppResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetUserTokenByApp(args.UserId, args.AppCode); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserTokenByApp: "+err2.Error())
		oprot.WriteMessageBegin("getUserTokenByApp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUserTokenByApp", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorGetUserInfoByPrivateKeyByApp struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorGetUserInfoByPrivateKeyByApp) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceGetUserInfoByPrivateKeyByAppArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserInfoByPrivateKeyByApp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceGetUserInfoByPrivateKeyByAppResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetUserInfoByPrivateKeyByApp(args.PrivateKey, args.AppCode); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserInfoByPrivateKeyByApp: "+err2.Error())
		oprot.WriteMessageBegin("getUserInfoByPrivateKeyByApp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUserInfoByPrivateKeyByApp", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userInfoServiceProcessorCancelUser struct {
	handler UserInfoService
}

func (p *userInfoServiceProcessorCancelUser) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserInfoServiceCancelUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("cancelUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserInfoServiceCancelUserResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.CancelUser(args.UserId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancelUser: "+err2.Error())
		oprot.WriteMessageBegin("cancelUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("cancelUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - UserID
//  - IsForce
type UserInfoServiceUpgradeAccountArgs struct {
	UserID  int64 `thrift:"user_id,1" db:"user_id" json:"user_id"`
	IsForce bool  `thrift:"is_force,2" db:"is_force" json:"is_force"`
}

func NewUserInfoServiceUpgradeAccountArgs() *UserInfoServiceUpgradeAccountArgs {
	return &UserInfoServiceUpgradeAccountArgs{}
}

func (p *UserInfoServiceUpgradeAccountArgs) GetUserID() int64 {
	return p.UserID
}

func (p *UserInfoServiceUpgradeAccountArgs) GetIsForce() bool {
	return p.IsForce
}
func (p *UserInfoServiceUpgradeAccountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceUpgradeAccountArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserInfoServiceUpgradeAccountArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IsForce = v
	}
	return nil
}

func (p *UserInfoServiceUpgradeAccountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("upgradeAccount_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceUpgradeAccountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceUpgradeAccountArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_force", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:is_force: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsForce)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_force (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:is_force: ", p), err)
	}
	return err
}

func (p *UserInfoServiceUpgradeAccountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceUpgradeAccountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceUpgradeAccountResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceUpgradeAccountResult() *UserInfoServiceUpgradeAccountResult {
	return &UserInfoServiceUpgradeAccountResult{}
}

var UserInfoServiceUpgradeAccountResult_Success_DEFAULT string

func (p *UserInfoServiceUpgradeAccountResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceUpgradeAccountResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceUpgradeAccountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceUpgradeAccountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceUpgradeAccountResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceUpgradeAccountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("upgradeAccount_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceUpgradeAccountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceUpgradeAccountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceUpgradeAccountResult(%+v)", *p)
}

// Attributes:
//  - Type
//  - SourceID
type UserInfoServiceGetUserByThirdPartyAccountArgs struct {
	Type     int32  `thrift:"type,1" db:"type" json:"type"`
	SourceID string `thrift:"source_id,2" db:"source_id" json:"source_id"`
}

func NewUserInfoServiceGetUserByThirdPartyAccountArgs() *UserInfoServiceGetUserByThirdPartyAccountArgs {
	return &UserInfoServiceGetUserByThirdPartyAccountArgs{}
}

func (p *UserInfoServiceGetUserByThirdPartyAccountArgs) GetType() int32 {
	return p.Type
}

func (p *UserInfoServiceGetUserByThirdPartyAccountArgs) GetSourceID() string {
	return p.SourceID
}
func (p *UserInfoServiceGetUserByThirdPartyAccountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserByThirdPartyAccountArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceGetUserByThirdPartyAccountArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SourceID = v
	}
	return nil
}

func (p *UserInfoServiceGetUserByThirdPartyAccountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserByThirdPartyAccount_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserByThirdPartyAccountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserByThirdPartyAccountArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source_id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:source_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.SourceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.source_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:source_id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserByThirdPartyAccountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserByThirdPartyAccountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetUserByThirdPartyAccountResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetUserByThirdPartyAccountResult() *UserInfoServiceGetUserByThirdPartyAccountResult {
	return &UserInfoServiceGetUserByThirdPartyAccountResult{}
}

var UserInfoServiceGetUserByThirdPartyAccountResult_Success_DEFAULT string

func (p *UserInfoServiceGetUserByThirdPartyAccountResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetUserByThirdPartyAccountResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetUserByThirdPartyAccountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetUserByThirdPartyAccountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserByThirdPartyAccountResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetUserByThirdPartyAccountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserByThirdPartyAccount_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserByThirdPartyAccountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetUserByThirdPartyAccountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserByThirdPartyAccountResult(%+v)", *p)
}

// Attributes:
//  - Type
//  - SourceID
//  - Info
//  - CommonParams
type UserInfoServiceThirdPartyAccountRegisterArgs struct {
	Type         int32  `thrift:"type,1" db:"type" json:"type"`
	SourceID     string `thrift:"source_id,2" db:"source_id" json:"source_id"`
	Info         string `thrift:"info,3" db:"info" json:"info"`
	CommonParams string `thrift:"commonParams,4" db:"commonParams" json:"commonParams"`
}

func NewUserInfoServiceThirdPartyAccountRegisterArgs() *UserInfoServiceThirdPartyAccountRegisterArgs {
	return &UserInfoServiceThirdPartyAccountRegisterArgs{}
}

func (p *UserInfoServiceThirdPartyAccountRegisterArgs) GetType() int32 {
	return p.Type
}

func (p *UserInfoServiceThirdPartyAccountRegisterArgs) GetSourceID() string {
	return p.SourceID
}

func (p *UserInfoServiceThirdPartyAccountRegisterArgs) GetInfo() string {
	return p.Info
}

func (p *UserInfoServiceThirdPartyAccountRegisterArgs) GetCommonParams() string {
	return p.CommonParams
}
func (p *UserInfoServiceThirdPartyAccountRegisterArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountRegisterArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountRegisterArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SourceID = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountRegisterArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Info = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountRegisterArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.CommonParams = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountRegisterArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("thirdPartyAccountRegister_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountRegisterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountRegisterArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source_id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:source_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.SourceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.source_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:source_id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountRegisterArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("info", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:info: ", p), err)
	}
	if err := oprot.WriteString(string(p.Info)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.info (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:info: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountRegisterArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("commonParams", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:commonParams: ", p), err)
	}
	if err := oprot.WriteString(string(p.CommonParams)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.commonParams (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:commonParams: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountRegisterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceThirdPartyAccountRegisterArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceThirdPartyAccountRegisterResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceThirdPartyAccountRegisterResult() *UserInfoServiceThirdPartyAccountRegisterResult {
	return &UserInfoServiceThirdPartyAccountRegisterResult{}
}

var UserInfoServiceThirdPartyAccountRegisterResult_Success_DEFAULT string

func (p *UserInfoServiceThirdPartyAccountRegisterResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceThirdPartyAccountRegisterResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceThirdPartyAccountRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceThirdPartyAccountRegisterResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountRegisterResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountRegisterResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("thirdPartyAccountRegister_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountRegisterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountRegisterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceThirdPartyAccountRegisterResult(%+v)", *p)
}

// Attributes:
//  - Type
//  - SourceId
//  - Info
//  - CommonParams
type UserInfoServiceThirdPartyAccountLoginArgs struct {
	Type         int32  `thrift:"type,1" db:"type" json:"type"`
	SourceId     string `thrift:"sourceId,2" db:"sourceId" json:"sourceId"`
	Info         string `thrift:"info,3" db:"info" json:"info"`
	CommonParams string `thrift:"commonParams,4" db:"commonParams" json:"commonParams"`
}

func NewUserInfoServiceThirdPartyAccountLoginArgs() *UserInfoServiceThirdPartyAccountLoginArgs {
	return &UserInfoServiceThirdPartyAccountLoginArgs{}
}

func (p *UserInfoServiceThirdPartyAccountLoginArgs) GetType() int32 {
	return p.Type
}

func (p *UserInfoServiceThirdPartyAccountLoginArgs) GetSourceId() string {
	return p.SourceId
}

func (p *UserInfoServiceThirdPartyAccountLoginArgs) GetInfo() string {
	return p.Info
}

func (p *UserInfoServiceThirdPartyAccountLoginArgs) GetCommonParams() string {
	return p.CommonParams
}
func (p *UserInfoServiceThirdPartyAccountLoginArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SourceId = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Info = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.CommonParams = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("thirdPartyAccountLogin_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountLoginArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sourceId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SourceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sourceId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sourceId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountLoginArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("info", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:info: ", p), err)
	}
	if err := oprot.WriteString(string(p.Info)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.info (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:info: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountLoginArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("commonParams", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:commonParams: ", p), err)
	}
	if err := oprot.WriteString(string(p.CommonParams)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.commonParams (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:commonParams: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceThirdPartyAccountLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceThirdPartyAccountLoginResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceThirdPartyAccountLoginResult() *UserInfoServiceThirdPartyAccountLoginResult {
	return &UserInfoServiceThirdPartyAccountLoginResult{}
}

var UserInfoServiceThirdPartyAccountLoginResult_Success_DEFAULT string

func (p *UserInfoServiceThirdPartyAccountLoginResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceThirdPartyAccountLoginResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceThirdPartyAccountLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceThirdPartyAccountLoginResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("thirdPartyAccountLogin_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceThirdPartyAccountLoginResult(%+v)", *p)
}

// Attributes:
//  - OldUserID
//  - Number
//  - Password
//  - CommonParams
type UserInfoServiceMobileRegisterArgs struct {
	OldUserID    int64  `thrift:"old_user_id,1" db:"old_user_id" json:"old_user_id"`
	Number       string `thrift:"number,2" db:"number" json:"number"`
	Password     string `thrift:"password,3" db:"password" json:"password"`
	CommonParams string `thrift:"commonParams,4" db:"commonParams" json:"commonParams"`
}

func NewUserInfoServiceMobileRegisterArgs() *UserInfoServiceMobileRegisterArgs {
	return &UserInfoServiceMobileRegisterArgs{}
}

func (p *UserInfoServiceMobileRegisterArgs) GetOldUserID() int64 {
	return p.OldUserID
}

func (p *UserInfoServiceMobileRegisterArgs) GetNumber() string {
	return p.Number
}

func (p *UserInfoServiceMobileRegisterArgs) GetPassword() string {
	return p.Password
}

func (p *UserInfoServiceMobileRegisterArgs) GetCommonParams() string {
	return p.CommonParams
}
func (p *UserInfoServiceMobileRegisterArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OldUserID = v
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Number = v
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.CommonParams = v
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mobileRegister_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("old_user_id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:old_user_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OldUserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.old_user_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:old_user_id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceMobileRegisterArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("number", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:number: ", p), err)
	}
	if err := oprot.WriteString(string(p.Number)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.number (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:number: ", p), err)
	}
	return err
}

func (p *UserInfoServiceMobileRegisterArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err)
	}
	return err
}

func (p *UserInfoServiceMobileRegisterArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("commonParams", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:commonParams: ", p), err)
	}
	if err := oprot.WriteString(string(p.CommonParams)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.commonParams (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:commonParams: ", p), err)
	}
	return err
}

func (p *UserInfoServiceMobileRegisterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceMobileRegisterArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceMobileRegisterResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceMobileRegisterResult() *UserInfoServiceMobileRegisterResult {
	return &UserInfoServiceMobileRegisterResult{}
}

var UserInfoServiceMobileRegisterResult_Success_DEFAULT string

func (p *UserInfoServiceMobileRegisterResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceMobileRegisterResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceMobileRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceMobileRegisterResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mobileRegister_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceMobileRegisterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceMobileRegisterResult(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Type
//  - SourceID
//  - Info
type UserInfoServiceThirdPartyAccountBindArgs struct {
	UserID   int64  `thrift:"user_id,1" db:"user_id" json:"user_id"`
	Type     int32  `thrift:"type,2" db:"type" json:"type"`
	SourceID string `thrift:"source_id,3" db:"source_id" json:"source_id"`
	Info     string `thrift:"info,4" db:"info" json:"info"`
}

func NewUserInfoServiceThirdPartyAccountBindArgs() *UserInfoServiceThirdPartyAccountBindArgs {
	return &UserInfoServiceThirdPartyAccountBindArgs{}
}

func (p *UserInfoServiceThirdPartyAccountBindArgs) GetUserID() int64 {
	return p.UserID
}

func (p *UserInfoServiceThirdPartyAccountBindArgs) GetType() int32 {
	return p.Type
}

func (p *UserInfoServiceThirdPartyAccountBindArgs) GetSourceID() string {
	return p.SourceID
}

func (p *UserInfoServiceThirdPartyAccountBindArgs) GetInfo() string {
	return p.Info
}
func (p *UserInfoServiceThirdPartyAccountBindArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountBindArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountBindArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountBindArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SourceID = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountBindArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Info = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountBindArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("thirdPartyAccountBind_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountBindArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountBindArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountBindArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source_id", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:source_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.SourceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.source_id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:source_id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountBindArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("info", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:info: ", p), err)
	}
	if err := oprot.WriteString(string(p.Info)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.info (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:info: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountBindArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceThirdPartyAccountBindArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceThirdPartyAccountBindResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceThirdPartyAccountBindResult() *UserInfoServiceThirdPartyAccountBindResult {
	return &UserInfoServiceThirdPartyAccountBindResult{}
}

var UserInfoServiceThirdPartyAccountBindResult_Success_DEFAULT string

func (p *UserInfoServiceThirdPartyAccountBindResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceThirdPartyAccountBindResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceThirdPartyAccountBindResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceThirdPartyAccountBindResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountBindResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountBindResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("thirdPartyAccountBind_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountBindResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountBindResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceThirdPartyAccountBindResult(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Type
//  - SourceID
//  - PwEnabled
type UserInfoServiceThirdPartyAccountUnbindArgs struct {
	UserID    int64  `thrift:"user_id,1" db:"user_id" json:"user_id"`
	Type      int32  `thrift:"type,2" db:"type" json:"type"`
	SourceID  string `thrift:"source_id,3" db:"source_id" json:"source_id"`
	PwEnabled int32  `thrift:"pw_enabled,4" db:"pw_enabled" json:"pw_enabled"`
}

func NewUserInfoServiceThirdPartyAccountUnbindArgs() *UserInfoServiceThirdPartyAccountUnbindArgs {
	return &UserInfoServiceThirdPartyAccountUnbindArgs{}
}

func (p *UserInfoServiceThirdPartyAccountUnbindArgs) GetUserID() int64 {
	return p.UserID
}

func (p *UserInfoServiceThirdPartyAccountUnbindArgs) GetType() int32 {
	return p.Type
}

func (p *UserInfoServiceThirdPartyAccountUnbindArgs) GetSourceID() string {
	return p.SourceID
}

func (p *UserInfoServiceThirdPartyAccountUnbindArgs) GetPwEnabled() int32 {
	return p.PwEnabled
}
func (p *UserInfoServiceThirdPartyAccountUnbindArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountUnbindArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountUnbindArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountUnbindArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SourceID = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountUnbindArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PwEnabled = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountUnbindArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("thirdPartyAccountUnbind_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountUnbindArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountUnbindArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountUnbindArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source_id", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:source_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.SourceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.source_id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:source_id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountUnbindArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pw_enabled", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pw_enabled: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PwEnabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pw_enabled (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pw_enabled: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountUnbindArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceThirdPartyAccountUnbindArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceThirdPartyAccountUnbindResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceThirdPartyAccountUnbindResult() *UserInfoServiceThirdPartyAccountUnbindResult {
	return &UserInfoServiceThirdPartyAccountUnbindResult{}
}

var UserInfoServiceThirdPartyAccountUnbindResult_Success_DEFAULT string

func (p *UserInfoServiceThirdPartyAccountUnbindResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceThirdPartyAccountUnbindResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceThirdPartyAccountUnbindResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceThirdPartyAccountUnbindResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountUnbindResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountUnbindResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("thirdPartyAccountUnbind_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountUnbindResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountUnbindResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceThirdPartyAccountUnbindResult(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Type
//  - SourceID
//  - PwEnabled
type UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs struct {
	UserID    int64  `thrift:"user_id,1" db:"user_id" json:"user_id"`
	Type      int32  `thrift:"type,2" db:"type" json:"type"`
	SourceID  string `thrift:"source_id,3" db:"source_id" json:"source_id"`
	PwEnabled int32  `thrift:"pw_enabled,4" db:"pw_enabled" json:"pw_enabled"`
}

func NewUserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs() *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs {
	return &UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs{}
}

func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs) GetUserID() int64 {
	return p.UserID
}

func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs) GetType() int32 {
	return p.Type
}

func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs) GetSourceID() string {
	return p.SourceID
}

func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs) GetPwEnabled() int32 {
	return p.PwEnabled
}
func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SourceID = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PwEnabled = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("thirdPartyAccountUnbindAndUpdateToken_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source_id", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:source_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.SourceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.source_id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:source_id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pw_enabled", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pw_enabled: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PwEnabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pw_enabled (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pw_enabled: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceThirdPartyAccountUnbindAndUpdateTokenResult() *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenResult {
	return &UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenResult{}
}

var UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenResult_Success_DEFAULT string

func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("thirdPartyAccountUnbindAndUpdateToken_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceThirdPartyAccountUnbindAndUpdateTokenResult(%+v)", *p)
}

// Attributes:
//  - UserID
type UserInfoServiceGetThirdPartyAccountInfoArgs struct {
	UserID int64 `thrift:"user_id,1" db:"user_id" json:"user_id"`
}

func NewUserInfoServiceGetThirdPartyAccountInfoArgs() *UserInfoServiceGetThirdPartyAccountInfoArgs {
	return &UserInfoServiceGetThirdPartyAccountInfoArgs{}
}

func (p *UserInfoServiceGetThirdPartyAccountInfoArgs) GetUserID() int64 {
	return p.UserID
}
func (p *UserInfoServiceGetThirdPartyAccountInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetThirdPartyAccountInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserInfoServiceGetThirdPartyAccountInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getThirdPartyAccountInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetThirdPartyAccountInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetThirdPartyAccountInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetThirdPartyAccountInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetThirdPartyAccountInfoResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetThirdPartyAccountInfoResult() *UserInfoServiceGetThirdPartyAccountInfoResult {
	return &UserInfoServiceGetThirdPartyAccountInfoResult{}
}

var UserInfoServiceGetThirdPartyAccountInfoResult_Success_DEFAULT string

func (p *UserInfoServiceGetThirdPartyAccountInfoResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetThirdPartyAccountInfoResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetThirdPartyAccountInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetThirdPartyAccountInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetThirdPartyAccountInfoResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetThirdPartyAccountInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getThirdPartyAccountInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetThirdPartyAccountInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetThirdPartyAccountInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetThirdPartyAccountInfoResult(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Type
type UserInfoServiceGetThirdPartyAccountBindStatusArgs struct {
	UserID int64 `thrift:"user_id,1" db:"user_id" json:"user_id"`
	Type   int32 `thrift:"type,2" db:"type" json:"type"`
}

func NewUserInfoServiceGetThirdPartyAccountBindStatusArgs() *UserInfoServiceGetThirdPartyAccountBindStatusArgs {
	return &UserInfoServiceGetThirdPartyAccountBindStatusArgs{}
}

func (p *UserInfoServiceGetThirdPartyAccountBindStatusArgs) GetUserID() int64 {
	return p.UserID
}

func (p *UserInfoServiceGetThirdPartyAccountBindStatusArgs) GetType() int32 {
	return p.Type
}
func (p *UserInfoServiceGetThirdPartyAccountBindStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetThirdPartyAccountBindStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserInfoServiceGetThirdPartyAccountBindStatusArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceGetThirdPartyAccountBindStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getThirdPartyAccountBindStatus_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetThirdPartyAccountBindStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetThirdPartyAccountBindStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetThirdPartyAccountBindStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetThirdPartyAccountBindStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetThirdPartyAccountBindStatusResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetThirdPartyAccountBindStatusResult() *UserInfoServiceGetThirdPartyAccountBindStatusResult {
	return &UserInfoServiceGetThirdPartyAccountBindStatusResult{}
}

var UserInfoServiceGetThirdPartyAccountBindStatusResult_Success_DEFAULT string

func (p *UserInfoServiceGetThirdPartyAccountBindStatusResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetThirdPartyAccountBindStatusResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetThirdPartyAccountBindStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetThirdPartyAccountBindStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetThirdPartyAccountBindStatusResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetThirdPartyAccountBindStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getThirdPartyAccountBindStatus_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetThirdPartyAccountBindStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetThirdPartyAccountBindStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetThirdPartyAccountBindStatusResult(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Type
type UserInfoServiceGetThirdPartyAccountDetailArgs struct {
	UserID int64 `thrift:"user_id,1" db:"user_id" json:"user_id"`
	Type   int32 `thrift:"type,2" db:"type" json:"type"`
}

func NewUserInfoServiceGetThirdPartyAccountDetailArgs() *UserInfoServiceGetThirdPartyAccountDetailArgs {
	return &UserInfoServiceGetThirdPartyAccountDetailArgs{}
}

func (p *UserInfoServiceGetThirdPartyAccountDetailArgs) GetUserID() int64 {
	return p.UserID
}

func (p *UserInfoServiceGetThirdPartyAccountDetailArgs) GetType() int32 {
	return p.Type
}
func (p *UserInfoServiceGetThirdPartyAccountDetailArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetThirdPartyAccountDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserInfoServiceGetThirdPartyAccountDetailArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceGetThirdPartyAccountDetailArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getThirdPartyAccountDetail_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetThirdPartyAccountDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetThirdPartyAccountDetailArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetThirdPartyAccountDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetThirdPartyAccountDetailArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetThirdPartyAccountDetailResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetThirdPartyAccountDetailResult() *UserInfoServiceGetThirdPartyAccountDetailResult {
	return &UserInfoServiceGetThirdPartyAccountDetailResult{}
}

var UserInfoServiceGetThirdPartyAccountDetailResult_Success_DEFAULT string

func (p *UserInfoServiceGetThirdPartyAccountDetailResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetThirdPartyAccountDetailResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetThirdPartyAccountDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetThirdPartyAccountDetailResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetThirdPartyAccountDetailResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetThirdPartyAccountDetailResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getThirdPartyAccountDetail_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetThirdPartyAccountDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetThirdPartyAccountDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetThirdPartyAccountDetailResult(%+v)", *p)
}

// Attributes:
//  - Number
type UserInfoServiceBatchCreateTestUserArgs struct {
	Number int32 `thrift:"number,1" db:"number" json:"number"`
}

func NewUserInfoServiceBatchCreateTestUserArgs() *UserInfoServiceBatchCreateTestUserArgs {
	return &UserInfoServiceBatchCreateTestUserArgs{}
}

func (p *UserInfoServiceBatchCreateTestUserArgs) GetNumber() int32 {
	return p.Number
}
func (p *UserInfoServiceBatchCreateTestUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceBatchCreateTestUserArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Number = v
	}
	return nil
}

func (p *UserInfoServiceBatchCreateTestUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("batchCreateTestUser_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceBatchCreateTestUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("number", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:number: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Number)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.number (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:number: ", p), err)
	}
	return err
}

func (p *UserInfoServiceBatchCreateTestUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceBatchCreateTestUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceBatchCreateTestUserResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceBatchCreateTestUserResult() *UserInfoServiceBatchCreateTestUserResult {
	return &UserInfoServiceBatchCreateTestUserResult{}
}

var UserInfoServiceBatchCreateTestUserResult_Success_DEFAULT string

func (p *UserInfoServiceBatchCreateTestUserResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceBatchCreateTestUserResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceBatchCreateTestUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceBatchCreateTestUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceBatchCreateTestUserResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceBatchCreateTestUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("batchCreateTestUser_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceBatchCreateTestUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceBatchCreateTestUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceBatchCreateTestUserResult(%+v)", *p)
}

// Attributes:
//  - Mobile
type UserInfoServiceGetUserInfoByMobileArgs struct {
	Mobile string `thrift:"mobile,1" db:"mobile" json:"mobile"`
}

func NewUserInfoServiceGetUserInfoByMobileArgs() *UserInfoServiceGetUserInfoByMobileArgs {
	return &UserInfoServiceGetUserInfoByMobileArgs{}
}

func (p *UserInfoServiceGetUserInfoByMobileArgs) GetMobile() string {
	return p.Mobile
}
func (p *UserInfoServiceGetUserInfoByMobileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByMobileArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Mobile = v
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByMobileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInfoByMobile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByMobileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mobile: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mobile)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mobile (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mobile: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserInfoByMobileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInfoByMobileArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetUserInfoByMobileResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetUserInfoByMobileResult() *UserInfoServiceGetUserInfoByMobileResult {
	return &UserInfoServiceGetUserInfoByMobileResult{}
}

var UserInfoServiceGetUserInfoByMobileResult_Success_DEFAULT string

func (p *UserInfoServiceGetUserInfoByMobileResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetUserInfoByMobileResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetUserInfoByMobileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetUserInfoByMobileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByMobileResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByMobileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInfoByMobile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByMobileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetUserInfoByMobileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInfoByMobileResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - OldPassword
//  - NewPassword_
type UserInfoServiceChangePasswordArgs struct {
	ID           int64  `thrift:"id,1" db:"id" json:"id"`
	OldPassword  string `thrift:"old_password,2" db:"old_password" json:"old_password"`
	NewPassword_ string `thrift:"new_password,3" db:"new_password" json:"new_password"`
}

func NewUserInfoServiceChangePasswordArgs() *UserInfoServiceChangePasswordArgs {
	return &UserInfoServiceChangePasswordArgs{}
}

func (p *UserInfoServiceChangePasswordArgs) GetID() int64 {
	return p.ID
}

func (p *UserInfoServiceChangePasswordArgs) GetOldPassword() string {
	return p.OldPassword
}

func (p *UserInfoServiceChangePasswordArgs) GetNewPassword_() string {
	return p.NewPassword_
}
func (p *UserInfoServiceChangePasswordArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceChangePasswordArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *UserInfoServiceChangePasswordArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OldPassword = v
	}
	return nil
}

func (p *UserInfoServiceChangePasswordArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NewPassword_ = v
	}
	return nil
}

func (p *UserInfoServiceChangePasswordArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changePassword_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceChangePasswordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceChangePasswordArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("old_password", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:old_password: ", p), err)
	}
	if err := oprot.WriteString(string(p.OldPassword)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.old_password (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:old_password: ", p), err)
	}
	return err
}

func (p *UserInfoServiceChangePasswordArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_password", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_password: ", p), err)
	}
	if err := oprot.WriteString(string(p.NewPassword_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.new_password (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_password: ", p), err)
	}
	return err
}

func (p *UserInfoServiceChangePasswordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceChangePasswordArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceChangePasswordResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceChangePasswordResult() *UserInfoServiceChangePasswordResult {
	return &UserInfoServiceChangePasswordResult{}
}

var UserInfoServiceChangePasswordResult_Success_DEFAULT string

func (p *UserInfoServiceChangePasswordResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceChangePasswordResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceChangePasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceChangePasswordResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceChangePasswordResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceChangePasswordResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changePassword_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceChangePasswordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceChangePasswordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceChangePasswordResult(%+v)", *p)
}

// Attributes:
//  - OldUserID
//  - CurrentUserID
//  - Mobile
type UserInfoServiceChangeMobileArgs struct {
	OldUserID     int64  `thrift:"old_user_id,1" db:"old_user_id" json:"old_user_id"`
	CurrentUserID int64  `thrift:"current_user_id,2" db:"current_user_id" json:"current_user_id"`
	Mobile        string `thrift:"mobile,3" db:"mobile" json:"mobile"`
}

func NewUserInfoServiceChangeMobileArgs() *UserInfoServiceChangeMobileArgs {
	return &UserInfoServiceChangeMobileArgs{}
}

func (p *UserInfoServiceChangeMobileArgs) GetOldUserID() int64 {
	return p.OldUserID
}

func (p *UserInfoServiceChangeMobileArgs) GetCurrentUserID() int64 {
	return p.CurrentUserID
}

func (p *UserInfoServiceChangeMobileArgs) GetMobile() string {
	return p.Mobile
}
func (p *UserInfoServiceChangeMobileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceChangeMobileArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OldUserID = v
	}
	return nil
}

func (p *UserInfoServiceChangeMobileArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CurrentUserID = v
	}
	return nil
}

func (p *UserInfoServiceChangeMobileArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Mobile = v
	}
	return nil
}

func (p *UserInfoServiceChangeMobileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changeMobile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceChangeMobileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("old_user_id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:old_user_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OldUserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.old_user_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:old_user_id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceChangeMobileArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("current_user_id", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:current_user_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CurrentUserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.current_user_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:current_user_id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceChangeMobileArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mobile: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mobile)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mobile (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mobile: ", p), err)
	}
	return err
}

func (p *UserInfoServiceChangeMobileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceChangeMobileArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceChangeMobileResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceChangeMobileResult() *UserInfoServiceChangeMobileResult {
	return &UserInfoServiceChangeMobileResult{}
}

var UserInfoServiceChangeMobileResult_Success_DEFAULT string

func (p *UserInfoServiceChangeMobileResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceChangeMobileResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceChangeMobileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceChangeMobileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceChangeMobileResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceChangeMobileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changeMobile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceChangeMobileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceChangeMobileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceChangeMobileResult(%+v)", *p)
}

// Attributes:
//  - UserId
//  - Mobile
type UserInfoServiceUnbindMobileArgs struct {
	UserId int64  `thrift:"userId,1" db:"userId" json:"userId"`
	Mobile string `thrift:"mobile,2" db:"mobile" json:"mobile"`
}

func NewUserInfoServiceUnbindMobileArgs() *UserInfoServiceUnbindMobileArgs {
	return &UserInfoServiceUnbindMobileArgs{}
}

func (p *UserInfoServiceUnbindMobileArgs) GetUserId() int64 {
	return p.UserId
}

func (p *UserInfoServiceUnbindMobileArgs) GetMobile() string {
	return p.Mobile
}
func (p *UserInfoServiceUnbindMobileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceUnbindMobileArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceUnbindMobileArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Mobile = v
	}
	return nil
}

func (p *UserInfoServiceUnbindMobileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unbindMobile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceUnbindMobileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceUnbindMobileArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mobile: ", p), err)
	}
	if err := oprot.WriteString(string(p.Mobile)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mobile (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mobile: ", p), err)
	}
	return err
}

func (p *UserInfoServiceUnbindMobileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceUnbindMobileArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceUnbindMobileResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceUnbindMobileResult() *UserInfoServiceUnbindMobileResult {
	return &UserInfoServiceUnbindMobileResult{}
}

var UserInfoServiceUnbindMobileResult_Success_DEFAULT string

func (p *UserInfoServiceUnbindMobileResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceUnbindMobileResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceUnbindMobileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceUnbindMobileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceUnbindMobileResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceUnbindMobileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unbindMobile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceUnbindMobileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceUnbindMobileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceUnbindMobileResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Info
type UserInfoServiceUpdateInfoArgs struct {
	ID   int64             `thrift:"id,1" db:"id" json:"id"`
	Info map[string]string `thrift:"info,2" db:"info" json:"info"`
}

func NewUserInfoServiceUpdateInfoArgs() *UserInfoServiceUpdateInfoArgs {
	return &UserInfoServiceUpdateInfoArgs{}
}

func (p *UserInfoServiceUpdateInfoArgs) GetID() int64 {
	return p.ID
}

func (p *UserInfoServiceUpdateInfoArgs) GetInfo() map[string]string {
	return p.Info
}
func (p *UserInfoServiceUpdateInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceUpdateInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *UserInfoServiceUpdateInfoArgs) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Info = tMap
	for i := 0; i < size; i++ {
		var _key178 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key178 = v
		}
		var _val179 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val179 = v
		}
		p.Info[_key178] = _val179
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserInfoServiceUpdateInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceUpdateInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceUpdateInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("info", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Info)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Info {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err)
	}
	return err
}

func (p *UserInfoServiceUpdateInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceUpdateInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceUpdateInfoResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceUpdateInfoResult() *UserInfoServiceUpdateInfoResult {
	return &UserInfoServiceUpdateInfoResult{}
}

var UserInfoServiceUpdateInfoResult_Success_DEFAULT string

func (p *UserInfoServiceUpdateInfoResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceUpdateInfoResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceUpdateInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceUpdateInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceUpdateInfoResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceUpdateInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceUpdateInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceUpdateInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceUpdateInfoResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Number
type UserInfoServiceUpdateNumberArgs struct {
	ID     int64  `thrift:"id,1" db:"id" json:"id"`
	Number string `thrift:"number,2" db:"number" json:"number"`
}

func NewUserInfoServiceUpdateNumberArgs() *UserInfoServiceUpdateNumberArgs {
	return &UserInfoServiceUpdateNumberArgs{}
}

func (p *UserInfoServiceUpdateNumberArgs) GetID() int64 {
	return p.ID
}

func (p *UserInfoServiceUpdateNumberArgs) GetNumber() string {
	return p.Number
}
func (p *UserInfoServiceUpdateNumberArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceUpdateNumberArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *UserInfoServiceUpdateNumberArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Number = v
	}
	return nil
}

func (p *UserInfoServiceUpdateNumberArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateNumber_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceUpdateNumberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceUpdateNumberArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("number", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:number: ", p), err)
	}
	if err := oprot.WriteString(string(p.Number)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.number (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:number: ", p), err)
	}
	return err
}

func (p *UserInfoServiceUpdateNumberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceUpdateNumberArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceUpdateNumberResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceUpdateNumberResult() *UserInfoServiceUpdateNumberResult {
	return &UserInfoServiceUpdateNumberResult{}
}

var UserInfoServiceUpdateNumberResult_Success_DEFAULT string

func (p *UserInfoServiceUpdateNumberResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceUpdateNumberResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceUpdateNumberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceUpdateNumberResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceUpdateNumberResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceUpdateNumberResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateNumber_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceUpdateNumberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceUpdateNumberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceUpdateNumberResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - NumberEdit
type UserInfoServiceSetNumberEditArgs struct {
	ID         int64 `thrift:"id,1" db:"id" json:"id"`
	NumberEdit int32 `thrift:"numberEdit,2" db:"numberEdit" json:"numberEdit"`
}

func NewUserInfoServiceSetNumberEditArgs() *UserInfoServiceSetNumberEditArgs {
	return &UserInfoServiceSetNumberEditArgs{}
}

func (p *UserInfoServiceSetNumberEditArgs) GetID() int64 {
	return p.ID
}

func (p *UserInfoServiceSetNumberEditArgs) GetNumberEdit() int32 {
	return p.NumberEdit
}
func (p *UserInfoServiceSetNumberEditArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceSetNumberEditArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *UserInfoServiceSetNumberEditArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NumberEdit = v
	}
	return nil
}

func (p *UserInfoServiceSetNumberEditArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setNumberEdit_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceSetNumberEditArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceSetNumberEditArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numberEdit", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:numberEdit: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NumberEdit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.numberEdit (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:numberEdit: ", p), err)
	}
	return err
}

func (p *UserInfoServiceSetNumberEditArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceSetNumberEditArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceSetNumberEditResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceSetNumberEditResult() *UserInfoServiceSetNumberEditResult {
	return &UserInfoServiceSetNumberEditResult{}
}

var UserInfoServiceSetNumberEditResult_Success_DEFAULT string

func (p *UserInfoServiceSetNumberEditResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceSetNumberEditResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceSetNumberEditResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceSetNumberEditResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceSetNumberEditResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceSetNumberEditResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setNumberEdit_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceSetNumberEditResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceSetNumberEditResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceSetNumberEditResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Password
type UserInfoServiceSetPasswordArgs struct {
	ID       int64  `thrift:"id,1" db:"id" json:"id"`
	Password string `thrift:"password,2" db:"password" json:"password"`
}

func NewUserInfoServiceSetPasswordArgs() *UserInfoServiceSetPasswordArgs {
	return &UserInfoServiceSetPasswordArgs{}
}

func (p *UserInfoServiceSetPasswordArgs) GetID() int64 {
	return p.ID
}

func (p *UserInfoServiceSetPasswordArgs) GetPassword() string {
	return p.Password
}
func (p *UserInfoServiceSetPasswordArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceSetPasswordArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *UserInfoServiceSetPasswordArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *UserInfoServiceSetPasswordArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setPassword_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceSetPasswordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceSetPasswordArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:password: ", p), err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:password: ", p), err)
	}
	return err
}

func (p *UserInfoServiceSetPasswordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceSetPasswordArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceSetPasswordResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceSetPasswordResult() *UserInfoServiceSetPasswordResult {
	return &UserInfoServiceSetPasswordResult{}
}

var UserInfoServiceSetPasswordResult_Success_DEFAULT string

func (p *UserInfoServiceSetPasswordResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceSetPasswordResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceSetPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceSetPasswordResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceSetPasswordResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceSetPasswordResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setPassword_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceSetPasswordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceSetPasswordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceSetPasswordResult(%+v)", *p)
}

// Attributes:
//  - ID
type UserInfoServiceGetUserInfoByIdArgs struct {
	ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewUserInfoServiceGetUserInfoByIdArgs() *UserInfoServiceGetUserInfoByIdArgs {
	return &UserInfoServiceGetUserInfoByIdArgs{}
}

func (p *UserInfoServiceGetUserInfoByIdArgs) GetID() int64 {
	return p.ID
}
func (p *UserInfoServiceGetUserInfoByIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByIdArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInfoById_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserInfoByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInfoByIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetUserInfoByIdResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetUserInfoByIdResult() *UserInfoServiceGetUserInfoByIdResult {
	return &UserInfoServiceGetUserInfoByIdResult{}
}

var UserInfoServiceGetUserInfoByIdResult_Success_DEFAULT string

func (p *UserInfoServiceGetUserInfoByIdResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetUserInfoByIdResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetUserInfoByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetUserInfoByIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByIdResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInfoById_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetUserInfoByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInfoByIdResult(%+v)", *p)
}

// Attributes:
//  - PrivateKey
type UserInfoServiceGetUserInfoByPrivateKeyArgs struct {
	PrivateKey string `thrift:"privateKey,1" db:"privateKey" json:"privateKey"`
}

func NewUserInfoServiceGetUserInfoByPrivateKeyArgs() *UserInfoServiceGetUserInfoByPrivateKeyArgs {
	return &UserInfoServiceGetUserInfoByPrivateKeyArgs{}
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyArgs) GetPrivateKey() string {
	return p.PrivateKey
}
func (p *UserInfoServiceGetUserInfoByPrivateKeyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PrivateKey = v
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInfoByPrivateKey_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privateKey", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privateKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.PrivateKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privateKey (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privateKey: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInfoByPrivateKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetUserInfoByPrivateKeyResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetUserInfoByPrivateKeyResult() *UserInfoServiceGetUserInfoByPrivateKeyResult {
	return &UserInfoServiceGetUserInfoByPrivateKeyResult{}
}

var UserInfoServiceGetUserInfoByPrivateKeyResult_Success_DEFAULT string

func (p *UserInfoServiceGetUserInfoByPrivateKeyResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetUserInfoByPrivateKeyResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetUserInfoByPrivateKeyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInfoByPrivateKey_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInfoByPrivateKeyResult(%+v)", *p)
}

// Attributes:
//  - Number
type UserInfoServiceGetUserInfoByNumberArgs struct {
	Number string `thrift:"number,1" db:"number" json:"number"`
}

func NewUserInfoServiceGetUserInfoByNumberArgs() *UserInfoServiceGetUserInfoByNumberArgs {
	return &UserInfoServiceGetUserInfoByNumberArgs{}
}

func (p *UserInfoServiceGetUserInfoByNumberArgs) GetNumber() string {
	return p.Number
}
func (p *UserInfoServiceGetUserInfoByNumberArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByNumberArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Number = v
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByNumberArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInfoByNumber_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByNumberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("number", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:number: ", p), err)
	}
	if err := oprot.WriteString(string(p.Number)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.number (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:number: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserInfoByNumberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInfoByNumberArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetUserInfoByNumberResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetUserInfoByNumberResult() *UserInfoServiceGetUserInfoByNumberResult {
	return &UserInfoServiceGetUserInfoByNumberResult{}
}

var UserInfoServiceGetUserInfoByNumberResult_Success_DEFAULT string

func (p *UserInfoServiceGetUserInfoByNumberResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetUserInfoByNumberResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetUserInfoByNumberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetUserInfoByNumberResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByNumberResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByNumberResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInfoByNumber_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByNumberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetUserInfoByNumberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInfoByNumberResult(%+v)", *p)
}

// Attributes:
//  - Number
type UserInfoServiceGetUserIdByNumberArgs struct {
	Number string `thrift:"number,1" db:"number" json:"number"`
}

func NewUserInfoServiceGetUserIdByNumberArgs() *UserInfoServiceGetUserIdByNumberArgs {
	return &UserInfoServiceGetUserIdByNumberArgs{}
}

func (p *UserInfoServiceGetUserIdByNumberArgs) GetNumber() string {
	return p.Number
}
func (p *UserInfoServiceGetUserIdByNumberArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserIdByNumberArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Number = v
	}
	return nil
}

func (p *UserInfoServiceGetUserIdByNumberArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserIdByNumber_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserIdByNumberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("number", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:number: ", p), err)
	}
	if err := oprot.WriteString(string(p.Number)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.number (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:number: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserIdByNumberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserIdByNumberArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetUserIdByNumberResult struct {
	Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetUserIdByNumberResult() *UserInfoServiceGetUserIdByNumberResult {
	return &UserInfoServiceGetUserIdByNumberResult{}
}

var UserInfoServiceGetUserIdByNumberResult_Success_DEFAULT int64

func (p *UserInfoServiceGetUserIdByNumberResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetUserIdByNumberResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetUserIdByNumberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetUserIdByNumberResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserIdByNumberResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetUserIdByNumberResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserIdByNumber_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserIdByNumberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetUserIdByNumberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserIdByNumberResult(%+v)", *p)
}

// Attributes:
//  - PrivateKey
type UserInfoServiceGetUserIdByPrivateKeyArgs struct {
	PrivateKey string `thrift:"privateKey,1" db:"privateKey" json:"privateKey"`
}

func NewUserInfoServiceGetUserIdByPrivateKeyArgs() *UserInfoServiceGetUserIdByPrivateKeyArgs {
	return &UserInfoServiceGetUserIdByPrivateKeyArgs{}
}

func (p *UserInfoServiceGetUserIdByPrivateKeyArgs) GetPrivateKey() string {
	return p.PrivateKey
}
func (p *UserInfoServiceGetUserIdByPrivateKeyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserIdByPrivateKeyArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PrivateKey = v
	}
	return nil
}

func (p *UserInfoServiceGetUserIdByPrivateKeyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserIdByPrivateKey_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserIdByPrivateKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privateKey", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privateKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.PrivateKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privateKey (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privateKey: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserIdByPrivateKeyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserIdByPrivateKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetUserIdByPrivateKeyResult struct {
	Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetUserIdByPrivateKeyResult() *UserInfoServiceGetUserIdByPrivateKeyResult {
	return &UserInfoServiceGetUserIdByPrivateKeyResult{}
}

var UserInfoServiceGetUserIdByPrivateKeyResult_Success_DEFAULT int64

func (p *UserInfoServiceGetUserIdByPrivateKeyResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetUserIdByPrivateKeyResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetUserIdByPrivateKeyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetUserIdByPrivateKeyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserIdByPrivateKeyResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetUserIdByPrivateKeyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserIdByPrivateKey_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserIdByPrivateKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetUserIdByPrivateKeyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserIdByPrivateKeyResult(%+v)", *p)
}

// Attributes:
//  - ID
type UserInfoServiceGetPrivateKeyByIdArgs struct {
	ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewUserInfoServiceGetPrivateKeyByIdArgs() *UserInfoServiceGetPrivateKeyByIdArgs {
	return &UserInfoServiceGetPrivateKeyByIdArgs{}
}

func (p *UserInfoServiceGetPrivateKeyByIdArgs) GetID() int64 {
	return p.ID
}
func (p *UserInfoServiceGetPrivateKeyByIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetPrivateKeyByIdArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *UserInfoServiceGetPrivateKeyByIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPrivateKeyById_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetPrivateKeyByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetPrivateKeyByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetPrivateKeyByIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetPrivateKeyByIdResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetPrivateKeyByIdResult() *UserInfoServiceGetPrivateKeyByIdResult {
	return &UserInfoServiceGetPrivateKeyByIdResult{}
}

var UserInfoServiceGetPrivateKeyByIdResult_Success_DEFAULT string

func (p *UserInfoServiceGetPrivateKeyByIdResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetPrivateKeyByIdResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetPrivateKeyByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetPrivateKeyByIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetPrivateKeyByIdResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetPrivateKeyByIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPrivateKeyById_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetPrivateKeyByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetPrivateKeyByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetPrivateKeyByIdResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Info
type UserInfoServiceUpdateArgs struct {
	ID   int64             `thrift:"id,1" db:"id" json:"id"`
	Info map[string]string `thrift:"info,2" db:"info" json:"info"`
}

func NewUserInfoServiceUpdateArgs() *UserInfoServiceUpdateArgs {
	return &UserInfoServiceUpdateArgs{}
}

func (p *UserInfoServiceUpdateArgs) GetID() int64 {
	return p.ID
}

func (p *UserInfoServiceUpdateArgs) GetInfo() map[string]string {
	return p.Info
}
func (p *UserInfoServiceUpdateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceUpdateArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *UserInfoServiceUpdateArgs) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Info = tMap
	for i := 0; i < size; i++ {
		var _key180 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key180 = v
		}
		var _val181 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val181 = v
		}
		p.Info[_key180] = _val181
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserInfoServiceUpdateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("update_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceUpdateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceUpdateArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("info", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Info)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Info {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err)
	}
	return err
}

func (p *UserInfoServiceUpdateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceUpdateArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceUpdateResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceUpdateResult() *UserInfoServiceUpdateResult {
	return &UserInfoServiceUpdateResult{}
}

var UserInfoServiceUpdateResult_Success_DEFAULT string

func (p *UserInfoServiceUpdateResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceUpdateResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceUpdateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceUpdateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceUpdateResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceUpdateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("update_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceUpdateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceUpdateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceUpdateResult(%+v)", *p)
}

// Attributes:
//  - Type
//  - SourceIds
type UserInfoServiceGetUserInfosBySourceIdsArgs struct {
	Type      int32    `thrift:"type,1" db:"type" json:"type"`
	SourceIds []string `thrift:"sourceIds,2" db:"sourceIds" json:"sourceIds"`
}

func NewUserInfoServiceGetUserInfosBySourceIdsArgs() *UserInfoServiceGetUserInfosBySourceIdsArgs {
	return &UserInfoServiceGetUserInfosBySourceIdsArgs{}
}

func (p *UserInfoServiceGetUserInfosBySourceIdsArgs) GetType() int32 {
	return p.Type
}

func (p *UserInfoServiceGetUserInfosBySourceIdsArgs) GetSourceIds() []string {
	return p.SourceIds
}
func (p *UserInfoServiceGetUserInfosBySourceIdsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfosBySourceIdsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceGetUserInfosBySourceIdsArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.SourceIds = tSlice
	for i := 0; i < size; i++ {
		var _elem182 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem182 = v
		}
		p.SourceIds = append(p.SourceIds, _elem182)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfosBySourceIdsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInfosBySourceIds_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfosBySourceIdsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserInfosBySourceIdsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceIds", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sourceIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.SourceIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.SourceIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sourceIds: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserInfosBySourceIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInfosBySourceIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetUserInfosBySourceIdsResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetUserInfosBySourceIdsResult() *UserInfoServiceGetUserInfosBySourceIdsResult {
	return &UserInfoServiceGetUserInfosBySourceIdsResult{}
}

var UserInfoServiceGetUserInfosBySourceIdsResult_Success_DEFAULT string

func (p *UserInfoServiceGetUserInfosBySourceIdsResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetUserInfosBySourceIdsResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetUserInfosBySourceIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetUserInfosBySourceIdsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfosBySourceIdsResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetUserInfosBySourceIdsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInfosBySourceIds_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfosBySourceIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetUserInfosBySourceIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInfosBySourceIdsResult(%+v)", *p)
}

// Attributes:
//  - ID
type UserInfoServiceGetTaskStatusByIdArgs struct {
	ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewUserInfoServiceGetTaskStatusByIdArgs() *UserInfoServiceGetTaskStatusByIdArgs {
	return &UserInfoServiceGetTaskStatusByIdArgs{}
}

func (p *UserInfoServiceGetTaskStatusByIdArgs) GetID() int64 {
	return p.ID
}
func (p *UserInfoServiceGetTaskStatusByIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetTaskStatusByIdArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *UserInfoServiceGetTaskStatusByIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTaskStatusById_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetTaskStatusByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetTaskStatusByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetTaskStatusByIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetTaskStatusByIdResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetTaskStatusByIdResult() *UserInfoServiceGetTaskStatusByIdResult {
	return &UserInfoServiceGetTaskStatusByIdResult{}
}

var UserInfoServiceGetTaskStatusByIdResult_Success_DEFAULT string

func (p *UserInfoServiceGetTaskStatusByIdResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetTaskStatusByIdResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetTaskStatusByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetTaskStatusByIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetTaskStatusByIdResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetTaskStatusByIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTaskStatusById_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetTaskStatusByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetTaskStatusByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetTaskStatusByIdResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Number
type UserInfoServiceCheckNumberArgs struct {
	ID     int64  `thrift:"id,1" db:"id" json:"id"`
	Number string `thrift:"number,2" db:"number" json:"number"`
}

func NewUserInfoServiceCheckNumberArgs() *UserInfoServiceCheckNumberArgs {
	return &UserInfoServiceCheckNumberArgs{}
}

func (p *UserInfoServiceCheckNumberArgs) GetID() int64 {
	return p.ID
}

func (p *UserInfoServiceCheckNumberArgs) GetNumber() string {
	return p.Number
}
func (p *UserInfoServiceCheckNumberArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceCheckNumberArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *UserInfoServiceCheckNumberArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Number = v
	}
	return nil
}

func (p *UserInfoServiceCheckNumberArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkNumber_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceCheckNumberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceCheckNumberArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("number", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:number: ", p), err)
	}
	if err := oprot.WriteString(string(p.Number)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.number (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:number: ", p), err)
	}
	return err
}

func (p *UserInfoServiceCheckNumberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceCheckNumberArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceCheckNumberResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceCheckNumberResult() *UserInfoServiceCheckNumberResult {
	return &UserInfoServiceCheckNumberResult{}
}

var UserInfoServiceCheckNumberResult_Success_DEFAULT string

func (p *UserInfoServiceCheckNumberResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceCheckNumberResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceCheckNumberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceCheckNumberResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceCheckNumberResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceCheckNumberResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkNumber_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceCheckNumberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceCheckNumberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceCheckNumberResult(%+v)", *p)
}

// Attributes:
//  - ID
type UserInfoServiceCheckNumberPermissionArgs struct {
	ID int64 `thrift:"id,1" db:"id" json:"id"`
}

func NewUserInfoServiceCheckNumberPermissionArgs() *UserInfoServiceCheckNumberPermissionArgs {
	return &UserInfoServiceCheckNumberPermissionArgs{}
}

func (p *UserInfoServiceCheckNumberPermissionArgs) GetID() int64 {
	return p.ID
}
func (p *UserInfoServiceCheckNumberPermissionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceCheckNumberPermissionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *UserInfoServiceCheckNumberPermissionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkNumberPermission_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceCheckNumberPermissionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceCheckNumberPermissionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceCheckNumberPermissionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceCheckNumberPermissionResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceCheckNumberPermissionResult() *UserInfoServiceCheckNumberPermissionResult {
	return &UserInfoServiceCheckNumberPermissionResult{}
}

var UserInfoServiceCheckNumberPermissionResult_Success_DEFAULT string

func (p *UserInfoServiceCheckNumberPermissionResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceCheckNumberPermissionResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceCheckNumberPermissionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceCheckNumberPermissionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceCheckNumberPermissionResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceCheckNumberPermissionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkNumberPermission_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceCheckNumberPermissionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceCheckNumberPermissionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceCheckNumberPermissionResult(%+v)", *p)
}

// Attributes:
//  - Type
//  - UserName
//  - Password
//  - CommonParams
type UserInfoServiceAuthPasswordLoginArgs struct {
	Type         int32  `thrift:"type,1" db:"type" json:"type"`
	UserName     string `thrift:"userName,2" db:"userName" json:"userName"`
	Password     string `thrift:"password,3" db:"password" json:"password"`
	CommonParams string `thrift:"commonParams,4" db:"commonParams" json:"commonParams"`
}

func NewUserInfoServiceAuthPasswordLoginArgs() *UserInfoServiceAuthPasswordLoginArgs {
	return &UserInfoServiceAuthPasswordLoginArgs{}
}

func (p *UserInfoServiceAuthPasswordLoginArgs) GetType() int32 {
	return p.Type
}

func (p *UserInfoServiceAuthPasswordLoginArgs) GetUserName() string {
	return p.UserName
}

func (p *UserInfoServiceAuthPasswordLoginArgs) GetPassword() string {
	return p.Password
}

func (p *UserInfoServiceAuthPasswordLoginArgs) GetCommonParams() string {
	return p.CommonParams
}
func (p *UserInfoServiceAuthPasswordLoginArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.CommonParams = v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("authPasswordLogin_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userName: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userName: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("commonParams", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:commonParams: ", p), err)
	}
	if err := oprot.WriteString(string(p.CommonParams)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.commonParams (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:commonParams: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceAuthPasswordLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceAuthPasswordLoginResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceAuthPasswordLoginResult() *UserInfoServiceAuthPasswordLoginResult {
	return &UserInfoServiceAuthPasswordLoginResult{}
}

var UserInfoServiceAuthPasswordLoginResult_Success_DEFAULT string

func (p *UserInfoServiceAuthPasswordLoginResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceAuthPasswordLoginResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceAuthPasswordLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceAuthPasswordLoginResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("authPasswordLogin_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceAuthPasswordLoginResult(%+v)", *p)
}

// Attributes:
//  - Ids
type UserInfoServiceClearTaskStatusArgs struct {
	Ids []int64 `thrift:"ids,1" db:"ids" json:"ids"`
}

func NewUserInfoServiceClearTaskStatusArgs() *UserInfoServiceClearTaskStatusArgs {
	return &UserInfoServiceClearTaskStatusArgs{}
}

func (p *UserInfoServiceClearTaskStatusArgs) GetIds() []int64 {
	return p.Ids
}
func (p *UserInfoServiceClearTaskStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceClearTaskStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.Ids = tSlice
	for i := 0; i < size; i++ {
		var _elem183 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem183 = v
		}
		p.Ids = append(p.Ids, _elem183)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserInfoServiceClearTaskStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clearTaskStatus_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceClearTaskStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.Ids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Ids {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ids: ", p), err)
	}
	return err
}

func (p *UserInfoServiceClearTaskStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceClearTaskStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceClearTaskStatusResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceClearTaskStatusResult() *UserInfoServiceClearTaskStatusResult {
	return &UserInfoServiceClearTaskStatusResult{}
}

var UserInfoServiceClearTaskStatusResult_Success_DEFAULT string

func (p *UserInfoServiceClearTaskStatusResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceClearTaskStatusResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceClearTaskStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceClearTaskStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceClearTaskStatusResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceClearTaskStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clearTaskStatus_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceClearTaskStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceClearTaskStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceClearTaskStatusResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Operator
//  - Operand
type UserInfoServiceBitTaskStatusArgs struct {
	ID       int64  `thrift:"id,1" db:"id" json:"id"`
	Operator string `thrift:"operator,2" db:"operator" json:"operator"`
	Operand  int32  `thrift:"operand,3" db:"operand" json:"operand"`
}

func NewUserInfoServiceBitTaskStatusArgs() *UserInfoServiceBitTaskStatusArgs {
	return &UserInfoServiceBitTaskStatusArgs{}
}

func (p *UserInfoServiceBitTaskStatusArgs) GetID() int64 {
	return p.ID
}

func (p *UserInfoServiceBitTaskStatusArgs) GetOperator() string {
	return p.Operator
}

func (p *UserInfoServiceBitTaskStatusArgs) GetOperand() int32 {
	return p.Operand
}
func (p *UserInfoServiceBitTaskStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceBitTaskStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *UserInfoServiceBitTaskStatusArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Operator = v
	}
	return nil
}

func (p *UserInfoServiceBitTaskStatusArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Operand = v
	}
	return nil
}

func (p *UserInfoServiceBitTaskStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bitTaskStatus_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceBitTaskStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceBitTaskStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operator", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:operator: ", p), err)
	}
	if err := oprot.WriteString(string(p.Operator)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.operator (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:operator: ", p), err)
	}
	return err
}

func (p *UserInfoServiceBitTaskStatusArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operand", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:operand: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Operand)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.operand (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:operand: ", p), err)
	}
	return err
}

func (p *UserInfoServiceBitTaskStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceBitTaskStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceBitTaskStatusResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceBitTaskStatusResult() *UserInfoServiceBitTaskStatusResult {
	return &UserInfoServiceBitTaskStatusResult{}
}

var UserInfoServiceBitTaskStatusResult_Success_DEFAULT string

func (p *UserInfoServiceBitTaskStatusResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceBitTaskStatusResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceBitTaskStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceBitTaskStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceBitTaskStatusResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceBitTaskStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bitTaskStatus_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceBitTaskStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceBitTaskStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceBitTaskStatusResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - NewPassword_
type UserInfoServiceResetPasswordArgs struct {
	ID           int64  `thrift:"id,1" db:"id" json:"id"`
	NewPassword_ string `thrift:"newPassword,2" db:"newPassword" json:"newPassword"`
}

func NewUserInfoServiceResetPasswordArgs() *UserInfoServiceResetPasswordArgs {
	return &UserInfoServiceResetPasswordArgs{}
}

func (p *UserInfoServiceResetPasswordArgs) GetID() int64 {
	return p.ID
}

func (p *UserInfoServiceResetPasswordArgs) GetNewPassword_() string {
	return p.NewPassword_
}
func (p *UserInfoServiceResetPasswordArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceResetPasswordArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *UserInfoServiceResetPasswordArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NewPassword_ = v
	}
	return nil
}

func (p *UserInfoServiceResetPasswordArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("resetPassword_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceResetPasswordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceResetPasswordArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newPassword", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:newPassword: ", p), err)
	}
	if err := oprot.WriteString(string(p.NewPassword_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.newPassword (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:newPassword: ", p), err)
	}
	return err
}

func (p *UserInfoServiceResetPasswordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceResetPasswordArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceResetPasswordResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceResetPasswordResult() *UserInfoServiceResetPasswordResult {
	return &UserInfoServiceResetPasswordResult{}
}

var UserInfoServiceResetPasswordResult_Success_DEFAULT string

func (p *UserInfoServiceResetPasswordResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceResetPasswordResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceResetPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceResetPasswordResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceResetPasswordResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceResetPasswordResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("resetPassword_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceResetPasswordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceResetPasswordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceResetPasswordResult(%+v)", *p)
}

// Attributes:
//  - UserId
type UserInfoServiceGetUserActionArgs struct {
	UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewUserInfoServiceGetUserActionArgs() *UserInfoServiceGetUserActionArgs {
	return &UserInfoServiceGetUserActionArgs{}
}

func (p *UserInfoServiceGetUserActionArgs) GetUserId() int64 {
	return p.UserId
}
func (p *UserInfoServiceGetUserActionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserActionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceGetUserActionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserAction_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserActionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserActionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserActionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetUserActionResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetUserActionResult() *UserInfoServiceGetUserActionResult {
	return &UserInfoServiceGetUserActionResult{}
}

var UserInfoServiceGetUserActionResult_Success_DEFAULT string

func (p *UserInfoServiceGetUserActionResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetUserActionResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetUserActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetUserActionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserActionResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetUserActionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserAction_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserActionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetUserActionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserActionResult(%+v)", *p)
}

// Attributes:
//  - UserId
type UserInfoServiceGetUserInterestArgs struct {
	UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewUserInfoServiceGetUserInterestArgs() *UserInfoServiceGetUserInterestArgs {
	return &UserInfoServiceGetUserInterestArgs{}
}

func (p *UserInfoServiceGetUserInterestArgs) GetUserId() int64 {
	return p.UserId
}
func (p *UserInfoServiceGetUserInterestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInterestArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceGetUserInterestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInterest_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInterestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserInterestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInterestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetUserInterestResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetUserInterestResult() *UserInfoServiceGetUserInterestResult {
	return &UserInfoServiceGetUserInterestResult{}
}

var UserInfoServiceGetUserInterestResult_Success_DEFAULT string

func (p *UserInfoServiceGetUserInterestResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetUserInterestResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetUserInterestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetUserInterestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInterestResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetUserInterestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInterest_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInterestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetUserInterestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInterestResult(%+v)", *p)
}

// Attributes:
//  - UserId
type UserInfoServiceGetUserInterest2Args struct {
	UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewUserInfoServiceGetUserInterest2Args() *UserInfoServiceGetUserInterest2Args {
	return &UserInfoServiceGetUserInterest2Args{}
}

func (p *UserInfoServiceGetUserInterest2Args) GetUserId() int64 {
	return p.UserId
}
func (p *UserInfoServiceGetUserInterest2Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInterest2Args) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceGetUserInterest2Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInterest2_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInterest2Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserInterest2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInterest2Args(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetUserInterest2Result struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetUserInterest2Result() *UserInfoServiceGetUserInterest2Result {
	return &UserInfoServiceGetUserInterest2Result{}
}

var UserInfoServiceGetUserInterest2Result_Success_DEFAULT string

func (p *UserInfoServiceGetUserInterest2Result) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetUserInterest2Result_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetUserInterest2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetUserInterest2Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInterest2Result) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetUserInterest2Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInterest2_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInterest2Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetUserInterest2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInterest2Result(%+v)", *p)
}

// Attributes:
//  - Ids
type UserInfoServiceGetUserInfoListByIdsArgs struct {
	Ids string `thrift:"ids,1" db:"ids" json:"ids"`
}

func NewUserInfoServiceGetUserInfoListByIdsArgs() *UserInfoServiceGetUserInfoListByIdsArgs {
	return &UserInfoServiceGetUserInfoListByIdsArgs{}
}

func (p *UserInfoServiceGetUserInfoListByIdsArgs) GetIds() string {
	return p.Ids
}
func (p *UserInfoServiceGetUserInfoListByIdsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoListByIdsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Ids = v
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoListByIdsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInfoListByIds_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoListByIdsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ids", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ids: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ids)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ids (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ids: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserInfoListByIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInfoListByIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetUserInfoListByIdsResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetUserInfoListByIdsResult() *UserInfoServiceGetUserInfoListByIdsResult {
	return &UserInfoServiceGetUserInfoListByIdsResult{}
}

var UserInfoServiceGetUserInfoListByIdsResult_Success_DEFAULT string

func (p *UserInfoServiceGetUserInfoListByIdsResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetUserInfoListByIdsResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetUserInfoListByIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetUserInfoListByIdsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoListByIdsResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoListByIdsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInfoListByIds_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoListByIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetUserInfoListByIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInfoListByIdsResult(%+v)", *p)
}

// Attributes:
//  - ImId
type UserInfoServiceGetUserInfoByImIdArgs struct {
	ImId string `thrift:"imId,1" db:"imId" json:"imId"`
}

func NewUserInfoServiceGetUserInfoByImIdArgs() *UserInfoServiceGetUserInfoByImIdArgs {
	return &UserInfoServiceGetUserInfoByImIdArgs{}
}

func (p *UserInfoServiceGetUserInfoByImIdArgs) GetImId() string {
	return p.ImId
}
func (p *UserInfoServiceGetUserInfoByImIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByImIdArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ImId = v
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByImIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInfoByImId_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByImIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("imId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:imId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ImId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.imId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:imId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserInfoByImIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInfoByImIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetUserInfoByImIdResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetUserInfoByImIdResult() *UserInfoServiceGetUserInfoByImIdResult {
	return &UserInfoServiceGetUserInfoByImIdResult{}
}

var UserInfoServiceGetUserInfoByImIdResult_Success_DEFAULT string

func (p *UserInfoServiceGetUserInfoByImIdResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetUserInfoByImIdResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetUserInfoByImIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetUserInfoByImIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByImIdResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByImIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInfoByImId_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByImIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetUserInfoByImIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInfoByImIdResult(%+v)", *p)
}

// Attributes:
//  - BeginTime
//  - EndTime
//  - SourceId
//  - Status
//  - Cursor
//  - Limit
type UserInfoServiceGetSuspectedTPAccountArgs struct {
	BeginTime int32  `thrift:"beginTime,1" db:"beginTime" json:"beginTime"`
	EndTime   int32  `thrift:"endTime,2" db:"endTime" json:"endTime"`
	SourceId  string `thrift:"sourceId,3" db:"sourceId" json:"sourceId"`
	Status    int32  `thrift:"status,4" db:"status" json:"status"`
	Cursor    int32  `thrift:"cursor,5" db:"cursor" json:"cursor"`
	Limit     int32  `thrift:"limit,6" db:"limit" json:"limit"`
}

func NewUserInfoServiceGetSuspectedTPAccountArgs() *UserInfoServiceGetSuspectedTPAccountArgs {
	return &UserInfoServiceGetSuspectedTPAccountArgs{}
}

func (p *UserInfoServiceGetSuspectedTPAccountArgs) GetBeginTime() int32 {
	return p.BeginTime
}

func (p *UserInfoServiceGetSuspectedTPAccountArgs) GetEndTime() int32 {
	return p.EndTime
}

func (p *UserInfoServiceGetSuspectedTPAccountArgs) GetSourceId() string {
	return p.SourceId
}

func (p *UserInfoServiceGetSuspectedTPAccountArgs) GetStatus() int32 {
	return p.Status
}

func (p *UserInfoServiceGetSuspectedTPAccountArgs) GetCursor() int32 {
	return p.Cursor
}

func (p *UserInfoServiceGetSuspectedTPAccountArgs) GetLimit() int32 {
	return p.Limit
}
func (p *UserInfoServiceGetSuspectedTPAccountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetSuspectedTPAccountArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BeginTime = v
	}
	return nil
}

func (p *UserInfoServiceGetSuspectedTPAccountArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *UserInfoServiceGetSuspectedTPAccountArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SourceId = v
	}
	return nil
}

func (p *UserInfoServiceGetSuspectedTPAccountArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *UserInfoServiceGetSuspectedTPAccountArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Cursor = v
	}
	return nil
}

func (p *UserInfoServiceGetSuspectedTPAccountArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *UserInfoServiceGetSuspectedTPAccountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSuspectedTPAccount_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetSuspectedTPAccountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("beginTime", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:beginTime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.BeginTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.beginTime (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:beginTime: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetSuspectedTPAccountArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endTime", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:endTime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EndTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:endTime: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetSuspectedTPAccountArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceId", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sourceId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SourceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sourceId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sourceId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetSuspectedTPAccountArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetSuspectedTPAccountArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cursor", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:cursor: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Cursor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cursor (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:cursor: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetSuspectedTPAccountArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limit", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:limit: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Limit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limit (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:limit: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetSuspectedTPAccountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetSuspectedTPAccountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetSuspectedTPAccountResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetSuspectedTPAccountResult() *UserInfoServiceGetSuspectedTPAccountResult {
	return &UserInfoServiceGetSuspectedTPAccountResult{}
}

var UserInfoServiceGetSuspectedTPAccountResult_Success_DEFAULT string

func (p *UserInfoServiceGetSuspectedTPAccountResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetSuspectedTPAccountResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetSuspectedTPAccountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetSuspectedTPAccountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetSuspectedTPAccountResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetSuspectedTPAccountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSuspectedTPAccount_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetSuspectedTPAccountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetSuspectedTPAccountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetSuspectedTPAccountResult(%+v)", *p)
}

// Attributes:
//  - SourceId
//  - Type
type UserInfoServiceDisableSuspectedTPAccountArgs struct {
	SourceId string `thrift:"sourceId,1" db:"sourceId" json:"sourceId"`
	Type     int32  `thrift:"type,2" db:"type" json:"type"`
}

func NewUserInfoServiceDisableSuspectedTPAccountArgs() *UserInfoServiceDisableSuspectedTPAccountArgs {
	return &UserInfoServiceDisableSuspectedTPAccountArgs{}
}

func (p *UserInfoServiceDisableSuspectedTPAccountArgs) GetSourceId() string {
	return p.SourceId
}

func (p *UserInfoServiceDisableSuspectedTPAccountArgs) GetType() int32 {
	return p.Type
}
func (p *UserInfoServiceDisableSuspectedTPAccountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceDisableSuspectedTPAccountArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SourceId = v
	}
	return nil
}

func (p *UserInfoServiceDisableSuspectedTPAccountArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceDisableSuspectedTPAccountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("disableSuspectedTPAccount_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceDisableSuspectedTPAccountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sourceId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SourceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sourceId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sourceId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceDisableSuspectedTPAccountArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceDisableSuspectedTPAccountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceDisableSuspectedTPAccountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceDisableSuspectedTPAccountResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceDisableSuspectedTPAccountResult() *UserInfoServiceDisableSuspectedTPAccountResult {
	return &UserInfoServiceDisableSuspectedTPAccountResult{}
}

var UserInfoServiceDisableSuspectedTPAccountResult_Success_DEFAULT string

func (p *UserInfoServiceDisableSuspectedTPAccountResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceDisableSuspectedTPAccountResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceDisableSuspectedTPAccountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceDisableSuspectedTPAccountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceDisableSuspectedTPAccountResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceDisableSuspectedTPAccountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("disableSuspectedTPAccount_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceDisableSuspectedTPAccountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceDisableSuspectedTPAccountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceDisableSuspectedTPAccountResult(%+v)", *p)
}

// Attributes:
//  - SourceId
//  - Type
type UserInfoServiceEnableSuspectedTPAccountArgs struct {
	SourceId string `thrift:"sourceId,1" db:"sourceId" json:"sourceId"`
	Type     int32  `thrift:"type,2" db:"type" json:"type"`
}

func NewUserInfoServiceEnableSuspectedTPAccountArgs() *UserInfoServiceEnableSuspectedTPAccountArgs {
	return &UserInfoServiceEnableSuspectedTPAccountArgs{}
}

func (p *UserInfoServiceEnableSuspectedTPAccountArgs) GetSourceId() string {
	return p.SourceId
}

func (p *UserInfoServiceEnableSuspectedTPAccountArgs) GetType() int32 {
	return p.Type
}
func (p *UserInfoServiceEnableSuspectedTPAccountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceEnableSuspectedTPAccountArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SourceId = v
	}
	return nil
}

func (p *UserInfoServiceEnableSuspectedTPAccountArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceEnableSuspectedTPAccountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("enableSuspectedTPAccount_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceEnableSuspectedTPAccountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sourceId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SourceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sourceId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sourceId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceEnableSuspectedTPAccountArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceEnableSuspectedTPAccountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceEnableSuspectedTPAccountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceEnableSuspectedTPAccountResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceEnableSuspectedTPAccountResult() *UserInfoServiceEnableSuspectedTPAccountResult {
	return &UserInfoServiceEnableSuspectedTPAccountResult{}
}

var UserInfoServiceEnableSuspectedTPAccountResult_Success_DEFAULT string

func (p *UserInfoServiceEnableSuspectedTPAccountResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceEnableSuspectedTPAccountResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceEnableSuspectedTPAccountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceEnableSuspectedTPAccountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceEnableSuspectedTPAccountResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceEnableSuspectedTPAccountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("enableSuspectedTPAccount_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceEnableSuspectedTPAccountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceEnableSuspectedTPAccountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceEnableSuspectedTPAccountResult(%+v)", *p)
}

// Attributes:
//  - SourceId
//  - Type
type UserInfoServiceGetCreatedAccountsArgs struct {
	SourceId string `thrift:"sourceId,1" db:"sourceId" json:"sourceId"`
	Type     int32  `thrift:"type,2" db:"type" json:"type"`
}

func NewUserInfoServiceGetCreatedAccountsArgs() *UserInfoServiceGetCreatedAccountsArgs {
	return &UserInfoServiceGetCreatedAccountsArgs{}
}

func (p *UserInfoServiceGetCreatedAccountsArgs) GetSourceId() string {
	return p.SourceId
}

func (p *UserInfoServiceGetCreatedAccountsArgs) GetType() int32 {
	return p.Type
}
func (p *UserInfoServiceGetCreatedAccountsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetCreatedAccountsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SourceId = v
	}
	return nil
}

func (p *UserInfoServiceGetCreatedAccountsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceGetCreatedAccountsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCreatedAccounts_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetCreatedAccountsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sourceId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SourceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sourceId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sourceId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetCreatedAccountsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetCreatedAccountsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetCreatedAccountsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetCreatedAccountsResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetCreatedAccountsResult() *UserInfoServiceGetCreatedAccountsResult {
	return &UserInfoServiceGetCreatedAccountsResult{}
}

var UserInfoServiceGetCreatedAccountsResult_Success_DEFAULT string

func (p *UserInfoServiceGetCreatedAccountsResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetCreatedAccountsResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetCreatedAccountsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetCreatedAccountsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetCreatedAccountsResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetCreatedAccountsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCreatedAccounts_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetCreatedAccountsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetCreatedAccountsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetCreatedAccountsResult(%+v)", *p)
}

// Attributes:
//  - BeginTime
//  - EndTime
//  - Status
//  - Cursor
//  - Limit
type UserInfoServiceGetWhitelistTPAccountsArgs struct {
	BeginTime int32 `thrift:"beginTime,1" db:"beginTime" json:"beginTime"`
	EndTime   int32 `thrift:"endTime,2" db:"endTime" json:"endTime"`
	Status    int32 `thrift:"status,3" db:"status" json:"status"`
	Cursor    int32 `thrift:"cursor,4" db:"cursor" json:"cursor"`
	Limit     int32 `thrift:"limit,5" db:"limit" json:"limit"`
}

func NewUserInfoServiceGetWhitelistTPAccountsArgs() *UserInfoServiceGetWhitelistTPAccountsArgs {
	return &UserInfoServiceGetWhitelistTPAccountsArgs{}
}

func (p *UserInfoServiceGetWhitelistTPAccountsArgs) GetBeginTime() int32 {
	return p.BeginTime
}

func (p *UserInfoServiceGetWhitelistTPAccountsArgs) GetEndTime() int32 {
	return p.EndTime
}

func (p *UserInfoServiceGetWhitelistTPAccountsArgs) GetStatus() int32 {
	return p.Status
}

func (p *UserInfoServiceGetWhitelistTPAccountsArgs) GetCursor() int32 {
	return p.Cursor
}

func (p *UserInfoServiceGetWhitelistTPAccountsArgs) GetLimit() int32 {
	return p.Limit
}
func (p *UserInfoServiceGetWhitelistTPAccountsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetWhitelistTPAccountsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BeginTime = v
	}
	return nil
}

func (p *UserInfoServiceGetWhitelistTPAccountsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *UserInfoServiceGetWhitelistTPAccountsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *UserInfoServiceGetWhitelistTPAccountsArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Cursor = v
	}
	return nil
}

func (p *UserInfoServiceGetWhitelistTPAccountsArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *UserInfoServiceGetWhitelistTPAccountsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getWhitelistTPAccounts_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetWhitelistTPAccountsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("beginTime", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:beginTime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.BeginTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.beginTime (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:beginTime: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetWhitelistTPAccountsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endTime", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:endTime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EndTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:endTime: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetWhitelistTPAccountsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetWhitelistTPAccountsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cursor", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:cursor: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Cursor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cursor (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:cursor: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetWhitelistTPAccountsArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limit", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:limit: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Limit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limit (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:limit: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetWhitelistTPAccountsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetWhitelistTPAccountsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetWhitelistTPAccountsResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetWhitelistTPAccountsResult() *UserInfoServiceGetWhitelistTPAccountsResult {
	return &UserInfoServiceGetWhitelistTPAccountsResult{}
}

var UserInfoServiceGetWhitelistTPAccountsResult_Success_DEFAULT string

func (p *UserInfoServiceGetWhitelistTPAccountsResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetWhitelistTPAccountsResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetWhitelistTPAccountsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetWhitelistTPAccountsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetWhitelistTPAccountsResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetWhitelistTPAccountsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getWhitelistTPAccounts_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetWhitelistTPAccountsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetWhitelistTPAccountsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetWhitelistTPAccountsResult(%+v)", *p)
}

// Attributes:
//  - Number
type UserInfoServiceAddWhitelistTPAccountByNumberArgs struct {
	Number string `thrift:"number,1" db:"number" json:"number"`
}

func NewUserInfoServiceAddWhitelistTPAccountByNumberArgs() *UserInfoServiceAddWhitelistTPAccountByNumberArgs {
	return &UserInfoServiceAddWhitelistTPAccountByNumberArgs{}
}

func (p *UserInfoServiceAddWhitelistTPAccountByNumberArgs) GetNumber() string {
	return p.Number
}
func (p *UserInfoServiceAddWhitelistTPAccountByNumberArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceAddWhitelistTPAccountByNumberArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Number = v
	}
	return nil
}

func (p *UserInfoServiceAddWhitelistTPAccountByNumberArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addWhitelistTPAccountByNumber_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceAddWhitelistTPAccountByNumberArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("number", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:number: ", p), err)
	}
	if err := oprot.WriteString(string(p.Number)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.number (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:number: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAddWhitelistTPAccountByNumberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceAddWhitelistTPAccountByNumberArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceAddWhitelistTPAccountByNumberResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceAddWhitelistTPAccountByNumberResult() *UserInfoServiceAddWhitelistTPAccountByNumberResult {
	return &UserInfoServiceAddWhitelistTPAccountByNumberResult{}
}

var UserInfoServiceAddWhitelistTPAccountByNumberResult_Success_DEFAULT string

func (p *UserInfoServiceAddWhitelistTPAccountByNumberResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceAddWhitelistTPAccountByNumberResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceAddWhitelistTPAccountByNumberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceAddWhitelistTPAccountByNumberResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceAddWhitelistTPAccountByNumberResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceAddWhitelistTPAccountByNumberResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addWhitelistTPAccountByNumber_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceAddWhitelistTPAccountByNumberResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceAddWhitelistTPAccountByNumberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceAddWhitelistTPAccountByNumberResult(%+v)", *p)
}

// Attributes:
//  - SourceId
//  - Type
type UserInfoServiceAddWhitelistTPAccountBySourceIdArgs struct {
	SourceId string `thrift:"sourceId,1" db:"sourceId" json:"sourceId"`
	Type     int32  `thrift:"type,2" db:"type" json:"type"`
}

func NewUserInfoServiceAddWhitelistTPAccountBySourceIdArgs() *UserInfoServiceAddWhitelistTPAccountBySourceIdArgs {
	return &UserInfoServiceAddWhitelistTPAccountBySourceIdArgs{}
}

func (p *UserInfoServiceAddWhitelistTPAccountBySourceIdArgs) GetSourceId() string {
	return p.SourceId
}

func (p *UserInfoServiceAddWhitelistTPAccountBySourceIdArgs) GetType() int32 {
	return p.Type
}
func (p *UserInfoServiceAddWhitelistTPAccountBySourceIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceAddWhitelistTPAccountBySourceIdArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SourceId = v
	}
	return nil
}

func (p *UserInfoServiceAddWhitelistTPAccountBySourceIdArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceAddWhitelistTPAccountBySourceIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addWhitelistTPAccountBySourceId_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceAddWhitelistTPAccountBySourceIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sourceId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SourceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sourceId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sourceId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAddWhitelistTPAccountBySourceIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAddWhitelistTPAccountBySourceIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceAddWhitelistTPAccountBySourceIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceAddWhitelistTPAccountBySourceIdResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceAddWhitelistTPAccountBySourceIdResult() *UserInfoServiceAddWhitelistTPAccountBySourceIdResult {
	return &UserInfoServiceAddWhitelistTPAccountBySourceIdResult{}
}

var UserInfoServiceAddWhitelistTPAccountBySourceIdResult_Success_DEFAULT string

func (p *UserInfoServiceAddWhitelistTPAccountBySourceIdResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceAddWhitelistTPAccountBySourceIdResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceAddWhitelistTPAccountBySourceIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceAddWhitelistTPAccountBySourceIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceAddWhitelistTPAccountBySourceIdResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceAddWhitelistTPAccountBySourceIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addWhitelistTPAccountBySourceId_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceAddWhitelistTPAccountBySourceIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceAddWhitelistTPAccountBySourceIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceAddWhitelistTPAccountBySourceIdResult(%+v)", *p)
}

// Attributes:
//  - SourceId
//  - Type
type UserInfoServiceDisableWhitelistTPAccountArgs struct {
	SourceId string `thrift:"sourceId,1" db:"sourceId" json:"sourceId"`
	Type     int32  `thrift:"type,2" db:"type" json:"type"`
}

func NewUserInfoServiceDisableWhitelistTPAccountArgs() *UserInfoServiceDisableWhitelistTPAccountArgs {
	return &UserInfoServiceDisableWhitelistTPAccountArgs{}
}

func (p *UserInfoServiceDisableWhitelistTPAccountArgs) GetSourceId() string {
	return p.SourceId
}

func (p *UserInfoServiceDisableWhitelistTPAccountArgs) GetType() int32 {
	return p.Type
}
func (p *UserInfoServiceDisableWhitelistTPAccountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceDisableWhitelistTPAccountArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SourceId = v
	}
	return nil
}

func (p *UserInfoServiceDisableWhitelistTPAccountArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceDisableWhitelistTPAccountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("disableWhitelistTPAccount_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceDisableWhitelistTPAccountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sourceId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SourceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sourceId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sourceId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceDisableWhitelistTPAccountArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceDisableWhitelistTPAccountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceDisableWhitelistTPAccountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceDisableWhitelistTPAccountResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceDisableWhitelistTPAccountResult() *UserInfoServiceDisableWhitelistTPAccountResult {
	return &UserInfoServiceDisableWhitelistTPAccountResult{}
}

var UserInfoServiceDisableWhitelistTPAccountResult_Success_DEFAULT string

func (p *UserInfoServiceDisableWhitelistTPAccountResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceDisableWhitelistTPAccountResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceDisableWhitelistTPAccountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceDisableWhitelistTPAccountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceDisableWhitelistTPAccountResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceDisableWhitelistTPAccountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("disableWhitelistTPAccount_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceDisableWhitelistTPAccountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceDisableWhitelistTPAccountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceDisableWhitelistTPAccountResult(%+v)", *p)
}

// Attributes:
//  - SourceId
//  - Type
type UserInfoServiceEnableWhitelistTPAccountArgs struct {
	SourceId string `thrift:"sourceId,1" db:"sourceId" json:"sourceId"`
	Type     int32  `thrift:"type,2" db:"type" json:"type"`
}

func NewUserInfoServiceEnableWhitelistTPAccountArgs() *UserInfoServiceEnableWhitelistTPAccountArgs {
	return &UserInfoServiceEnableWhitelistTPAccountArgs{}
}

func (p *UserInfoServiceEnableWhitelistTPAccountArgs) GetSourceId() string {
	return p.SourceId
}

func (p *UserInfoServiceEnableWhitelistTPAccountArgs) GetType() int32 {
	return p.Type
}
func (p *UserInfoServiceEnableWhitelistTPAccountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceEnableWhitelistTPAccountArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SourceId = v
	}
	return nil
}

func (p *UserInfoServiceEnableWhitelistTPAccountArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceEnableWhitelistTPAccountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("enableWhitelistTPAccount_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceEnableWhitelistTPAccountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sourceId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SourceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sourceId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sourceId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceEnableWhitelistTPAccountArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceEnableWhitelistTPAccountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceEnableWhitelistTPAccountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceEnableWhitelistTPAccountResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceEnableWhitelistTPAccountResult() *UserInfoServiceEnableWhitelistTPAccountResult {
	return &UserInfoServiceEnableWhitelistTPAccountResult{}
}

var UserInfoServiceEnableWhitelistTPAccountResult_Success_DEFAULT string

func (p *UserInfoServiceEnableWhitelistTPAccountResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceEnableWhitelistTPAccountResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceEnableWhitelistTPAccountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceEnableWhitelistTPAccountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceEnableWhitelistTPAccountResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceEnableWhitelistTPAccountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("enableWhitelistTPAccount_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceEnableWhitelistTPAccountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceEnableWhitelistTPAccountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceEnableWhitelistTPAccountResult(%+v)", *p)
}

// Attributes:
//  - BeginTime
//  - EndTime
//  - Status
type UserInfoServiceCountSuspectedTPAccountArgs struct {
	BeginTime int32 `thrift:"beginTime,1" db:"beginTime" json:"beginTime"`
	EndTime   int32 `thrift:"endTime,2" db:"endTime" json:"endTime"`
	Status    int32 `thrift:"status,3" db:"status" json:"status"`
}

func NewUserInfoServiceCountSuspectedTPAccountArgs() *UserInfoServiceCountSuspectedTPAccountArgs {
	return &UserInfoServiceCountSuspectedTPAccountArgs{}
}

func (p *UserInfoServiceCountSuspectedTPAccountArgs) GetBeginTime() int32 {
	return p.BeginTime
}

func (p *UserInfoServiceCountSuspectedTPAccountArgs) GetEndTime() int32 {
	return p.EndTime
}

func (p *UserInfoServiceCountSuspectedTPAccountArgs) GetStatus() int32 {
	return p.Status
}
func (p *UserInfoServiceCountSuspectedTPAccountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceCountSuspectedTPAccountArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BeginTime = v
	}
	return nil
}

func (p *UserInfoServiceCountSuspectedTPAccountArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *UserInfoServiceCountSuspectedTPAccountArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *UserInfoServiceCountSuspectedTPAccountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("countSuspectedTPAccount_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceCountSuspectedTPAccountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("beginTime", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:beginTime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.BeginTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.beginTime (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:beginTime: ", p), err)
	}
	return err
}

func (p *UserInfoServiceCountSuspectedTPAccountArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endTime", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:endTime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EndTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:endTime: ", p), err)
	}
	return err
}

func (p *UserInfoServiceCountSuspectedTPAccountArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err)
	}
	return err
}

func (p *UserInfoServiceCountSuspectedTPAccountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceCountSuspectedTPAccountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceCountSuspectedTPAccountResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceCountSuspectedTPAccountResult() *UserInfoServiceCountSuspectedTPAccountResult {
	return &UserInfoServiceCountSuspectedTPAccountResult{}
}

var UserInfoServiceCountSuspectedTPAccountResult_Success_DEFAULT string

func (p *UserInfoServiceCountSuspectedTPAccountResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceCountSuspectedTPAccountResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceCountSuspectedTPAccountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceCountSuspectedTPAccountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceCountSuspectedTPAccountResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceCountSuspectedTPAccountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("countSuspectedTPAccount_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceCountSuspectedTPAccountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceCountSuspectedTPAccountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceCountSuspectedTPAccountResult(%+v)", *p)
}

// Attributes:
//  - BeginTime
//  - EndTime
//  - Status
type UserInfoServiceCountWhitelistTPAccountsArgs struct {
	BeginTime int32 `thrift:"beginTime,1" db:"beginTime" json:"beginTime"`
	EndTime   int32 `thrift:"endTime,2" db:"endTime" json:"endTime"`
	Status    int32 `thrift:"status,3" db:"status" json:"status"`
}

func NewUserInfoServiceCountWhitelistTPAccountsArgs() *UserInfoServiceCountWhitelistTPAccountsArgs {
	return &UserInfoServiceCountWhitelistTPAccountsArgs{}
}

func (p *UserInfoServiceCountWhitelistTPAccountsArgs) GetBeginTime() int32 {
	return p.BeginTime
}

func (p *UserInfoServiceCountWhitelistTPAccountsArgs) GetEndTime() int32 {
	return p.EndTime
}

func (p *UserInfoServiceCountWhitelistTPAccountsArgs) GetStatus() int32 {
	return p.Status
}
func (p *UserInfoServiceCountWhitelistTPAccountsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceCountWhitelistTPAccountsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BeginTime = v
	}
	return nil
}

func (p *UserInfoServiceCountWhitelistTPAccountsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *UserInfoServiceCountWhitelistTPAccountsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *UserInfoServiceCountWhitelistTPAccountsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("countWhitelistTPAccounts_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceCountWhitelistTPAccountsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("beginTime", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:beginTime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.BeginTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.beginTime (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:beginTime: ", p), err)
	}
	return err
}

func (p *UserInfoServiceCountWhitelistTPAccountsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endTime", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:endTime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EndTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:endTime: ", p), err)
	}
	return err
}

func (p *UserInfoServiceCountWhitelistTPAccountsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err)
	}
	return err
}

func (p *UserInfoServiceCountWhitelistTPAccountsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceCountWhitelistTPAccountsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceCountWhitelistTPAccountsResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceCountWhitelistTPAccountsResult() *UserInfoServiceCountWhitelistTPAccountsResult {
	return &UserInfoServiceCountWhitelistTPAccountsResult{}
}

var UserInfoServiceCountWhitelistTPAccountsResult_Success_DEFAULT string

func (p *UserInfoServiceCountWhitelistTPAccountsResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceCountWhitelistTPAccountsResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceCountWhitelistTPAccountsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceCountWhitelistTPAccountsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceCountWhitelistTPAccountsResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceCountWhitelistTPAccountsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("countWhitelistTPAccounts_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceCountWhitelistTPAccountsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceCountWhitelistTPAccountsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceCountWhitelistTPAccountsResult(%+v)", *p)
}

// Attributes:
//  - SourceId
//  - Type
type UserInfoServiceCountCreatedAccountsArgs struct {
	SourceId string `thrift:"sourceId,1" db:"sourceId" json:"sourceId"`
	Type     int32  `thrift:"type,2" db:"type" json:"type"`
}

func NewUserInfoServiceCountCreatedAccountsArgs() *UserInfoServiceCountCreatedAccountsArgs {
	return &UserInfoServiceCountCreatedAccountsArgs{}
}

func (p *UserInfoServiceCountCreatedAccountsArgs) GetSourceId() string {
	return p.SourceId
}

func (p *UserInfoServiceCountCreatedAccountsArgs) GetType() int32 {
	return p.Type
}
func (p *UserInfoServiceCountCreatedAccountsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceCountCreatedAccountsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SourceId = v
	}
	return nil
}

func (p *UserInfoServiceCountCreatedAccountsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceCountCreatedAccountsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("countCreatedAccounts_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceCountCreatedAccountsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sourceId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SourceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sourceId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sourceId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceCountCreatedAccountsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceCountCreatedAccountsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceCountCreatedAccountsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceCountCreatedAccountsResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceCountCreatedAccountsResult() *UserInfoServiceCountCreatedAccountsResult {
	return &UserInfoServiceCountCreatedAccountsResult{}
}

var UserInfoServiceCountCreatedAccountsResult_Success_DEFAULT string

func (p *UserInfoServiceCountCreatedAccountsResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceCountCreatedAccountsResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceCountCreatedAccountsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceCountCreatedAccountsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceCountCreatedAccountsResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceCountCreatedAccountsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("countCreatedAccounts_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceCountCreatedAccountsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceCountCreatedAccountsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceCountCreatedAccountsResult(%+v)", *p)
}

// Attributes:
//  - UserId
type UserInfoServiceUpdateTokenArgs struct {
	UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewUserInfoServiceUpdateTokenArgs() *UserInfoServiceUpdateTokenArgs {
	return &UserInfoServiceUpdateTokenArgs{}
}

func (p *UserInfoServiceUpdateTokenArgs) GetUserId() int64 {
	return p.UserId
}
func (p *UserInfoServiceUpdateTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceUpdateTokenArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceUpdateTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateToken_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceUpdateTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceUpdateTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceUpdateTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceUpdateTokenResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceUpdateTokenResult() *UserInfoServiceUpdateTokenResult {
	return &UserInfoServiceUpdateTokenResult{}
}

var UserInfoServiceUpdateTokenResult_Success_DEFAULT string

func (p *UserInfoServiceUpdateTokenResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceUpdateTokenResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceUpdateTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceUpdateTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceUpdateTokenResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceUpdateTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateToken_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceUpdateTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceUpdateTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceUpdateTokenResult(%+v)", *p)
}

// Attributes:
//  - UserId
type UserInfoServiceGetIsDownloadInArgs struct {
	UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewUserInfoServiceGetIsDownloadInArgs() *UserInfoServiceGetIsDownloadInArgs {
	return &UserInfoServiceGetIsDownloadInArgs{}
}

func (p *UserInfoServiceGetIsDownloadInArgs) GetUserId() int64 {
	return p.UserId
}
func (p *UserInfoServiceGetIsDownloadInArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetIsDownloadInArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceGetIsDownloadInArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getIsDownloadIn_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetIsDownloadInArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetIsDownloadInArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetIsDownloadInArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetIsDownloadInResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetIsDownloadInResult() *UserInfoServiceGetIsDownloadInResult {
	return &UserInfoServiceGetIsDownloadInResult{}
}

var UserInfoServiceGetIsDownloadInResult_Success_DEFAULT string

func (p *UserInfoServiceGetIsDownloadInResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetIsDownloadInResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetIsDownloadInResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetIsDownloadInResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetIsDownloadInResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetIsDownloadInResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getIsDownloadIn_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetIsDownloadInResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetIsDownloadInResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetIsDownloadInResult(%+v)", *p)
}

// Attributes:
//  - Type
//  - SourceID
//  - Info
type UserInfoServiceThirdPartyAccountRegisterH5Args struct {
	Type     int32  `thrift:"type,1" db:"type" json:"type"`
	SourceID string `thrift:"source_id,2" db:"source_id" json:"source_id"`
	Info     string `thrift:"info,3" db:"info" json:"info"`
}

func NewUserInfoServiceThirdPartyAccountRegisterH5Args() *UserInfoServiceThirdPartyAccountRegisterH5Args {
	return &UserInfoServiceThirdPartyAccountRegisterH5Args{}
}

func (p *UserInfoServiceThirdPartyAccountRegisterH5Args) GetType() int32 {
	return p.Type
}

func (p *UserInfoServiceThirdPartyAccountRegisterH5Args) GetSourceID() string {
	return p.SourceID
}

func (p *UserInfoServiceThirdPartyAccountRegisterH5Args) GetInfo() string {
	return p.Info
}
func (p *UserInfoServiceThirdPartyAccountRegisterH5Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountRegisterH5Args) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountRegisterH5Args) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SourceID = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountRegisterH5Args) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Info = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountRegisterH5Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("thirdPartyAccountRegisterH5_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountRegisterH5Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountRegisterH5Args) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source_id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:source_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.SourceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.source_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:source_id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountRegisterH5Args) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("info", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:info: ", p), err)
	}
	if err := oprot.WriteString(string(p.Info)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.info (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:info: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountRegisterH5Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceThirdPartyAccountRegisterH5Args(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceThirdPartyAccountRegisterH5Result struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceThirdPartyAccountRegisterH5Result() *UserInfoServiceThirdPartyAccountRegisterH5Result {
	return &UserInfoServiceThirdPartyAccountRegisterH5Result{}
}

var UserInfoServiceThirdPartyAccountRegisterH5Result_Success_DEFAULT string

func (p *UserInfoServiceThirdPartyAccountRegisterH5Result) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceThirdPartyAccountRegisterH5Result_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceThirdPartyAccountRegisterH5Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceThirdPartyAccountRegisterH5Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountRegisterH5Result) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountRegisterH5Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("thirdPartyAccountRegisterH5_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountRegisterH5Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountRegisterH5Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceThirdPartyAccountRegisterH5Result(%+v)", *p)
}

// Attributes:
//  - Type
//  - SourceId
//  - Info
type UserInfoServiceThirdPartyAccountLoginH5Args struct {
	Type     int32  `thrift:"type,1" db:"type" json:"type"`
	SourceId string `thrift:"sourceId,2" db:"sourceId" json:"sourceId"`
	Info     string `thrift:"info,3" db:"info" json:"info"`
}

func NewUserInfoServiceThirdPartyAccountLoginH5Args() *UserInfoServiceThirdPartyAccountLoginH5Args {
	return &UserInfoServiceThirdPartyAccountLoginH5Args{}
}

func (p *UserInfoServiceThirdPartyAccountLoginH5Args) GetType() int32 {
	return p.Type
}

func (p *UserInfoServiceThirdPartyAccountLoginH5Args) GetSourceId() string {
	return p.SourceId
}

func (p *UserInfoServiceThirdPartyAccountLoginH5Args) GetInfo() string {
	return p.Info
}
func (p *UserInfoServiceThirdPartyAccountLoginH5Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginH5Args) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginH5Args) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SourceId = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginH5Args) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Info = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginH5Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("thirdPartyAccountLoginH5_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginH5Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountLoginH5Args) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sourceId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SourceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sourceId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sourceId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountLoginH5Args) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("info", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:info: ", p), err)
	}
	if err := oprot.WriteString(string(p.Info)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.info (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:info: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountLoginH5Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceThirdPartyAccountLoginH5Args(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceThirdPartyAccountLoginH5Result struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceThirdPartyAccountLoginH5Result() *UserInfoServiceThirdPartyAccountLoginH5Result {
	return &UserInfoServiceThirdPartyAccountLoginH5Result{}
}

var UserInfoServiceThirdPartyAccountLoginH5Result_Success_DEFAULT string

func (p *UserInfoServiceThirdPartyAccountLoginH5Result) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceThirdPartyAccountLoginH5Result_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceThirdPartyAccountLoginH5Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceThirdPartyAccountLoginH5Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginH5Result) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginH5Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("thirdPartyAccountLoginH5_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginH5Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountLoginH5Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceThirdPartyAccountLoginH5Result(%+v)", *p)
}

// Attributes:
//  - Type
//  - SourceId
//  - Info
type UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatArgs struct {
	Type     int32  `thrift:"type,1" db:"type" json:"type"`
	SourceId string `thrift:"sourceId,2" db:"sourceId" json:"sourceId"`
	Info     string `thrift:"info,3" db:"info" json:"info"`
}

func NewUserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatArgs() *UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatArgs {
	return &UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatArgs{}
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatArgs) GetType() int32 {
	return p.Type
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatArgs) GetSourceId() string {
	return p.SourceId
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatArgs) GetInfo() string {
	return p.Info
}
func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SourceId = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Info = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("thirdPartyAccountLoginAndRegisterBananaChat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sourceId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SourceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sourceId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sourceId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("info", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:info: ", p), err)
	}
	if err := oprot.WriteString(string(p.Info)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.info (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:info: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatResult() *UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatResult {
	return &UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatResult{}
}

var UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatResult_Success_DEFAULT string

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("thirdPartyAccountLoginAndRegisterBananaChat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceThirdPartyAccountLoginAndRegisterBananaChatResult(%+v)", *p)
}

// Attributes:
//  - Type
//  - SourceId
//  - Info
//  - AppCode
type UserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs struct {
	Type     int32  `thrift:"type,1" db:"type" json:"type"`
	SourceId string `thrift:"sourceId,2" db:"sourceId" json:"sourceId"`
	Info     string `thrift:"info,3" db:"info" json:"info"`
	AppCode  string `thrift:"appCode,4" db:"appCode" json:"appCode"`
}

func NewUserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs() *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs {
	return &UserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs{}
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs) GetType() int32 {
	return p.Type
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs) GetSourceId() string {
	return p.SourceId
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs) GetInfo() string {
	return p.Info
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs) GetAppCode() string {
	return p.AppCode
}
func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SourceId = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Info = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AppCode = v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("thirdPartyAccountLoginAndRegisterByApp_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sourceId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SourceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sourceId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sourceId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("info", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:info: ", p), err)
	}
	if err := oprot.WriteString(string(p.Info)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.info (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:info: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appCode", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:appCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appCode (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:appCode: ", p), err)
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceThirdPartyAccountLoginAndRegisterByAppArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceThirdPartyAccountLoginAndRegisterByAppResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceThirdPartyAccountLoginAndRegisterByAppResult() *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppResult {
	return &UserInfoServiceThirdPartyAccountLoginAndRegisterByAppResult{}
}

var UserInfoServiceThirdPartyAccountLoginAndRegisterByAppResult_Success_DEFAULT string

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceThirdPartyAccountLoginAndRegisterByAppResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("thirdPartyAccountLoginAndRegisterByApp_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceThirdPartyAccountLoginAndRegisterByAppResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceThirdPartyAccountLoginAndRegisterByAppResult(%+v)", *p)
}

// Attributes:
//  - OldUserID
//  - Number
//  - Password
type UserInfoServiceMobileRegisterH5Args struct {
	OldUserID int64  `thrift:"old_user_id,1" db:"old_user_id" json:"old_user_id"`
	Number    string `thrift:"number,2" db:"number" json:"number"`
	Password  string `thrift:"password,3" db:"password" json:"password"`
}

func NewUserInfoServiceMobileRegisterH5Args() *UserInfoServiceMobileRegisterH5Args {
	return &UserInfoServiceMobileRegisterH5Args{}
}

func (p *UserInfoServiceMobileRegisterH5Args) GetOldUserID() int64 {
	return p.OldUserID
}

func (p *UserInfoServiceMobileRegisterH5Args) GetNumber() string {
	return p.Number
}

func (p *UserInfoServiceMobileRegisterH5Args) GetPassword() string {
	return p.Password
}
func (p *UserInfoServiceMobileRegisterH5Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterH5Args) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OldUserID = v
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterH5Args) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Number = v
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterH5Args) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterH5Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mobileRegisterH5_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterH5Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("old_user_id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:old_user_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OldUserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.old_user_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:old_user_id: ", p), err)
	}
	return err
}

func (p *UserInfoServiceMobileRegisterH5Args) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("number", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:number: ", p), err)
	}
	if err := oprot.WriteString(string(p.Number)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.number (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:number: ", p), err)
	}
	return err
}

func (p *UserInfoServiceMobileRegisterH5Args) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err)
	}
	return err
}

func (p *UserInfoServiceMobileRegisterH5Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceMobileRegisterH5Args(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceMobileRegisterH5Result struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceMobileRegisterH5Result() *UserInfoServiceMobileRegisterH5Result {
	return &UserInfoServiceMobileRegisterH5Result{}
}

var UserInfoServiceMobileRegisterH5Result_Success_DEFAULT string

func (p *UserInfoServiceMobileRegisterH5Result) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceMobileRegisterH5Result_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceMobileRegisterH5Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceMobileRegisterH5Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterH5Result) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterH5Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mobileRegisterH5_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterH5Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceMobileRegisterH5Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceMobileRegisterH5Result(%+v)", *p)
}

// Attributes:
//  - Number
//  - Password
type UserInfoServiceMobileRegisterBananaChatArgs struct {
	// unused field # 1
	Number   string `thrift:"number,2" db:"number" json:"number"`
	Password string `thrift:"password,3" db:"password" json:"password"`
}

func NewUserInfoServiceMobileRegisterBananaChatArgs() *UserInfoServiceMobileRegisterBananaChatArgs {
	return &UserInfoServiceMobileRegisterBananaChatArgs{}
}

func (p *UserInfoServiceMobileRegisterBananaChatArgs) GetNumber() string {
	return p.Number
}

func (p *UserInfoServiceMobileRegisterBananaChatArgs) GetPassword() string {
	return p.Password
}
func (p *UserInfoServiceMobileRegisterBananaChatArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterBananaChatArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Number = v
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterBananaChatArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterBananaChatArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mobileRegisterBananaChat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterBananaChatArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("number", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:number: ", p), err)
	}
	if err := oprot.WriteString(string(p.Number)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.number (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:number: ", p), err)
	}
	return err
}

func (p *UserInfoServiceMobileRegisterBananaChatArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err)
	}
	return err
}

func (p *UserInfoServiceMobileRegisterBananaChatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceMobileRegisterBananaChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceMobileRegisterBananaChatResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceMobileRegisterBananaChatResult() *UserInfoServiceMobileRegisterBananaChatResult {
	return &UserInfoServiceMobileRegisterBananaChatResult{}
}

var UserInfoServiceMobileRegisterBananaChatResult_Success_DEFAULT string

func (p *UserInfoServiceMobileRegisterBananaChatResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceMobileRegisterBananaChatResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceMobileRegisterBananaChatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceMobileRegisterBananaChatResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterBananaChatResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterBananaChatResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mobileRegisterBananaChat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterBananaChatResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceMobileRegisterBananaChatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceMobileRegisterBananaChatResult(%+v)", *p)
}

// Attributes:
//  - Number
//  - Password
//  - AppCode
type UserInfoServiceMobileRegisterByAppArgs struct {
	Number   string `thrift:"number,1" db:"number" json:"number"`
	Password string `thrift:"password,2" db:"password" json:"password"`
	AppCode  string `thrift:"appCode,3" db:"appCode" json:"appCode"`
}

func NewUserInfoServiceMobileRegisterByAppArgs() *UserInfoServiceMobileRegisterByAppArgs {
	return &UserInfoServiceMobileRegisterByAppArgs{}
}

func (p *UserInfoServiceMobileRegisterByAppArgs) GetNumber() string {
	return p.Number
}

func (p *UserInfoServiceMobileRegisterByAppArgs) GetPassword() string {
	return p.Password
}

func (p *UserInfoServiceMobileRegisterByAppArgs) GetAppCode() string {
	return p.AppCode
}
func (p *UserInfoServiceMobileRegisterByAppArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterByAppArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Number = v
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterByAppArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterByAppArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AppCode = v
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterByAppArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mobileRegisterByApp_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterByAppArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("number", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:number: ", p), err)
	}
	if err := oprot.WriteString(string(p.Number)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.number (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:number: ", p), err)
	}
	return err
}

func (p *UserInfoServiceMobileRegisterByAppArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:password: ", p), err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:password: ", p), err)
	}
	return err
}

func (p *UserInfoServiceMobileRegisterByAppArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appCode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appCode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appCode: ", p), err)
	}
	return err
}

func (p *UserInfoServiceMobileRegisterByAppArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceMobileRegisterByAppArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceMobileRegisterByAppResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceMobileRegisterByAppResult() *UserInfoServiceMobileRegisterByAppResult {
	return &UserInfoServiceMobileRegisterByAppResult{}
}

var UserInfoServiceMobileRegisterByAppResult_Success_DEFAULT string

func (p *UserInfoServiceMobileRegisterByAppResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceMobileRegisterByAppResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceMobileRegisterByAppResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceMobileRegisterByAppResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterByAppResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterByAppResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mobileRegisterByApp_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceMobileRegisterByAppResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceMobileRegisterByAppResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceMobileRegisterByAppResult(%+v)", *p)
}

// Attributes:
//  - Type
//  - UserName
//  - Password
type UserInfoServiceAuthPasswordLoginH5Args struct {
	Type     int32  `thrift:"type,1" db:"type" json:"type"`
	UserName string `thrift:"userName,2" db:"userName" json:"userName"`
	Password string `thrift:"password,3" db:"password" json:"password"`
}

func NewUserInfoServiceAuthPasswordLoginH5Args() *UserInfoServiceAuthPasswordLoginH5Args {
	return &UserInfoServiceAuthPasswordLoginH5Args{}
}

func (p *UserInfoServiceAuthPasswordLoginH5Args) GetType() int32 {
	return p.Type
}

func (p *UserInfoServiceAuthPasswordLoginH5Args) GetUserName() string {
	return p.UserName
}

func (p *UserInfoServiceAuthPasswordLoginH5Args) GetPassword() string {
	return p.Password
}
func (p *UserInfoServiceAuthPasswordLoginH5Args) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginH5Args) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginH5Args) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginH5Args) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginH5Args) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("authPasswordLoginH5_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginH5Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginH5Args) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userName: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userName: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginH5Args) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginH5Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceAuthPasswordLoginH5Args(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceAuthPasswordLoginH5Result struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceAuthPasswordLoginH5Result() *UserInfoServiceAuthPasswordLoginH5Result {
	return &UserInfoServiceAuthPasswordLoginH5Result{}
}

var UserInfoServiceAuthPasswordLoginH5Result_Success_DEFAULT string

func (p *UserInfoServiceAuthPasswordLoginH5Result) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceAuthPasswordLoginH5Result_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceAuthPasswordLoginH5Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceAuthPasswordLoginH5Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginH5Result) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginH5Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("authPasswordLoginH5_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginH5Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginH5Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceAuthPasswordLoginH5Result(%+v)", *p)
}

// Attributes:
//  - Type
//  - UserName
//  - Password
type UserInfoServiceAuthPasswordLoginBananaChatArgs struct {
	Type     int32  `thrift:"type,1" db:"type" json:"type"`
	UserName string `thrift:"userName,2" db:"userName" json:"userName"`
	Password string `thrift:"password,3" db:"password" json:"password"`
}

func NewUserInfoServiceAuthPasswordLoginBananaChatArgs() *UserInfoServiceAuthPasswordLoginBananaChatArgs {
	return &UserInfoServiceAuthPasswordLoginBananaChatArgs{}
}

func (p *UserInfoServiceAuthPasswordLoginBananaChatArgs) GetType() int32 {
	return p.Type
}

func (p *UserInfoServiceAuthPasswordLoginBananaChatArgs) GetUserName() string {
	return p.UserName
}

func (p *UserInfoServiceAuthPasswordLoginBananaChatArgs) GetPassword() string {
	return p.Password
}
func (p *UserInfoServiceAuthPasswordLoginBananaChatArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginBananaChatArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginBananaChatArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginBananaChatArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginBananaChatArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("authPasswordLoginBananaChat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginBananaChatArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginBananaChatArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userName: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userName: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginBananaChatArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginBananaChatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceAuthPasswordLoginBananaChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceAuthPasswordLoginBananaChatResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceAuthPasswordLoginBananaChatResult() *UserInfoServiceAuthPasswordLoginBananaChatResult {
	return &UserInfoServiceAuthPasswordLoginBananaChatResult{}
}

var UserInfoServiceAuthPasswordLoginBananaChatResult_Success_DEFAULT string

func (p *UserInfoServiceAuthPasswordLoginBananaChatResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceAuthPasswordLoginBananaChatResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceAuthPasswordLoginBananaChatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceAuthPasswordLoginBananaChatResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginBananaChatResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginBananaChatResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("authPasswordLoginBananaChat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginBananaChatResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginBananaChatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceAuthPasswordLoginBananaChatResult(%+v)", *p)
}

// Attributes:
//  - Type
//  - UserName
//  - Password
//  - AppCode
type UserInfoServiceAuthPasswordLoginByAppArgs struct {
	Type     int32  `thrift:"type,1" db:"type" json:"type"`
	UserName string `thrift:"userName,2" db:"userName" json:"userName"`
	Password string `thrift:"password,3" db:"password" json:"password"`
	AppCode  string `thrift:"appCode,4" db:"appCode" json:"appCode"`
}

func NewUserInfoServiceAuthPasswordLoginByAppArgs() *UserInfoServiceAuthPasswordLoginByAppArgs {
	return &UserInfoServiceAuthPasswordLoginByAppArgs{}
}

func (p *UserInfoServiceAuthPasswordLoginByAppArgs) GetType() int32 {
	return p.Type
}

func (p *UserInfoServiceAuthPasswordLoginByAppArgs) GetUserName() string {
	return p.UserName
}

func (p *UserInfoServiceAuthPasswordLoginByAppArgs) GetPassword() string {
	return p.Password
}

func (p *UserInfoServiceAuthPasswordLoginByAppArgs) GetAppCode() string {
	return p.AppCode
}
func (p *UserInfoServiceAuthPasswordLoginByAppArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginByAppArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginByAppArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginByAppArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginByAppArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AppCode = v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginByAppArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("authPasswordLoginByApp_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginByAppArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginByAppArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userName: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userName: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginByAppArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginByAppArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appCode", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:appCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appCode (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:appCode: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginByAppArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceAuthPasswordLoginByAppArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceAuthPasswordLoginByAppResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceAuthPasswordLoginByAppResult() *UserInfoServiceAuthPasswordLoginByAppResult {
	return &UserInfoServiceAuthPasswordLoginByAppResult{}
}

var UserInfoServiceAuthPasswordLoginByAppResult_Success_DEFAULT string

func (p *UserInfoServiceAuthPasswordLoginByAppResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceAuthPasswordLoginByAppResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceAuthPasswordLoginByAppResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceAuthPasswordLoginByAppResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginByAppResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginByAppResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("authPasswordLoginByApp_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginByAppResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginByAppResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceAuthPasswordLoginByAppResult(%+v)", *p)
}

// Attributes:
//  - Type
//  - UserName
//  - Password
type UserInfoServiceAuthPasswordLoginOpenPlatformArgs struct {
	Type     int32  `thrift:"type,1" db:"type" json:"type"`
	UserName string `thrift:"userName,2" db:"userName" json:"userName"`
	Password string `thrift:"password,3" db:"password" json:"password"`
}

func NewUserInfoServiceAuthPasswordLoginOpenPlatformArgs() *UserInfoServiceAuthPasswordLoginOpenPlatformArgs {
	return &UserInfoServiceAuthPasswordLoginOpenPlatformArgs{}
}

func (p *UserInfoServiceAuthPasswordLoginOpenPlatformArgs) GetType() int32 {
	return p.Type
}

func (p *UserInfoServiceAuthPasswordLoginOpenPlatformArgs) GetUserName() string {
	return p.UserName
}

func (p *UserInfoServiceAuthPasswordLoginOpenPlatformArgs) GetPassword() string {
	return p.Password
}
func (p *UserInfoServiceAuthPasswordLoginOpenPlatformArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginOpenPlatformArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginOpenPlatformArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginOpenPlatformArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginOpenPlatformArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("authPasswordLoginOpenPlatform_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginOpenPlatformArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginOpenPlatformArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userName: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userName: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginOpenPlatformArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginOpenPlatformArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceAuthPasswordLoginOpenPlatformArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceAuthPasswordLoginOpenPlatformResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceAuthPasswordLoginOpenPlatformResult() *UserInfoServiceAuthPasswordLoginOpenPlatformResult {
	return &UserInfoServiceAuthPasswordLoginOpenPlatformResult{}
}

var UserInfoServiceAuthPasswordLoginOpenPlatformResult_Success_DEFAULT string

func (p *UserInfoServiceAuthPasswordLoginOpenPlatformResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceAuthPasswordLoginOpenPlatformResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceAuthPasswordLoginOpenPlatformResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceAuthPasswordLoginOpenPlatformResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginOpenPlatformResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginOpenPlatformResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("authPasswordLoginOpenPlatform_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceAuthPasswordLoginOpenPlatformResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceAuthPasswordLoginOpenPlatformResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceAuthPasswordLoginOpenPlatformResult(%+v)", *p)
}

// Attributes:
//  - UserId
//  - Info
//  - JsonProfileInfo
type UserInfoServiceUpdateProfileInfoArgs struct {
	UserId          int64             `thrift:"userId,1" db:"userId" json:"userId"`
	Info            map[string]string `thrift:"info,2" db:"info" json:"info"`
	JsonProfileInfo string            `thrift:"jsonProfileInfo,3" db:"jsonProfileInfo" json:"jsonProfileInfo"`
}

func NewUserInfoServiceUpdateProfileInfoArgs() *UserInfoServiceUpdateProfileInfoArgs {
	return &UserInfoServiceUpdateProfileInfoArgs{}
}

func (p *UserInfoServiceUpdateProfileInfoArgs) GetUserId() int64 {
	return p.UserId
}

func (p *UserInfoServiceUpdateProfileInfoArgs) GetInfo() map[string]string {
	return p.Info
}

func (p *UserInfoServiceUpdateProfileInfoArgs) GetJsonProfileInfo() string {
	return p.JsonProfileInfo
}
func (p *UserInfoServiceUpdateProfileInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceUpdateProfileInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceUpdateProfileInfoArgs) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Info = tMap
	for i := 0; i < size; i++ {
		var _key184 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key184 = v
		}
		var _val185 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val185 = v
		}
		p.Info[_key184] = _val185
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserInfoServiceUpdateProfileInfoArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.JsonProfileInfo = v
	}
	return nil
}

func (p *UserInfoServiceUpdateProfileInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateProfileInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceUpdateProfileInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceUpdateProfileInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("info", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Info)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Info {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err)
	}
	return err
}

func (p *UserInfoServiceUpdateProfileInfoArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("jsonProfileInfo", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:jsonProfileInfo: ", p), err)
	}
	if err := oprot.WriteString(string(p.JsonProfileInfo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.jsonProfileInfo (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:jsonProfileInfo: ", p), err)
	}
	return err
}

func (p *UserInfoServiceUpdateProfileInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceUpdateProfileInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceUpdateProfileInfoResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceUpdateProfileInfoResult() *UserInfoServiceUpdateProfileInfoResult {
	return &UserInfoServiceUpdateProfileInfoResult{}
}

var UserInfoServiceUpdateProfileInfoResult_Success_DEFAULT string

func (p *UserInfoServiceUpdateProfileInfoResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceUpdateProfileInfoResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceUpdateProfileInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceUpdateProfileInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceUpdateProfileInfoResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceUpdateProfileInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateProfileInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceUpdateProfileInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceUpdateProfileInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceUpdateProfileInfoResult(%+v)", *p)
}

// Attributes:
//  - UserId
type UserInfoServiceGetUserProfileInfoByIdArgs struct {
	UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewUserInfoServiceGetUserProfileInfoByIdArgs() *UserInfoServiceGetUserProfileInfoByIdArgs {
	return &UserInfoServiceGetUserProfileInfoByIdArgs{}
}

func (p *UserInfoServiceGetUserProfileInfoByIdArgs) GetUserId() int64 {
	return p.UserId
}
func (p *UserInfoServiceGetUserProfileInfoByIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserProfileInfoByIdArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceGetUserProfileInfoByIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserProfileInfoById_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserProfileInfoByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserProfileInfoByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserProfileInfoByIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetUserProfileInfoByIdResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetUserProfileInfoByIdResult() *UserInfoServiceGetUserProfileInfoByIdResult {
	return &UserInfoServiceGetUserProfileInfoByIdResult{}
}

var UserInfoServiceGetUserProfileInfoByIdResult_Success_DEFAULT string

func (p *UserInfoServiceGetUserProfileInfoByIdResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetUserProfileInfoByIdResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetUserProfileInfoByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetUserProfileInfoByIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserProfileInfoByIdResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetUserProfileInfoByIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserProfileInfoById_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserProfileInfoByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetUserProfileInfoByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserProfileInfoByIdResult(%+v)", *p)
}

// Attributes:
//  - Type
//  - Province
//  - City
//  - Name
//  - Offset
//  - Limit
type UserInfoServiceGetSchoolDictionaryArgs struct {
	Type     int32  `thrift:"type,1" db:"type" json:"type"`
	Province int32  `thrift:"province,2" db:"province" json:"province"`
	City     int32  `thrift:"city,3" db:"city" json:"city"`
	Name     string `thrift:"name,4" db:"name" json:"name"`
	Offset   int32  `thrift:"offset,5" db:"offset" json:"offset"`
	Limit    int32  `thrift:"limit,6" db:"limit" json:"limit"`
}

func NewUserInfoServiceGetSchoolDictionaryArgs() *UserInfoServiceGetSchoolDictionaryArgs {
	return &UserInfoServiceGetSchoolDictionaryArgs{}
}

func (p *UserInfoServiceGetSchoolDictionaryArgs) GetType() int32 {
	return p.Type
}

func (p *UserInfoServiceGetSchoolDictionaryArgs) GetProvince() int32 {
	return p.Province
}

func (p *UserInfoServiceGetSchoolDictionaryArgs) GetCity() int32 {
	return p.City
}

func (p *UserInfoServiceGetSchoolDictionaryArgs) GetName() string {
	return p.Name
}

func (p *UserInfoServiceGetSchoolDictionaryArgs) GetOffset() int32 {
	return p.Offset
}

func (p *UserInfoServiceGetSchoolDictionaryArgs) GetLimit() int32 {
	return p.Limit
}
func (p *UserInfoServiceGetSchoolDictionaryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetSchoolDictionaryArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *UserInfoServiceGetSchoolDictionaryArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Province = v
	}
	return nil
}

func (p *UserInfoServiceGetSchoolDictionaryArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.City = v
	}
	return nil
}

func (p *UserInfoServiceGetSchoolDictionaryArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *UserInfoServiceGetSchoolDictionaryArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Offset = v
	}
	return nil
}

func (p *UserInfoServiceGetSchoolDictionaryArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *UserInfoServiceGetSchoolDictionaryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSchoolDictionary_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetSchoolDictionaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetSchoolDictionaryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("province", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:province: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Province)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.province (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:province: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetSchoolDictionaryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("city", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:city: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.City)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.city (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:city: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetSchoolDictionaryArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:name: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetSchoolDictionaryArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offset", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:offset: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Offset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.offset (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:offset: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetSchoolDictionaryArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limit", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:limit: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Limit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limit (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:limit: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetSchoolDictionaryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetSchoolDictionaryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetSchoolDictionaryResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetSchoolDictionaryResult() *UserInfoServiceGetSchoolDictionaryResult {
	return &UserInfoServiceGetSchoolDictionaryResult{}
}

var UserInfoServiceGetSchoolDictionaryResult_Success_DEFAULT string

func (p *UserInfoServiceGetSchoolDictionaryResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetSchoolDictionaryResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetSchoolDictionaryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetSchoolDictionaryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetSchoolDictionaryResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetSchoolDictionaryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSchoolDictionary_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetSchoolDictionaryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetSchoolDictionaryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetSchoolDictionaryResult(%+v)", *p)
}

// Attributes:
//  - UserId
//  - Gender
//  - Tags
//  - Rate
//  - Limit
type UserInfoServiceGetLoginTagRecUserArgs struct {
	UserId int64    `thrift:"userId,1" db:"userId" json:"userId"`
	Gender string   `thrift:"gender,2" db:"gender" json:"gender"`
	Tags   []string `thrift:"tags,3" db:"tags" json:"tags"`
	Rate   float64  `thrift:"rate,4" db:"rate" json:"rate"`
	Limit  int32    `thrift:"limit,5" db:"limit" json:"limit"`
}

func NewUserInfoServiceGetLoginTagRecUserArgs() *UserInfoServiceGetLoginTagRecUserArgs {
	return &UserInfoServiceGetLoginTagRecUserArgs{}
}

func (p *UserInfoServiceGetLoginTagRecUserArgs) GetUserId() int64 {
	return p.UserId
}

func (p *UserInfoServiceGetLoginTagRecUserArgs) GetGender() string {
	return p.Gender
}

func (p *UserInfoServiceGetLoginTagRecUserArgs) GetTags() []string {
	return p.Tags
}

func (p *UserInfoServiceGetLoginTagRecUserArgs) GetRate() float64 {
	return p.Rate
}

func (p *UserInfoServiceGetLoginTagRecUserArgs) GetLimit() int32 {
	return p.Limit
}
func (p *UserInfoServiceGetLoginTagRecUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetLoginTagRecUserArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceGetLoginTagRecUserArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Gender = v
	}
	return nil
}

func (p *UserInfoServiceGetLoginTagRecUserArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Tags = tSlice
	for i := 0; i < size; i++ {
		var _elem186 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem186 = v
		}
		p.Tags = append(p.Tags, _elem186)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetLoginTagRecUserArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Rate = v
	}
	return nil
}

func (p *UserInfoServiceGetLoginTagRecUserArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *UserInfoServiceGetLoginTagRecUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLoginTagRecUser_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetLoginTagRecUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetLoginTagRecUserArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("gender", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gender: ", p), err)
	}
	if err := oprot.WriteString(string(p.Gender)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.gender (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gender: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetLoginTagRecUserArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tags", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tags: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Tags)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Tags {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tags: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetLoginTagRecUserArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rate", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:rate: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Rate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rate (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:rate: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetLoginTagRecUserArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limit", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:limit: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Limit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limit (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:limit: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetLoginTagRecUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetLoginTagRecUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetLoginTagRecUserResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetLoginTagRecUserResult() *UserInfoServiceGetLoginTagRecUserResult {
	return &UserInfoServiceGetLoginTagRecUserResult{}
}

var UserInfoServiceGetLoginTagRecUserResult_Success_DEFAULT string

func (p *UserInfoServiceGetLoginTagRecUserResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetLoginTagRecUserResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetLoginTagRecUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetLoginTagRecUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetLoginTagRecUserResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetLoginTagRecUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLoginTagRecUser_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetLoginTagRecUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetLoginTagRecUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetLoginTagRecUserResult(%+v)", *p)
}

// Attributes:
//  - Ids
type UserInfoServiceGetUserInfoListByIdsNewArgs struct {
	Ids string `thrift:"ids,1" db:"ids" json:"ids"`
}

func NewUserInfoServiceGetUserInfoListByIdsNewArgs() *UserInfoServiceGetUserInfoListByIdsNewArgs {
	return &UserInfoServiceGetUserInfoListByIdsNewArgs{}
}

func (p *UserInfoServiceGetUserInfoListByIdsNewArgs) GetIds() string {
	return p.Ids
}
func (p *UserInfoServiceGetUserInfoListByIdsNewArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoListByIdsNewArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Ids = v
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoListByIdsNewArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInfoListByIdsNew_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoListByIdsNewArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ids", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ids: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ids)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ids (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ids: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserInfoListByIdsNewArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInfoListByIdsNewArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetUserInfoListByIdsNewResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetUserInfoListByIdsNewResult() *UserInfoServiceGetUserInfoListByIdsNewResult {
	return &UserInfoServiceGetUserInfoListByIdsNewResult{}
}

var UserInfoServiceGetUserInfoListByIdsNewResult_Success_DEFAULT string

func (p *UserInfoServiceGetUserInfoListByIdsNewResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetUserInfoListByIdsNewResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetUserInfoListByIdsNewResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetUserInfoListByIdsNewResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoListByIdsNewResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoListByIdsNewResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInfoListByIdsNew_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoListByIdsNewResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetUserInfoListByIdsNewResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInfoListByIdsNewResult(%+v)", *p)
}

type UserInfoServicePingArgs struct {
}

func NewUserInfoServicePingArgs() *UserInfoServicePingArgs {
	return &UserInfoServicePingArgs{}
}

func (p *UserInfoServicePingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServicePingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ping_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServicePingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServicePingArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServicePingResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServicePingResult() *UserInfoServicePingResult {
	return &UserInfoServicePingResult{}
}

var UserInfoServicePingResult_Success_DEFAULT string

func (p *UserInfoServicePingResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServicePingResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServicePingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServicePingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServicePingResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServicePingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ping_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServicePingResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServicePingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServicePingResult(%+v)", *p)
}

// Attributes:
//  - UserId
//  - AddressInfo
type UserInfoServiceAddUserAddressInfoArgs struct {
	UserId      int64             `thrift:"userId,1" db:"userId" json:"userId"`
	AddressInfo map[string]string `thrift:"addressInfo,2" db:"addressInfo" json:"addressInfo"`
}

func NewUserInfoServiceAddUserAddressInfoArgs() *UserInfoServiceAddUserAddressInfoArgs {
	return &UserInfoServiceAddUserAddressInfoArgs{}
}

func (p *UserInfoServiceAddUserAddressInfoArgs) GetUserId() int64 {
	return p.UserId
}

func (p *UserInfoServiceAddUserAddressInfoArgs) GetAddressInfo() map[string]string {
	return p.AddressInfo
}
func (p *UserInfoServiceAddUserAddressInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceAddUserAddressInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceAddUserAddressInfoArgs) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.AddressInfo = tMap
	for i := 0; i < size; i++ {
		var _key187 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key187 = v
		}
		var _val188 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val188 = v
		}
		p.AddressInfo[_key187] = _val188
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserInfoServiceAddUserAddressInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addUserAddressInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceAddUserAddressInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAddUserAddressInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addressInfo", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:addressInfo: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.AddressInfo)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.AddressInfo {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:addressInfo: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAddUserAddressInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceAddUserAddressInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceAddUserAddressInfoResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceAddUserAddressInfoResult() *UserInfoServiceAddUserAddressInfoResult {
	return &UserInfoServiceAddUserAddressInfoResult{}
}

var UserInfoServiceAddUserAddressInfoResult_Success_DEFAULT string

func (p *UserInfoServiceAddUserAddressInfoResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceAddUserAddressInfoResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceAddUserAddressInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceAddUserAddressInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceAddUserAddressInfoResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceAddUserAddressInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addUserAddressInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceAddUserAddressInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceAddUserAddressInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceAddUserAddressInfoResult(%+v)", *p)
}

// Attributes:
//  - UserId
//  - AddressInfoId
type UserInfoServiceDeleteUserAddressInfoArgs struct {
	UserId        int64   `thrift:"userId,1" db:"userId" json:"userId"`
	AddressInfoId []int64 `thrift:"addressInfoId,2" db:"addressInfoId" json:"addressInfoId"`
}

func NewUserInfoServiceDeleteUserAddressInfoArgs() *UserInfoServiceDeleteUserAddressInfoArgs {
	return &UserInfoServiceDeleteUserAddressInfoArgs{}
}

func (p *UserInfoServiceDeleteUserAddressInfoArgs) GetUserId() int64 {
	return p.UserId
}

func (p *UserInfoServiceDeleteUserAddressInfoArgs) GetAddressInfoId() []int64 {
	return p.AddressInfoId
}
func (p *UserInfoServiceDeleteUserAddressInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceDeleteUserAddressInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceDeleteUserAddressInfoArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.AddressInfoId = tSlice
	for i := 0; i < size; i++ {
		var _elem189 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem189 = v
		}
		p.AddressInfoId = append(p.AddressInfoId, _elem189)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserInfoServiceDeleteUserAddressInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteUserAddressInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceDeleteUserAddressInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceDeleteUserAddressInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addressInfoId", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:addressInfoId: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.AddressInfoId)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.AddressInfoId {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:addressInfoId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceDeleteUserAddressInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceDeleteUserAddressInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceDeleteUserAddressInfoResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceDeleteUserAddressInfoResult() *UserInfoServiceDeleteUserAddressInfoResult {
	return &UserInfoServiceDeleteUserAddressInfoResult{}
}

var UserInfoServiceDeleteUserAddressInfoResult_Success_DEFAULT string

func (p *UserInfoServiceDeleteUserAddressInfoResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceDeleteUserAddressInfoResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceDeleteUserAddressInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceDeleteUserAddressInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceDeleteUserAddressInfoResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceDeleteUserAddressInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteUserAddressInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceDeleteUserAddressInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceDeleteUserAddressInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceDeleteUserAddressInfoResult(%+v)", *p)
}

// Attributes:
//  - UserId
//  - AddressInfo
type UserInfoServiceEditUserAddressInfoArgs struct {
	UserId      int64             `thrift:"userId,1" db:"userId" json:"userId"`
	AddressInfo map[string]string `thrift:"addressInfo,2" db:"addressInfo" json:"addressInfo"`
}

func NewUserInfoServiceEditUserAddressInfoArgs() *UserInfoServiceEditUserAddressInfoArgs {
	return &UserInfoServiceEditUserAddressInfoArgs{}
}

func (p *UserInfoServiceEditUserAddressInfoArgs) GetUserId() int64 {
	return p.UserId
}

func (p *UserInfoServiceEditUserAddressInfoArgs) GetAddressInfo() map[string]string {
	return p.AddressInfo
}
func (p *UserInfoServiceEditUserAddressInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceEditUserAddressInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceEditUserAddressInfoArgs) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.AddressInfo = tMap
	for i := 0; i < size; i++ {
		var _key190 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key190 = v
		}
		var _val191 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val191 = v
		}
		p.AddressInfo[_key190] = _val191
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserInfoServiceEditUserAddressInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("editUserAddressInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceEditUserAddressInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceEditUserAddressInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addressInfo", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:addressInfo: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.AddressInfo)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.AddressInfo {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:addressInfo: ", p), err)
	}
	return err
}

func (p *UserInfoServiceEditUserAddressInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceEditUserAddressInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceEditUserAddressInfoResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceEditUserAddressInfoResult() *UserInfoServiceEditUserAddressInfoResult {
	return &UserInfoServiceEditUserAddressInfoResult{}
}

var UserInfoServiceEditUserAddressInfoResult_Success_DEFAULT string

func (p *UserInfoServiceEditUserAddressInfoResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceEditUserAddressInfoResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceEditUserAddressInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceEditUserAddressInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceEditUserAddressInfoResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceEditUserAddressInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("editUserAddressInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceEditUserAddressInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceEditUserAddressInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceEditUserAddressInfoResult(%+v)", *p)
}

// Attributes:
//  - UserId
type UserInfoServiceGetUserAddressInfoArgs struct {
	UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewUserInfoServiceGetUserAddressInfoArgs() *UserInfoServiceGetUserAddressInfoArgs {
	return &UserInfoServiceGetUserAddressInfoArgs{}
}

func (p *UserInfoServiceGetUserAddressInfoArgs) GetUserId() int64 {
	return p.UserId
}
func (p *UserInfoServiceGetUserAddressInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserAddressInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceGetUserAddressInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserAddressInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserAddressInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserAddressInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserAddressInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetUserAddressInfoResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetUserAddressInfoResult() *UserInfoServiceGetUserAddressInfoResult {
	return &UserInfoServiceGetUserAddressInfoResult{}
}

var UserInfoServiceGetUserAddressInfoResult_Success_DEFAULT string

func (p *UserInfoServiceGetUserAddressInfoResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetUserAddressInfoResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetUserAddressInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetUserAddressInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserAddressInfoResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetUserAddressInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserAddressInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserAddressInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetUserAddressInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserAddressInfoResult(%+v)", *p)
}

// Attributes:
//  - SourceId
//  - Info
type UserInfoServiceAddUserWeixinArgs struct {
	SourceId string `thrift:"sourceId,1" db:"sourceId" json:"sourceId"`
	Info     string `thrift:"info,2" db:"info" json:"info"`
}

func NewUserInfoServiceAddUserWeixinArgs() *UserInfoServiceAddUserWeixinArgs {
	return &UserInfoServiceAddUserWeixinArgs{}
}

func (p *UserInfoServiceAddUserWeixinArgs) GetSourceId() string {
	return p.SourceId
}

func (p *UserInfoServiceAddUserWeixinArgs) GetInfo() string {
	return p.Info
}
func (p *UserInfoServiceAddUserWeixinArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceAddUserWeixinArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SourceId = v
	}
	return nil
}

func (p *UserInfoServiceAddUserWeixinArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Info = v
	}
	return nil
}

func (p *UserInfoServiceAddUserWeixinArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addUserWeixin_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceAddUserWeixinArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sourceId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SourceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sourceId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sourceId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAddUserWeixinArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("info", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err)
	}
	if err := oprot.WriteString(string(p.Info)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.info (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err)
	}
	return err
}

func (p *UserInfoServiceAddUserWeixinArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceAddUserWeixinArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceAddUserWeixinResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceAddUserWeixinResult() *UserInfoServiceAddUserWeixinResult {
	return &UserInfoServiceAddUserWeixinResult{}
}

var UserInfoServiceAddUserWeixinResult_Success_DEFAULT string

func (p *UserInfoServiceAddUserWeixinResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceAddUserWeixinResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceAddUserWeixinResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceAddUserWeixinResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceAddUserWeixinResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceAddUserWeixinResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addUserWeixin_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceAddUserWeixinResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceAddUserWeixinResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceAddUserWeixinResult(%+v)", *p)
}

// Attributes:
//  - ActionUid
//  - UserId
type UserInfoServiceGetUserWatchInfoArgs struct {
	ActionUid int64 `thrift:"actionUid,1" db:"actionUid" json:"actionUid"`
	UserId    int64 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewUserInfoServiceGetUserWatchInfoArgs() *UserInfoServiceGetUserWatchInfoArgs {
	return &UserInfoServiceGetUserWatchInfoArgs{}
}

func (p *UserInfoServiceGetUserWatchInfoArgs) GetActionUid() int64 {
	return p.ActionUid
}

func (p *UserInfoServiceGetUserWatchInfoArgs) GetUserId() int64 {
	return p.UserId
}
func (p *UserInfoServiceGetUserWatchInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserWatchInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ActionUid = v
	}
	return nil
}

func (p *UserInfoServiceGetUserWatchInfoArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceGetUserWatchInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserWatchInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserWatchInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("actionUid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:actionUid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ActionUid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.actionUid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:actionUid: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserWatchInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserWatchInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserWatchInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetUserWatchInfoResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetUserWatchInfoResult() *UserInfoServiceGetUserWatchInfoResult {
	return &UserInfoServiceGetUserWatchInfoResult{}
}

var UserInfoServiceGetUserWatchInfoResult_Success_DEFAULT string

func (p *UserInfoServiceGetUserWatchInfoResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetUserWatchInfoResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetUserWatchInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetUserWatchInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserWatchInfoResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetUserWatchInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserWatchInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserWatchInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetUserWatchInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserWatchInfoResult(%+v)", *p)
}

// Attributes:
//  - UserId
type UserInfoServiceIsTalentArgs struct {
	UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewUserInfoServiceIsTalentArgs() *UserInfoServiceIsTalentArgs {
	return &UserInfoServiceIsTalentArgs{}
}

func (p *UserInfoServiceIsTalentArgs) GetUserId() int64 {
	return p.UserId
}
func (p *UserInfoServiceIsTalentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceIsTalentArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceIsTalentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isTalent_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceIsTalentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceIsTalentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceIsTalentArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceIsTalentResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceIsTalentResult() *UserInfoServiceIsTalentResult {
	return &UserInfoServiceIsTalentResult{}
}

var UserInfoServiceIsTalentResult_Success_DEFAULT string

func (p *UserInfoServiceIsTalentResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceIsTalentResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceIsTalentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceIsTalentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceIsTalentResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceIsTalentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isTalent_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceIsTalentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceIsTalentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceIsTalentResult(%+v)", *p)
}

// Attributes:
//  - UserIds
type UserInfoServiceIsTalentsArgs struct {
	UserIds []int64 `thrift:"userIds,1" db:"userIds" json:"userIds"`
}

func NewUserInfoServiceIsTalentsArgs() *UserInfoServiceIsTalentsArgs {
	return &UserInfoServiceIsTalentsArgs{}
}

func (p *UserInfoServiceIsTalentsArgs) GetUserIds() []int64 {
	return p.UserIds
}
func (p *UserInfoServiceIsTalentsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceIsTalentsArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.UserIds = tSlice
	for i := 0; i < size; i++ {
		var _elem192 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem192 = v
		}
		p.UserIds = append(p.UserIds, _elem192)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserInfoServiceIsTalentsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isTalents_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceIsTalentsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userIds", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.UserIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.UserIds {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userIds: ", p), err)
	}
	return err
}

func (p *UserInfoServiceIsTalentsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceIsTalentsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceIsTalentsResult struct {
	Success map[int64]bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceIsTalentsResult() *UserInfoServiceIsTalentsResult {
	return &UserInfoServiceIsTalentsResult{}
}

var UserInfoServiceIsTalentsResult_Success_DEFAULT map[int64]bool

func (p *UserInfoServiceIsTalentsResult) GetSuccess() map[int64]bool {
	return p.Success
}
func (p *UserInfoServiceIsTalentsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceIsTalentsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceIsTalentsResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int64]bool, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key193 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key193 = v
		}
		var _val194 bool
		if v, err := iprot.ReadBool(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val194 = v
		}
		p.Success[_key193] = _val194
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserInfoServiceIsTalentsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isTalents_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceIsTalentsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.BOOL, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteI64(int64(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteBool(bool(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceIsTalentsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceIsTalentsResult(%+v)", *p)
}

// Attributes:
//  - UserId
type UserInfoServiceQueryMyBlackListArgs struct {
	UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewUserInfoServiceQueryMyBlackListArgs() *UserInfoServiceQueryMyBlackListArgs {
	return &UserInfoServiceQueryMyBlackListArgs{}
}

func (p *UserInfoServiceQueryMyBlackListArgs) GetUserId() int64 {
	return p.UserId
}
func (p *UserInfoServiceQueryMyBlackListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceQueryMyBlackListArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceQueryMyBlackListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryMyBlackList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceQueryMyBlackListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceQueryMyBlackListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceQueryMyBlackListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceQueryMyBlackListResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceQueryMyBlackListResult() *UserInfoServiceQueryMyBlackListResult {
	return &UserInfoServiceQueryMyBlackListResult{}
}

var UserInfoServiceQueryMyBlackListResult_Success_DEFAULT string

func (p *UserInfoServiceQueryMyBlackListResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceQueryMyBlackListResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceQueryMyBlackListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceQueryMyBlackListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceQueryMyBlackListResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceQueryMyBlackListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryMyBlackList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceQueryMyBlackListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceQueryMyBlackListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceQueryMyBlackListResult(%+v)", *p)
}

// Attributes:
//  - UserId
type UserInfoServiceQueryBlackMeListArgs struct {
	UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewUserInfoServiceQueryBlackMeListArgs() *UserInfoServiceQueryBlackMeListArgs {
	return &UserInfoServiceQueryBlackMeListArgs{}
}

func (p *UserInfoServiceQueryBlackMeListArgs) GetUserId() int64 {
	return p.UserId
}
func (p *UserInfoServiceQueryBlackMeListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceQueryBlackMeListArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceQueryBlackMeListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryBlackMeList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceQueryBlackMeListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceQueryBlackMeListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceQueryBlackMeListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceQueryBlackMeListResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceQueryBlackMeListResult() *UserInfoServiceQueryBlackMeListResult {
	return &UserInfoServiceQueryBlackMeListResult{}
}

var UserInfoServiceQueryBlackMeListResult_Success_DEFAULT string

func (p *UserInfoServiceQueryBlackMeListResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceQueryBlackMeListResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceQueryBlackMeListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceQueryBlackMeListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceQueryBlackMeListResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceQueryBlackMeListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryBlackMeList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceQueryBlackMeListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceQueryBlackMeListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceQueryBlackMeListResult(%+v)", *p)
}

// Attributes:
//  - UserId
type UserInfoServiceQueryUserStatusArgs struct {
	UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewUserInfoServiceQueryUserStatusArgs() *UserInfoServiceQueryUserStatusArgs {
	return &UserInfoServiceQueryUserStatusArgs{}
}

func (p *UserInfoServiceQueryUserStatusArgs) GetUserId() int64 {
	return p.UserId
}
func (p *UserInfoServiceQueryUserStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceQueryUserStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceQueryUserStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryUserStatus_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceQueryUserStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceQueryUserStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceQueryUserStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceQueryUserStatusResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceQueryUserStatusResult() *UserInfoServiceQueryUserStatusResult {
	return &UserInfoServiceQueryUserStatusResult{}
}

var UserInfoServiceQueryUserStatusResult_Success_DEFAULT string

func (p *UserInfoServiceQueryUserStatusResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceQueryUserStatusResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceQueryUserStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceQueryUserStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceQueryUserStatusResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceQueryUserStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryUserStatus_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceQueryUserStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceQueryUserStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceQueryUserStatusResult(%+v)", *p)
}

// Attributes:
//  - UserId
//  - UserStatusMap
type UserInfoServiceUpdateUserStatusArgs struct {
	UserId        int64             `thrift:"userId,1" db:"userId" json:"userId"`
	UserStatusMap map[string]string `thrift:"userStatusMap,2" db:"userStatusMap" json:"userStatusMap"`
}

func NewUserInfoServiceUpdateUserStatusArgs() *UserInfoServiceUpdateUserStatusArgs {
	return &UserInfoServiceUpdateUserStatusArgs{}
}

func (p *UserInfoServiceUpdateUserStatusArgs) GetUserId() int64 {
	return p.UserId
}

func (p *UserInfoServiceUpdateUserStatusArgs) GetUserStatusMap() map[string]string {
	return p.UserStatusMap
}
func (p *UserInfoServiceUpdateUserStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceUpdateUserStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceUpdateUserStatusArgs) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.UserStatusMap = tMap
	for i := 0; i < size; i++ {
		var _key195 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key195 = v
		}
		var _val196 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val196 = v
		}
		p.UserStatusMap[_key195] = _val196
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *UserInfoServiceUpdateUserStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateUserStatus_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceUpdateUserStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceUpdateUserStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userStatusMap", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userStatusMap: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.UserStatusMap)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.UserStatusMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userStatusMap: ", p), err)
	}
	return err
}

func (p *UserInfoServiceUpdateUserStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceUpdateUserStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceUpdateUserStatusResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceUpdateUserStatusResult() *UserInfoServiceUpdateUserStatusResult {
	return &UserInfoServiceUpdateUserStatusResult{}
}

var UserInfoServiceUpdateUserStatusResult_Success_DEFAULT string

func (p *UserInfoServiceUpdateUserStatusResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceUpdateUserStatusResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceUpdateUserStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceUpdateUserStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceUpdateUserStatusResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceUpdateUserStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateUserStatus_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceUpdateUserStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceUpdateUserStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceUpdateUserStatusResult(%+v)", *p)
}

// Attributes:
//  - Score
//  - Limit
type UserInfoServiceQueryUserRegisterArgs struct {
	Score int64 `thrift:"score,1" db:"score" json:"score"`
	Limit int64 `thrift:"limit,2" db:"limit" json:"limit"`
}

func NewUserInfoServiceQueryUserRegisterArgs() *UserInfoServiceQueryUserRegisterArgs {
	return &UserInfoServiceQueryUserRegisterArgs{}
}

func (p *UserInfoServiceQueryUserRegisterArgs) GetScore() int64 {
	return p.Score
}

func (p *UserInfoServiceQueryUserRegisterArgs) GetLimit() int64 {
	return p.Limit
}
func (p *UserInfoServiceQueryUserRegisterArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceQueryUserRegisterArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Score = v
	}
	return nil
}

func (p *UserInfoServiceQueryUserRegisterArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *UserInfoServiceQueryUserRegisterArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryUserRegister_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceQueryUserRegisterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("score", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:score: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Score)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.score (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:score: ", p), err)
	}
	return err
}

func (p *UserInfoServiceQueryUserRegisterArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limit", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:limit: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Limit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limit (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:limit: ", p), err)
	}
	return err
}

func (p *UserInfoServiceQueryUserRegisterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceQueryUserRegisterArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceQueryUserRegisterResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceQueryUserRegisterResult() *UserInfoServiceQueryUserRegisterResult {
	return &UserInfoServiceQueryUserRegisterResult{}
}

var UserInfoServiceQueryUserRegisterResult_Success_DEFAULT string

func (p *UserInfoServiceQueryUserRegisterResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceQueryUserRegisterResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceQueryUserRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceQueryUserRegisterResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceQueryUserRegisterResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceQueryUserRegisterResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryUserRegister_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceQueryUserRegisterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceQueryUserRegisterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceQueryUserRegisterResult(%+v)", *p)
}

// Attributes:
//  - UserId
type UserInfoServiceQueryUserMedalArgs struct {
	UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewUserInfoServiceQueryUserMedalArgs() *UserInfoServiceQueryUserMedalArgs {
	return &UserInfoServiceQueryUserMedalArgs{}
}

func (p *UserInfoServiceQueryUserMedalArgs) GetUserId() int64 {
	return p.UserId
}
func (p *UserInfoServiceQueryUserMedalArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceQueryUserMedalArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceQueryUserMedalArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryUserMedal_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceQueryUserMedalArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceQueryUserMedalArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceQueryUserMedalArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceQueryUserMedalResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceQueryUserMedalResult() *UserInfoServiceQueryUserMedalResult {
	return &UserInfoServiceQueryUserMedalResult{}
}

var UserInfoServiceQueryUserMedalResult_Success_DEFAULT string

func (p *UserInfoServiceQueryUserMedalResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceQueryUserMedalResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceQueryUserMedalResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceQueryUserMedalResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceQueryUserMedalResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceQueryUserMedalResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryUserMedal_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceQueryUserMedalResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceQueryUserMedalResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceQueryUserMedalResult(%+v)", *p)
}

// Attributes:
//  - UserId
//  - AppCode
type UserInfoServiceGetUserTokenByAppArgs struct {
	UserId  int64  `thrift:"userId,1" db:"userId" json:"userId"`
	AppCode string `thrift:"appCode,2" db:"appCode" json:"appCode"`
}

func NewUserInfoServiceGetUserTokenByAppArgs() *UserInfoServiceGetUserTokenByAppArgs {
	return &UserInfoServiceGetUserTokenByAppArgs{}
}

func (p *UserInfoServiceGetUserTokenByAppArgs) GetUserId() int64 {
	return p.UserId
}

func (p *UserInfoServiceGetUserTokenByAppArgs) GetAppCode() string {
	return p.AppCode
}
func (p *UserInfoServiceGetUserTokenByAppArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserTokenByAppArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceGetUserTokenByAppArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AppCode = v
	}
	return nil
}

func (p *UserInfoServiceGetUserTokenByAppArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserTokenByApp_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserTokenByAppArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserTokenByAppArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appCode", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appCode (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appCode: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserTokenByAppArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserTokenByAppArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetUserTokenByAppResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetUserTokenByAppResult() *UserInfoServiceGetUserTokenByAppResult {
	return &UserInfoServiceGetUserTokenByAppResult{}
}

var UserInfoServiceGetUserTokenByAppResult_Success_DEFAULT string

func (p *UserInfoServiceGetUserTokenByAppResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetUserTokenByAppResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetUserTokenByAppResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetUserTokenByAppResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserTokenByAppResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetUserTokenByAppResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserTokenByApp_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserTokenByAppResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetUserTokenByAppResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserTokenByAppResult(%+v)", *p)
}

// Attributes:
//  - PrivateKey
//  - AppCode
type UserInfoServiceGetUserInfoByPrivateKeyByAppArgs struct {
	PrivateKey string `thrift:"privateKey,1" db:"privateKey" json:"privateKey"`
	AppCode    string `thrift:"appCode,2" db:"appCode" json:"appCode"`
}

func NewUserInfoServiceGetUserInfoByPrivateKeyByAppArgs() *UserInfoServiceGetUserInfoByPrivateKeyByAppArgs {
	return &UserInfoServiceGetUserInfoByPrivateKeyByAppArgs{}
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyByAppArgs) GetPrivateKey() string {
	return p.PrivateKey
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyByAppArgs) GetAppCode() string {
	return p.AppCode
}
func (p *UserInfoServiceGetUserInfoByPrivateKeyByAppArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyByAppArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PrivateKey = v
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyByAppArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AppCode = v
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyByAppArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInfoByPrivateKeyByApp_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyByAppArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privateKey", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privateKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.PrivateKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.privateKey (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privateKey: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyByAppArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appCode", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appCode (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appCode: ", p), err)
	}
	return err
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyByAppArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInfoByPrivateKeyByAppArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceGetUserInfoByPrivateKeyByAppResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceGetUserInfoByPrivateKeyByAppResult() *UserInfoServiceGetUserInfoByPrivateKeyByAppResult {
	return &UserInfoServiceGetUserInfoByPrivateKeyByAppResult{}
}

var UserInfoServiceGetUserInfoByPrivateKeyByAppResult_Success_DEFAULT string

func (p *UserInfoServiceGetUserInfoByPrivateKeyByAppResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceGetUserInfoByPrivateKeyByAppResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceGetUserInfoByPrivateKeyByAppResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyByAppResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyByAppResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyByAppResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserInfoByPrivateKeyByApp_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyByAppResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceGetUserInfoByPrivateKeyByAppResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceGetUserInfoByPrivateKeyByAppResult(%+v)", *p)
}

// Attributes:
//  - UserId
type UserInfoServiceCancelUserArgs struct {
	UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewUserInfoServiceCancelUserArgs() *UserInfoServiceCancelUserArgs {
	return &UserInfoServiceCancelUserArgs{}
}

func (p *UserInfoServiceCancelUserArgs) GetUserId() int64 {
	return p.UserId
}
func (p *UserInfoServiceCancelUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceCancelUserArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserInfoServiceCancelUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancelUser_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceCancelUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *UserInfoServiceCancelUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceCancelUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserInfoServiceCancelUserResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserInfoServiceCancelUserResult() *UserInfoServiceCancelUserResult {
	return &UserInfoServiceCancelUserResult{}
}

var UserInfoServiceCancelUserResult_Success_DEFAULT string

func (p *UserInfoServiceCancelUserResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return UserInfoServiceCancelUserResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *UserInfoServiceCancelUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserInfoServiceCancelUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserInfoServiceCancelUserResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *UserInfoServiceCancelUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancelUser_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserInfoServiceCancelUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserInfoServiceCancelUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfoServiceCancelUserResult(%+v)", *p)
}
