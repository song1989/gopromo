// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"gen-go/userinfoservice"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  string upgradeAccount(i64 user_id, bool is_force)")
	fmt.Fprintln(os.Stderr, "  string getUserByThirdPartyAccount(i32 type, string source_id)")
	fmt.Fprintln(os.Stderr, "  string thirdPartyAccountRegister(i32 type, string source_id, string info, string commonParams)")
	fmt.Fprintln(os.Stderr, "  string thirdPartyAccountLogin(i32 type, string sourceId, string info, string commonParams)")
	fmt.Fprintln(os.Stderr, "  string mobileRegister(i64 old_user_id, string number, string password, string commonParams)")
	fmt.Fprintln(os.Stderr, "  string thirdPartyAccountBind(i64 user_id, i32 type, string source_id, string info)")
	fmt.Fprintln(os.Stderr, "  string thirdPartyAccountUnbind(i64 user_id, i32 type, string source_id, i32 pw_enabled)")
	fmt.Fprintln(os.Stderr, "  string thirdPartyAccountUnbindAndUpdateToken(i64 user_id, i32 type, string source_id, i32 pw_enabled)")
	fmt.Fprintln(os.Stderr, "  string getThirdPartyAccountInfo(i64 user_id)")
	fmt.Fprintln(os.Stderr, "  string getThirdPartyAccountBindStatus(i64 user_id, i32 type)")
	fmt.Fprintln(os.Stderr, "  string getThirdPartyAccountDetail(i64 user_id, i32 type)")
	fmt.Fprintln(os.Stderr, "  string batchCreateTestUser(i32 number)")
	fmt.Fprintln(os.Stderr, "  string getUserInfoByMobile(string mobile)")
	fmt.Fprintln(os.Stderr, "  string changePassword(i64 id, string old_password, string new_password)")
	fmt.Fprintln(os.Stderr, "  string changeMobile(i64 old_user_id, i64 current_user_id, string mobile)")
	fmt.Fprintln(os.Stderr, "  string unbindMobile(i64 userId, string mobile)")
	fmt.Fprintln(os.Stderr, "  string updateInfo(i64 id,  info)")
	fmt.Fprintln(os.Stderr, "  string updateNumber(i64 id, string number)")
	fmt.Fprintln(os.Stderr, "  string setNumberEdit(i64 id, i32 numberEdit)")
	fmt.Fprintln(os.Stderr, "  string setPassword(i64 id, string password)")
	fmt.Fprintln(os.Stderr, "  string getUserInfoById(i64 id)")
	fmt.Fprintln(os.Stderr, "  string getUserInfoByPrivateKey(string privateKey)")
	fmt.Fprintln(os.Stderr, "  string getUserInfoByNumber(string number)")
	fmt.Fprintln(os.Stderr, "  i64 getUserIdByNumber(string number)")
	fmt.Fprintln(os.Stderr, "  i64 getUserIdByPrivateKey(string privateKey)")
	fmt.Fprintln(os.Stderr, "  string getPrivateKeyById(i64 id)")
	fmt.Fprintln(os.Stderr, "  string update(i64 id,  info)")
	fmt.Fprintln(os.Stderr, "  string getUserInfosBySourceIds(i32 type,  sourceIds)")
	fmt.Fprintln(os.Stderr, "  string getTaskStatusById(i64 id)")
	fmt.Fprintln(os.Stderr, "  string checkNumber(i64 id, string number)")
	fmt.Fprintln(os.Stderr, "  string checkNumberPermission(i64 id)")
	fmt.Fprintln(os.Stderr, "  string authPasswordLogin(i32 type, string userName, string password, string commonParams)")
	fmt.Fprintln(os.Stderr, "  string clearTaskStatus( ids)")
	fmt.Fprintln(os.Stderr, "  string bitTaskStatus(i64 id, string operator, i32 operand)")
	fmt.Fprintln(os.Stderr, "  string resetPassword(i64 id, string newPassword)")
	fmt.Fprintln(os.Stderr, "  string getUserAction(i64 userId)")
	fmt.Fprintln(os.Stderr, "  string getUserInterest(i64 userId)")
	fmt.Fprintln(os.Stderr, "  string getUserInterest2(i64 userId)")
	fmt.Fprintln(os.Stderr, "  string getUserInfoListByIds(string ids)")
	fmt.Fprintln(os.Stderr, "  string getUserInfoByImId(string imId)")
	fmt.Fprintln(os.Stderr, "  string getSuspectedTPAccount(i32 beginTime, i32 endTime, string sourceId, i32 status, i32 cursor, i32 limit)")
	fmt.Fprintln(os.Stderr, "  string disableSuspectedTPAccount(string sourceId, i32 type)")
	fmt.Fprintln(os.Stderr, "  string enableSuspectedTPAccount(string sourceId, i32 type)")
	fmt.Fprintln(os.Stderr, "  string getCreatedAccounts(string sourceId, i32 type)")
	fmt.Fprintln(os.Stderr, "  string getWhitelistTPAccounts(i32 beginTime, i32 endTime, i32 status, i32 cursor, i32 limit)")
	fmt.Fprintln(os.Stderr, "  string addWhitelistTPAccountByNumber(string number)")
	fmt.Fprintln(os.Stderr, "  string addWhitelistTPAccountBySourceId(string sourceId, i32 type)")
	fmt.Fprintln(os.Stderr, "  string disableWhitelistTPAccount(string sourceId, i32 type)")
	fmt.Fprintln(os.Stderr, "  string enableWhitelistTPAccount(string sourceId, i32 type)")
	fmt.Fprintln(os.Stderr, "  string countSuspectedTPAccount(i32 beginTime, i32 endTime, i32 status)")
	fmt.Fprintln(os.Stderr, "  string countWhitelistTPAccounts(i32 beginTime, i32 endTime, i32 status)")
	fmt.Fprintln(os.Stderr, "  string countCreatedAccounts(string sourceId, i32 type)")
	fmt.Fprintln(os.Stderr, "  string updateToken(i64 userId)")
	fmt.Fprintln(os.Stderr, "  string getIsDownloadIn(i64 userId)")
	fmt.Fprintln(os.Stderr, "  string thirdPartyAccountRegisterH5(i32 type, string source_id, string info)")
	fmt.Fprintln(os.Stderr, "  string thirdPartyAccountLoginH5(i32 type, string sourceId, string info)")
	fmt.Fprintln(os.Stderr, "  string thirdPartyAccountLoginAndRegisterBananaChat(i32 type, string sourceId, string info)")
	fmt.Fprintln(os.Stderr, "  string thirdPartyAccountLoginAndRegisterByApp(i32 type, string sourceId, string info, string appCode)")
	fmt.Fprintln(os.Stderr, "  string mobileRegisterH5(i64 old_user_id, string number, string password)")
	fmt.Fprintln(os.Stderr, "  string mobileRegisterBananaChat(string number, string password)")
	fmt.Fprintln(os.Stderr, "  string mobileRegisterByApp(string number, string password, string appCode)")
	fmt.Fprintln(os.Stderr, "  string authPasswordLoginH5(i32 type, string userName, string password)")
	fmt.Fprintln(os.Stderr, "  string authPasswordLoginBananaChat(i32 type, string userName, string password)")
	fmt.Fprintln(os.Stderr, "  string authPasswordLoginByApp(i32 type, string userName, string password, string appCode)")
	fmt.Fprintln(os.Stderr, "  string authPasswordLoginOpenPlatform(i32 type, string userName, string password)")
	fmt.Fprintln(os.Stderr, "  string updateProfileInfo(i64 userId,  info, string jsonProfileInfo)")
	fmt.Fprintln(os.Stderr, "  string getUserProfileInfoById(i64 userId)")
	fmt.Fprintln(os.Stderr, "  string getSchoolDictionary(i32 type, i32 province, i32 city, string name, i32 offset, i32 limit)")
	fmt.Fprintln(os.Stderr, "  string getLoginTagRecUser(i64 userId, string gender,  tags, double rate, i32 limit)")
	fmt.Fprintln(os.Stderr, "  string getUserInfoListByIdsNew(string ids)")
	fmt.Fprintln(os.Stderr, "  string ping()")
	fmt.Fprintln(os.Stderr, "  string addUserAddressInfo(i64 userId,  addressInfo)")
	fmt.Fprintln(os.Stderr, "  string deleteUserAddressInfo(i64 userId,  addressInfoId)")
	fmt.Fprintln(os.Stderr, "  string editUserAddressInfo(i64 userId,  addressInfo)")
	fmt.Fprintln(os.Stderr, "  string getUserAddressInfo(i64 userId)")
	fmt.Fprintln(os.Stderr, "  string addUserWeixin(string sourceId, string info)")
	fmt.Fprintln(os.Stderr, "  string getUserWatchInfo(i64 actionUid, i64 userId)")
	fmt.Fprintln(os.Stderr, "  string isTalent(i64 userId)")
	fmt.Fprintln(os.Stderr, "   isTalents( userIds)")
	fmt.Fprintln(os.Stderr, "  string queryMyBlackList(i64 userId)")
	fmt.Fprintln(os.Stderr, "  string queryBlackMeList(i64 userId)")
	fmt.Fprintln(os.Stderr, "  string queryUserStatus(i64 userId)")
	fmt.Fprintln(os.Stderr, "  string updateUserStatus(i64 userId,  userStatusMap)")
	fmt.Fprintln(os.Stderr, "  string queryUserRegister(i64 score, i64 limit)")
	fmt.Fprintln(os.Stderr, "  string queryUserMedal(i64 userId)")
	fmt.Fprintln(os.Stderr, "  string getUserTokenByApp(i64 userId, string appCode)")
	fmt.Fprintln(os.Stderr, "  string getUserInfoByPrivateKeyByApp(string privateKey, string appCode)")
	fmt.Fprintln(os.Stderr, "  string cancelUser(i64 userId)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "10.10.106.45", "Specify host and port")
	flag.IntVar(&port, "p", 9082, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := userinfoservice.NewUserInfoServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "upgradeAccount":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpgradeAccount requires 2 args")
			flag.Usage()
		}
		argvalue0, err197 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err197 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		fmt.Print(client.UpgradeAccount(value0, value1))
		fmt.Print("\n")
		break
	case "getUserByThirdPartyAccount":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetUserByThirdPartyAccount requires 2 args")
			flag.Usage()
		}
		tmp0, err199 := (strconv.Atoi(flag.Arg(1)))
		if err199 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetUserByThirdPartyAccount(value0, value1))
		fmt.Print("\n")
		break
	case "thirdPartyAccountRegister":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "ThirdPartyAccountRegister requires 4 args")
			flag.Usage()
		}
		tmp0, err201 := (strconv.Atoi(flag.Arg(1)))
		if err201 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.ThirdPartyAccountRegister(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "thirdPartyAccountLogin":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "ThirdPartyAccountLogin requires 4 args")
			flag.Usage()
		}
		tmp0, err205 := (strconv.Atoi(flag.Arg(1)))
		if err205 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.ThirdPartyAccountLogin(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "mobileRegister":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "MobileRegister requires 4 args")
			flag.Usage()
		}
		argvalue0, err209 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err209 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.MobileRegister(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "thirdPartyAccountBind":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "ThirdPartyAccountBind requires 4 args")
			flag.Usage()
		}
		argvalue0, err213 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err213 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err214 := (strconv.Atoi(flag.Arg(2)))
		if err214 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.ThirdPartyAccountBind(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "thirdPartyAccountUnbind":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "ThirdPartyAccountUnbind requires 4 args")
			flag.Usage()
		}
		argvalue0, err217 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err217 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err218 := (strconv.Atoi(flag.Arg(2)))
		if err218 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err220 := (strconv.Atoi(flag.Arg(4)))
		if err220 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		fmt.Print(client.ThirdPartyAccountUnbind(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "thirdPartyAccountUnbindAndUpdateToken":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "ThirdPartyAccountUnbindAndUpdateToken requires 4 args")
			flag.Usage()
		}
		argvalue0, err221 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err221 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err222 := (strconv.Atoi(flag.Arg(2)))
		if err222 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err224 := (strconv.Atoi(flag.Arg(4)))
		if err224 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		fmt.Print(client.ThirdPartyAccountUnbindAndUpdateToken(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getThirdPartyAccountInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetThirdPartyAccountInfo requires 1 args")
			flag.Usage()
		}
		argvalue0, err225 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err225 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetThirdPartyAccountInfo(value0))
		fmt.Print("\n")
		break
	case "getThirdPartyAccountBindStatus":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetThirdPartyAccountBindStatus requires 2 args")
			flag.Usage()
		}
		argvalue0, err226 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err226 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err227 := (strconv.Atoi(flag.Arg(2)))
		if err227 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetThirdPartyAccountBindStatus(value0, value1))
		fmt.Print("\n")
		break
	case "getThirdPartyAccountDetail":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetThirdPartyAccountDetail requires 2 args")
			flag.Usage()
		}
		argvalue0, err228 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err228 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err229 := (strconv.Atoi(flag.Arg(2)))
		if err229 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetThirdPartyAccountDetail(value0, value1))
		fmt.Print("\n")
		break
	case "batchCreateTestUser":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "BatchCreateTestUser requires 1 args")
			flag.Usage()
		}
		tmp0, err230 := (strconv.Atoi(flag.Arg(1)))
		if err230 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.BatchCreateTestUser(value0))
		fmt.Print("\n")
		break
	case "getUserInfoByMobile":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserInfoByMobile requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetUserInfoByMobile(value0))
		fmt.Print("\n")
		break
	case "changePassword":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ChangePassword requires 3 args")
			flag.Usage()
		}
		argvalue0, err232 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err232 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.ChangePassword(value0, value1, value2))
		fmt.Print("\n")
		break
	case "changeMobile":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ChangeMobile requires 3 args")
			flag.Usage()
		}
		argvalue0, err235 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err235 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1, err236 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err236 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.ChangeMobile(value0, value1, value2))
		fmt.Print("\n")
		break
	case "unbindMobile":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UnbindMobile requires 2 args")
			flag.Usage()
		}
		argvalue0, err238 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err238 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.UnbindMobile(value0, value1))
		fmt.Print("\n")
		break
	case "updateInfo":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateInfo requires 2 args")
			flag.Usage()
		}
		argvalue0, err240 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err240 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg241 := flag.Arg(2)
		mbTrans242 := thrift.NewTMemoryBufferLen(len(arg241))
		defer mbTrans242.Close()
		_, err243 := mbTrans242.WriteString(arg241)
		if err243 != nil {
			Usage()
			return
		}
		factory244 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt245 := factory244.GetProtocol(mbTrans242)
		containerStruct1 := userinfoservice.NewUserInfoServiceUpdateInfoArgs()
		err246 := containerStruct1.ReadField2(jsProt245)
		if err246 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Info
		value1 := argvalue1
		fmt.Print(client.UpdateInfo(value0, value1))
		fmt.Print("\n")
		break
	case "updateNumber":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateNumber requires 2 args")
			flag.Usage()
		}
		argvalue0, err247 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err247 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.UpdateNumber(value0, value1))
		fmt.Print("\n")
		break
	case "setNumberEdit":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetNumberEdit requires 2 args")
			flag.Usage()
		}
		argvalue0, err249 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err249 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err250 := (strconv.Atoi(flag.Arg(2)))
		if err250 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.SetNumberEdit(value0, value1))
		fmt.Print("\n")
		break
	case "setPassword":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetPassword requires 2 args")
			flag.Usage()
		}
		argvalue0, err251 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err251 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.SetPassword(value0, value1))
		fmt.Print("\n")
		break
	case "getUserInfoById":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserInfoById requires 1 args")
			flag.Usage()
		}
		argvalue0, err253 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err253 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetUserInfoById(value0))
		fmt.Print("\n")
		break
	case "getUserInfoByPrivateKey":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserInfoByPrivateKey requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetUserInfoByPrivateKey(value0))
		fmt.Print("\n")
		break
	case "getUserInfoByNumber":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserInfoByNumber requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetUserInfoByNumber(value0))
		fmt.Print("\n")
		break
	case "getUserIdByNumber":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserIdByNumber requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetUserIdByNumber(value0))
		fmt.Print("\n")
		break
	case "getUserIdByPrivateKey":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserIdByPrivateKey requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetUserIdByPrivateKey(value0))
		fmt.Print("\n")
		break
	case "getPrivateKeyById":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPrivateKeyById requires 1 args")
			flag.Usage()
		}
		argvalue0, err258 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err258 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPrivateKeyById(value0))
		fmt.Print("\n")
		break
	case "update":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Update requires 2 args")
			flag.Usage()
		}
		argvalue0, err259 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err259 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg260 := flag.Arg(2)
		mbTrans261 := thrift.NewTMemoryBufferLen(len(arg260))
		defer mbTrans261.Close()
		_, err262 := mbTrans261.WriteString(arg260)
		if err262 != nil {
			Usage()
			return
		}
		factory263 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt264 := factory263.GetProtocol(mbTrans261)
		containerStruct1 := userinfoservice.NewUserInfoServiceUpdateArgs()
		err265 := containerStruct1.ReadField2(jsProt264)
		if err265 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Info
		value1 := argvalue1
		fmt.Print(client.Update(value0, value1))
		fmt.Print("\n")
		break
	case "getUserInfosBySourceIds":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetUserInfosBySourceIds requires 2 args")
			flag.Usage()
		}
		tmp0, err266 := (strconv.Atoi(flag.Arg(1)))
		if err266 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg267 := flag.Arg(2)
		mbTrans268 := thrift.NewTMemoryBufferLen(len(arg267))
		defer mbTrans268.Close()
		_, err269 := mbTrans268.WriteString(arg267)
		if err269 != nil {
			Usage()
			return
		}
		factory270 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt271 := factory270.GetProtocol(mbTrans268)
		containerStruct1 := userinfoservice.NewUserInfoServiceGetUserInfosBySourceIdsArgs()
		err272 := containerStruct1.ReadField2(jsProt271)
		if err272 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.SourceIds
		value1 := argvalue1
		fmt.Print(client.GetUserInfosBySourceIds(value0, value1))
		fmt.Print("\n")
		break
	case "getTaskStatusById":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTaskStatusById requires 1 args")
			flag.Usage()
		}
		argvalue0, err273 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err273 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTaskStatusById(value0))
		fmt.Print("\n")
		break
	case "checkNumber":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CheckNumber requires 2 args")
			flag.Usage()
		}
		argvalue0, err274 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err274 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.CheckNumber(value0, value1))
		fmt.Print("\n")
		break
	case "checkNumberPermission":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CheckNumberPermission requires 1 args")
			flag.Usage()
		}
		argvalue0, err276 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err276 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CheckNumberPermission(value0))
		fmt.Print("\n")
		break
	case "authPasswordLogin":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AuthPasswordLogin requires 4 args")
			flag.Usage()
		}
		tmp0, err277 := (strconv.Atoi(flag.Arg(1)))
		if err277 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.AuthPasswordLogin(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "clearTaskStatus":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ClearTaskStatus requires 1 args")
			flag.Usage()
		}
		arg281 := flag.Arg(1)
		mbTrans282 := thrift.NewTMemoryBufferLen(len(arg281))
		defer mbTrans282.Close()
		_, err283 := mbTrans282.WriteString(arg281)
		if err283 != nil {
			Usage()
			return
		}
		factory284 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt285 := factory284.GetProtocol(mbTrans282)
		containerStruct0 := userinfoservice.NewUserInfoServiceClearTaskStatusArgs()
		err286 := containerStruct0.ReadField1(jsProt285)
		if err286 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Ids
		value0 := argvalue0
		fmt.Print(client.ClearTaskStatus(value0))
		fmt.Print("\n")
		break
	case "bitTaskStatus":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "BitTaskStatus requires 3 args")
			flag.Usage()
		}
		argvalue0, err287 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err287 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err289 := (strconv.Atoi(flag.Arg(3)))
		if err289 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		fmt.Print(client.BitTaskStatus(value0, value1, value2))
		fmt.Print("\n")
		break
	case "resetPassword":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ResetPassword requires 2 args")
			flag.Usage()
		}
		argvalue0, err290 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err290 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.ResetPassword(value0, value1))
		fmt.Print("\n")
		break
	case "getUserAction":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserAction requires 1 args")
			flag.Usage()
		}
		argvalue0, err292 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err292 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetUserAction(value0))
		fmt.Print("\n")
		break
	case "getUserInterest":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserInterest requires 1 args")
			flag.Usage()
		}
		argvalue0, err293 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err293 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetUserInterest(value0))
		fmt.Print("\n")
		break
	case "getUserInterest2":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserInterest2 requires 1 args")
			flag.Usage()
		}
		argvalue0, err294 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err294 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetUserInterest2(value0))
		fmt.Print("\n")
		break
	case "getUserInfoListByIds":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserInfoListByIds requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetUserInfoListByIds(value0))
		fmt.Print("\n")
		break
	case "getUserInfoByImId":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserInfoByImId requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetUserInfoByImId(value0))
		fmt.Print("\n")
		break
	case "getSuspectedTPAccount":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GetSuspectedTPAccount requires 6 args")
			flag.Usage()
		}
		tmp0, err297 := (strconv.Atoi(flag.Arg(1)))
		if err297 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err298 := (strconv.Atoi(flag.Arg(2)))
		if err298 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err300 := (strconv.Atoi(flag.Arg(4)))
		if err300 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		tmp4, err301 := (strconv.Atoi(flag.Arg(5)))
		if err301 != nil {
			Usage()
			return
		}
		argvalue4 := int32(tmp4)
		value4 := argvalue4
		tmp5, err302 := (strconv.Atoi(flag.Arg(6)))
		if err302 != nil {
			Usage()
			return
		}
		argvalue5 := int32(tmp5)
		value5 := argvalue5
		fmt.Print(client.GetSuspectedTPAccount(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "disableSuspectedTPAccount":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DisableSuspectedTPAccount requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err304 := (strconv.Atoi(flag.Arg(2)))
		if err304 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.DisableSuspectedTPAccount(value0, value1))
		fmt.Print("\n")
		break
	case "enableSuspectedTPAccount":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "EnableSuspectedTPAccount requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err306 := (strconv.Atoi(flag.Arg(2)))
		if err306 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.EnableSuspectedTPAccount(value0, value1))
		fmt.Print("\n")
		break
	case "getCreatedAccounts":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetCreatedAccounts requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err308 := (strconv.Atoi(flag.Arg(2)))
		if err308 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetCreatedAccounts(value0, value1))
		fmt.Print("\n")
		break
	case "getWhitelistTPAccounts":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetWhitelistTPAccounts requires 5 args")
			flag.Usage()
		}
		tmp0, err309 := (strconv.Atoi(flag.Arg(1)))
		if err309 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err310 := (strconv.Atoi(flag.Arg(2)))
		if err310 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		tmp2, err311 := (strconv.Atoi(flag.Arg(3)))
		if err311 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		tmp3, err312 := (strconv.Atoi(flag.Arg(4)))
		if err312 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		tmp4, err313 := (strconv.Atoi(flag.Arg(5)))
		if err313 != nil {
			Usage()
			return
		}
		argvalue4 := int32(tmp4)
		value4 := argvalue4
		fmt.Print(client.GetWhitelistTPAccounts(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "addWhitelistTPAccountByNumber":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddWhitelistTPAccountByNumber requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.AddWhitelistTPAccountByNumber(value0))
		fmt.Print("\n")
		break
	case "addWhitelistTPAccountBySourceId":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddWhitelistTPAccountBySourceId requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err316 := (strconv.Atoi(flag.Arg(2)))
		if err316 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.AddWhitelistTPAccountBySourceId(value0, value1))
		fmt.Print("\n")
		break
	case "disableWhitelistTPAccount":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DisableWhitelistTPAccount requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err318 := (strconv.Atoi(flag.Arg(2)))
		if err318 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.DisableWhitelistTPAccount(value0, value1))
		fmt.Print("\n")
		break
	case "enableWhitelistTPAccount":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "EnableWhitelistTPAccount requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err320 := (strconv.Atoi(flag.Arg(2)))
		if err320 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.EnableWhitelistTPAccount(value0, value1))
		fmt.Print("\n")
		break
	case "countSuspectedTPAccount":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "CountSuspectedTPAccount requires 3 args")
			flag.Usage()
		}
		tmp0, err321 := (strconv.Atoi(flag.Arg(1)))
		if err321 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err322 := (strconv.Atoi(flag.Arg(2)))
		if err322 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		tmp2, err323 := (strconv.Atoi(flag.Arg(3)))
		if err323 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		fmt.Print(client.CountSuspectedTPAccount(value0, value1, value2))
		fmt.Print("\n")
		break
	case "countWhitelistTPAccounts":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "CountWhitelistTPAccounts requires 3 args")
			flag.Usage()
		}
		tmp0, err324 := (strconv.Atoi(flag.Arg(1)))
		if err324 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err325 := (strconv.Atoi(flag.Arg(2)))
		if err325 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		tmp2, err326 := (strconv.Atoi(flag.Arg(3)))
		if err326 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		fmt.Print(client.CountWhitelistTPAccounts(value0, value1, value2))
		fmt.Print("\n")
		break
	case "countCreatedAccounts":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CountCreatedAccounts requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err328 := (strconv.Atoi(flag.Arg(2)))
		if err328 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.CountCreatedAccounts(value0, value1))
		fmt.Print("\n")
		break
	case "updateToken":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateToken requires 1 args")
			flag.Usage()
		}
		argvalue0, err329 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err329 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateToken(value0))
		fmt.Print("\n")
		break
	case "getIsDownloadIn":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetIsDownloadIn requires 1 args")
			flag.Usage()
		}
		argvalue0, err330 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err330 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetIsDownloadIn(value0))
		fmt.Print("\n")
		break
	case "thirdPartyAccountRegisterH5":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ThirdPartyAccountRegisterH5 requires 3 args")
			flag.Usage()
		}
		tmp0, err331 := (strconv.Atoi(flag.Arg(1)))
		if err331 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.ThirdPartyAccountRegisterH5(value0, value1, value2))
		fmt.Print("\n")
		break
	case "thirdPartyAccountLoginH5":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ThirdPartyAccountLoginH5 requires 3 args")
			flag.Usage()
		}
		tmp0, err334 := (strconv.Atoi(flag.Arg(1)))
		if err334 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.ThirdPartyAccountLoginH5(value0, value1, value2))
		fmt.Print("\n")
		break
	case "thirdPartyAccountLoginAndRegisterBananaChat":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ThirdPartyAccountLoginAndRegisterBananaChat requires 3 args")
			flag.Usage()
		}
		tmp0, err337 := (strconv.Atoi(flag.Arg(1)))
		if err337 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.ThirdPartyAccountLoginAndRegisterBananaChat(value0, value1, value2))
		fmt.Print("\n")
		break
	case "thirdPartyAccountLoginAndRegisterByApp":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "ThirdPartyAccountLoginAndRegisterByApp requires 4 args")
			flag.Usage()
		}
		tmp0, err340 := (strconv.Atoi(flag.Arg(1)))
		if err340 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.ThirdPartyAccountLoginAndRegisterByApp(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "mobileRegisterH5":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "MobileRegisterH5 requires 3 args")
			flag.Usage()
		}
		argvalue0, err344 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err344 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.MobileRegisterH5(value0, value1, value2))
		fmt.Print("\n")
		break
	case "mobileRegisterBananaChat":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "MobileRegisterBananaChat requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.MobileRegisterBananaChat(value0, value1))
		fmt.Print("\n")
		break
	case "mobileRegisterByApp":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "MobileRegisterByApp requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.MobileRegisterByApp(value0, value1, value2))
		fmt.Print("\n")
		break
	case "authPasswordLoginH5":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AuthPasswordLoginH5 requires 3 args")
			flag.Usage()
		}
		tmp0, err352 := (strconv.Atoi(flag.Arg(1)))
		if err352 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.AuthPasswordLoginH5(value0, value1, value2))
		fmt.Print("\n")
		break
	case "authPasswordLoginBananaChat":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AuthPasswordLoginBananaChat requires 3 args")
			flag.Usage()
		}
		tmp0, err355 := (strconv.Atoi(flag.Arg(1)))
		if err355 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.AuthPasswordLoginBananaChat(value0, value1, value2))
		fmt.Print("\n")
		break
	case "authPasswordLoginByApp":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AuthPasswordLoginByApp requires 4 args")
			flag.Usage()
		}
		tmp0, err358 := (strconv.Atoi(flag.Arg(1)))
		if err358 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.AuthPasswordLoginByApp(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "authPasswordLoginOpenPlatform":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AuthPasswordLoginOpenPlatform requires 3 args")
			flag.Usage()
		}
		tmp0, err362 := (strconv.Atoi(flag.Arg(1)))
		if err362 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.AuthPasswordLoginOpenPlatform(value0, value1, value2))
		fmt.Print("\n")
		break
	case "updateProfileInfo":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "UpdateProfileInfo requires 3 args")
			flag.Usage()
		}
		argvalue0, err365 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err365 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg366 := flag.Arg(2)
		mbTrans367 := thrift.NewTMemoryBufferLen(len(arg366))
		defer mbTrans367.Close()
		_, err368 := mbTrans367.WriteString(arg366)
		if err368 != nil {
			Usage()
			return
		}
		factory369 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt370 := factory369.GetProtocol(mbTrans367)
		containerStruct1 := userinfoservice.NewUserInfoServiceUpdateProfileInfoArgs()
		err371 := containerStruct1.ReadField2(jsProt370)
		if err371 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Info
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.UpdateProfileInfo(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getUserProfileInfoById":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserProfileInfoById requires 1 args")
			flag.Usage()
		}
		argvalue0, err373 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err373 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetUserProfileInfoById(value0))
		fmt.Print("\n")
		break
	case "getSchoolDictionary":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GetSchoolDictionary requires 6 args")
			flag.Usage()
		}
		tmp0, err374 := (strconv.Atoi(flag.Arg(1)))
		if err374 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err375 := (strconv.Atoi(flag.Arg(2)))
		if err375 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		tmp2, err376 := (strconv.Atoi(flag.Arg(3)))
		if err376 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		tmp4, err378 := (strconv.Atoi(flag.Arg(5)))
		if err378 != nil {
			Usage()
			return
		}
		argvalue4 := int32(tmp4)
		value4 := argvalue4
		tmp5, err379 := (strconv.Atoi(flag.Arg(6)))
		if err379 != nil {
			Usage()
			return
		}
		argvalue5 := int32(tmp5)
		value5 := argvalue5
		fmt.Print(client.GetSchoolDictionary(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "getLoginTagRecUser":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetLoginTagRecUser requires 5 args")
			flag.Usage()
		}
		argvalue0, err380 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err380 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg382 := flag.Arg(3)
		mbTrans383 := thrift.NewTMemoryBufferLen(len(arg382))
		defer mbTrans383.Close()
		_, err384 := mbTrans383.WriteString(arg382)
		if err384 != nil {
			Usage()
			return
		}
		factory385 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt386 := factory385.GetProtocol(mbTrans383)
		containerStruct2 := userinfoservice.NewUserInfoServiceGetLoginTagRecUserArgs()
		err387 := containerStruct2.ReadField3(jsProt386)
		if err387 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Tags
		value2 := argvalue2
		argvalue3, err388 := (strconv.ParseFloat(flag.Arg(4), 64))
		if err388 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		tmp4, err389 := (strconv.Atoi(flag.Arg(5)))
		if err389 != nil {
			Usage()
			return
		}
		argvalue4 := int32(tmp4)
		value4 := argvalue4
		fmt.Print(client.GetLoginTagRecUser(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "getUserInfoListByIdsNew":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserInfoListByIdsNew requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetUserInfoListByIdsNew(value0))
		fmt.Print("\n")
		break
	case "ping":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Ping requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Ping())
		fmt.Print("\n")
		break
	case "addUserAddressInfo":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddUserAddressInfo requires 2 args")
			flag.Usage()
		}
		argvalue0, err391 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err391 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg392 := flag.Arg(2)
		mbTrans393 := thrift.NewTMemoryBufferLen(len(arg392))
		defer mbTrans393.Close()
		_, err394 := mbTrans393.WriteString(arg392)
		if err394 != nil {
			Usage()
			return
		}
		factory395 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt396 := factory395.GetProtocol(mbTrans393)
		containerStruct1 := userinfoservice.NewUserInfoServiceAddUserAddressInfoArgs()
		err397 := containerStruct1.ReadField2(jsProt396)
		if err397 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.AddressInfo
		value1 := argvalue1
		fmt.Print(client.AddUserAddressInfo(value0, value1))
		fmt.Print("\n")
		break
	case "deleteUserAddressInfo":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DeleteUserAddressInfo requires 2 args")
			flag.Usage()
		}
		argvalue0, err398 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err398 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg399 := flag.Arg(2)
		mbTrans400 := thrift.NewTMemoryBufferLen(len(arg399))
		defer mbTrans400.Close()
		_, err401 := mbTrans400.WriteString(arg399)
		if err401 != nil {
			Usage()
			return
		}
		factory402 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt403 := factory402.GetProtocol(mbTrans400)
		containerStruct1 := userinfoservice.NewUserInfoServiceDeleteUserAddressInfoArgs()
		err404 := containerStruct1.ReadField2(jsProt403)
		if err404 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.AddressInfoId
		value1 := argvalue1
		fmt.Print(client.DeleteUserAddressInfo(value0, value1))
		fmt.Print("\n")
		break
	case "editUserAddressInfo":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "EditUserAddressInfo requires 2 args")
			flag.Usage()
		}
		argvalue0, err405 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err405 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg406 := flag.Arg(2)
		mbTrans407 := thrift.NewTMemoryBufferLen(len(arg406))
		defer mbTrans407.Close()
		_, err408 := mbTrans407.WriteString(arg406)
		if err408 != nil {
			Usage()
			return
		}
		factory409 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt410 := factory409.GetProtocol(mbTrans407)
		containerStruct1 := userinfoservice.NewUserInfoServiceEditUserAddressInfoArgs()
		err411 := containerStruct1.ReadField2(jsProt410)
		if err411 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.AddressInfo
		value1 := argvalue1
		fmt.Print(client.EditUserAddressInfo(value0, value1))
		fmt.Print("\n")
		break
	case "getUserAddressInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserAddressInfo requires 1 args")
			flag.Usage()
		}
		argvalue0, err412 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err412 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetUserAddressInfo(value0))
		fmt.Print("\n")
		break
	case "addUserWeixin":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddUserWeixin requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AddUserWeixin(value0, value1))
		fmt.Print("\n")
		break
	case "getUserWatchInfo":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetUserWatchInfo requires 2 args")
			flag.Usage()
		}
		argvalue0, err415 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err415 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1, err416 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err416 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.GetUserWatchInfo(value0, value1))
		fmt.Print("\n")
		break
	case "isTalent":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "IsTalent requires 1 args")
			flag.Usage()
		}
		argvalue0, err417 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err417 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.IsTalent(value0))
		fmt.Print("\n")
		break
	case "isTalents":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "IsTalents requires 1 args")
			flag.Usage()
		}
		arg418 := flag.Arg(1)
		mbTrans419 := thrift.NewTMemoryBufferLen(len(arg418))
		defer mbTrans419.Close()
		_, err420 := mbTrans419.WriteString(arg418)
		if err420 != nil {
			Usage()
			return
		}
		factory421 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt422 := factory421.GetProtocol(mbTrans419)
		containerStruct0 := userinfoservice.NewUserInfoServiceIsTalentsArgs()
		err423 := containerStruct0.ReadField1(jsProt422)
		if err423 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.UserIds
		value0 := argvalue0
		fmt.Print(client.IsTalents(value0))
		fmt.Print("\n")
		break
	case "queryMyBlackList":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "QueryMyBlackList requires 1 args")
			flag.Usage()
		}
		argvalue0, err424 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err424 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.QueryMyBlackList(value0))
		fmt.Print("\n")
		break
	case "queryBlackMeList":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "QueryBlackMeList requires 1 args")
			flag.Usage()
		}
		argvalue0, err425 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err425 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.QueryBlackMeList(value0))
		fmt.Print("\n")
		break
	case "queryUserStatus":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "QueryUserStatus requires 1 args")
			flag.Usage()
		}
		argvalue0, err426 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err426 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.QueryUserStatus(value0))
		fmt.Print("\n")
		break
	case "updateUserStatus":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateUserStatus requires 2 args")
			flag.Usage()
		}
		argvalue0, err427 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err427 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg428 := flag.Arg(2)
		mbTrans429 := thrift.NewTMemoryBufferLen(len(arg428))
		defer mbTrans429.Close()
		_, err430 := mbTrans429.WriteString(arg428)
		if err430 != nil {
			Usage()
			return
		}
		factory431 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt432 := factory431.GetProtocol(mbTrans429)
		containerStruct1 := userinfoservice.NewUserInfoServiceUpdateUserStatusArgs()
		err433 := containerStruct1.ReadField2(jsProt432)
		if err433 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.UserStatusMap
		value1 := argvalue1
		fmt.Print(client.UpdateUserStatus(value0, value1))
		fmt.Print("\n")
		break
	case "queryUserRegister":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "QueryUserRegister requires 2 args")
			flag.Usage()
		}
		argvalue0, err434 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err434 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1, err435 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err435 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.QueryUserRegister(value0, value1))
		fmt.Print("\n")
		break
	case "queryUserMedal":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "QueryUserMedal requires 1 args")
			flag.Usage()
		}
		argvalue0, err436 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err436 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.QueryUserMedal(value0))
		fmt.Print("\n")
		break
	case "getUserTokenByApp":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetUserTokenByApp requires 2 args")
			flag.Usage()
		}
		argvalue0, err437 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err437 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetUserTokenByApp(value0, value1))
		fmt.Print("\n")
		break
	case "getUserInfoByPrivateKeyByApp":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetUserInfoByPrivateKeyByApp requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetUserInfoByPrivateKeyByApp(value0, value1))
		fmt.Print("\n")
		break
	case "cancelUser":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CancelUser requires 1 args")
			flag.Usage()
		}
		argvalue0, err441 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err441 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CancelUser(value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
